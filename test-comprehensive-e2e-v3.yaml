apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: comprehensive-e2e-test-v3
  namespace: default
  labels:
    test-type: "comprehensive-repository-creation"
    component-types: "webservice-rasa-chatbot-realtime-platform"
    created-by: "claude-code"
  annotations:
    description: "Comprehensive end-to-end test v3 for unified repository creation and GitHub Actions"
    test-purpose: "Verify all three component types create ONE shared repository with GitHub Actions"
    expected-outcome: "Single repository (comprehensive-e2e-test-v3) with multiple microservices and successful CI/CD pipelines"
spec:
  components:
  
  # 1. Standard Python/FastAPI WebService
  # Expected: ApplicationClaim → onion-architecture-template → comprehensive-gitops.yml
  - name: user-management
    type: webservice
    properties:
      image: socrates12345/user-management:latest
      port: 8080
      language: python           # ← Triggers ApplicationClaim with onion-architecture-template
      framework: fastapi
      database: postgres
      cache: redis
      exposeApi: true
      appContainer: comprehensive-e2e-test-v3  # ← Shared AppContainer = Repository name
      
  # 2. RASA Chatbot (Dual-Container Pattern)
  # Expected: Direct dual Knative Services + ApplicationClaim → chat-template → chat-gitops.yml  
  - name: customer-support
    type: rasa-chatbot
    properties:
      rasaImage: "socrates12345/customer-support-rasa:latest"
      actionsImage: "socrates12345/customer-support-actions:latest"
      enableIstioGateway: true
      chatbotHost: "support.comprehensive-test-v3.com"
      # ← Should generate ApplicationClaim internally and use chat-template
      
  # 3. Real-time Streaming Platform
  # Expected: Knative Service + RealtimePlatformClaim + Argo Workflow → ApplicationClaim → onion-architecture-template
  - name: analytics-engine
    type: realtime-platform
    properties:
      database: postgres
      visualization: metabase
      iot: true
      language: python          # ← Triggers Argo Workflow → ApplicationClaim → onion-architecture-template
      framework: fastapi
      repository: comprehensive-e2e-test-v3  # ← Same AppContainer as webservice
      
---
# Expected Results After Deployment:
#
# 1. KNATIVE SERVICES:
# kubectl get ksvc -A | grep -E "(user-management|customer-support|analytics-engine)"
# - user-management (from webservice)
# - customer-support-rasa (from rasa-chatbot) 
# - customer-support-actions (from rasa-chatbot)
# - analytics-engine-realtime-service (from realtime-platform)
#
# 2. INFRASTRUCTURE:
# kubectl get realtimeplatformclaims | grep comprehensive-e2e-test-v3
# - comprehensive-e2e-test-v3-infrastructure (from realtime-platform)
#
# 3. SINGLE GITHUB REPOSITORY (FIXED):
# https://github.com/shlapolosa/comprehensive-e2e-test-v3
# comprehensive-e2e-test-v3/
# ├── microservices/
# │   ├── user-management/          ← Python/FastAPI (onion architecture)
# │   ├── customer-support/         ← RASA chatbot (3-tier Docker)
# │   └── analytics-engine/         ← Python/FastAPI + realtime (onion architecture)
# ├── .github/workflows/
# │   ├── comprehensive-gitops.yml   ← Detects and builds user-management + analytics-engine
# │   └── chat-gitops.yml           ← Detects and builds customer-support (3-tier)
# └── Infrastructure configs, README, etc.
#
# 4. SINGLE GITOPS REPOSITORY:
# https://github.com/shlapolosa/comprehensive-e2e-test-v3-gitops
# comprehensive-e2e-test-v3-gitops/
# ├── oam/applications/application.yaml  ← Contains all 3 components
# ├── knative/
# │   ├── user-management.yaml
# │   ├── customer-support-rasa.yaml
# │   ├── customer-support-actions.yaml
# │   └── analytics-engine-realtime-service.yaml
# └── argocd/applications/
#
# 5. CI/CD PIPELINE ROUTING:
# - Python services (user-management, analytics-engine) → comprehensive-gitops.yml
# - RASA service (customer-support) → chat-gitops.yml
# - Detection based on presence of domain.yml and config.yml files
#
# 6. SHARED INFRASTRUCTURE:
# - PostgreSQL database (shared by all services)
# - Redis cache (shared by webservice)
# - Kafka streaming (from realtime-platform)
# - MQTT broker (from realtime-platform with iot: true)
# - Metabase visualization (from realtime-platform)
#
# 7. GITHUB ACTIONS SUCCESS CRITERIA:
# - All workflow runs complete successfully
# - Container images built and pushed to docker.io/socrates12345/*
# - No failed builds or test failures
# - OAM manifests updated in gitops repository
#
# 8. VERIFICATION COMMANDS:
# curl -s https://api.github.com/repos/shlapolosa/comprehensive-e2e-test-v3
# gh run list --repo shlapolosa/comprehensive-e2e-test-v3 --limit 10
# kubectl get ksvc -A | grep -E "(user-management|customer-support|analytics-engine)"
# kubectl get realtimeplatformclaims | grep comprehensive-e2e-test-v3
# ./scripts/infrastructure-health-check-enhanced.sh