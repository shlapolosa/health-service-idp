apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: complete-e2e-quality-test
  namespace: default
  labels:
    test-type: "complete-end-to-end-with-quality"
    created-by: "claude-code"
    version: "quality-analysis-enabled"
  annotations:
    description: "Complete E2E test with code quality analysis verification"
    test-purpose: "Verify webservice, realtime-platform, rasa-chatbot + GitHub Actions quality analysis"
    expected-outcome: "3 Knative services, 3 microservices, GitHub Actions with CodeQL + linters"
spec:
  components:
  
  # 1. Standard Python/FastAPI WebService with Quality Analysis
  - name: payment-service
    type: webservice
    properties:
      image: socrates12345/payment-service:latest
      port: 8080
      language: python           # ← Triggers ApplicationClaim → onion-architecture-template
      framework: fastapi
      repository: healthcare-quality-platform
      
  # 2. Real-time Streaming Platform with Quality Analysis
  - name: monitoring-platform
    type: realtime-platform
    properties:
      database: postgres
      visualization: metabase
      iot: true
      language: python          # ← Triggers Argo Workflow → ApplicationClaim → onion-architecture-template
      framework: fastapi
      repository: healthcare-quality-platform
      
  # 3. RASA Chatbot with Quality Analysis (Dual-Container Pattern)
  - name: patient-chat
    type: rasa-chatbot
    properties:
      rasaImage: "socrates12345/patient-chat-rasa:latest"
      actionsImage: "socrates12345/patient-chat-actions:latest"
      enableIstioGateway: true
      language: rasa            # ← Triggers ApplicationClaim → chat-template (3-tier Docker)
      framework: chatbot
      repository: healthcare-quality-platform
      
---
# COMPREHENSIVE E2E SUCCESS CRITERIA WITH CODE QUALITY ANALYSIS:
# 
# 🏗️ UNIFIED REPOSITORY STRUCTURE:
# 1. ✅ Single AppContainer: https://github.com/shlapolosa/healthcare-quality-platform
# 2. ✅ Single AppContainer GitOps: https://github.com/shlapolosa/healthcare-quality-platform-gitops
# 3. ✅ Repository structure matches README:
#    ├── microservices/
#    │   ├── payment-service/           ← Python/FastAPI (comprehensive-gitops.yml with CodeQL)
#    │   ├── patient-chat/              ← RASA chatbot (chat-gitops.yml with CodeQL)  
#    │   └── monitoring-platform/       ← Python/FastAPI + realtime (comprehensive-gitops.yml with CodeQL)
#    ├── .github/workflows/
#    │   ├── comprehensive-gitops.yml   ← With code-quality-analysis job (GitHub CodeQL + linters)
#    │   └── chat-gitops.yml           ← With code-quality-analysis job (GitHub CodeQL + linters)
#    └── Infrastructure: PostgreSQL, Redis, Kafka, MQTT, Metabase
#
# 🚀 KNATIVE SERVICES:
# 4. ✅ payment-service (webservice) → image: socrates12345/payment-service:latest
# 5. ✅ monitoring-platform-realtime-service → image: socrates12345/monitoring-platform:latest
# 6. ✅ patient-chat-rasa → image: socrates12345/patient-chat-rasa:latest
# 7. ✅ patient-chat-actions → image: socrates12345/patient-chat-actions:latest
#
# 🔍 NEW: CODE QUALITY ANALYSIS VERIFICATION:
# 8. ✅ comprehensive-gitops.yml contains code-quality-analysis job with:
#    - GitHub CodeQL initialization (languages: python, queries: security-extended,quality)
#    - Bandit security analysis for Python vulnerability scanning
#    - flake8 code style and quality checking with import order validation
#    - OWASP Dependency Check for comprehensive vulnerability scanning
#    - pytest test coverage measurement and reporting
#    - SARIF uploads to GitHub Security tab
#    - Quality summaries in GitHub Actions step summary
# 9. ✅ chat-gitops.yml contains code-quality-analysis job with same components
# 10. ✅ Job dependencies updated: vulnerability-scan → code-quality-analysis → build
# 11. ✅ Pipeline flow: Security → Quality → Build → GitOps → Deploy
# 12. ✅ Slack notifications include code quality status
# 13. ✅ Non-blocking quality gates (continue-on-error: true)
#
# 🔄 INFRASTRUCTURE COMPONENTS:
# 14. ✅ PostgreSQL database deployed and healthy
# 15. ✅ Redis cache deployed and healthy  
# 16. ✅ Kafka + MQTT + Lenses + Metabase (from realtime-platform)
# 17. ✅ Database and cache secrets created
#
# 🔍 CONDITIONAL LOGIC VERIFICATION:
# 18. ✅ Chat-repo-creator skips for payment-service and monitoring-platform (not RASA)
# 19. ✅ Chat-repo-creator processes patient-chat (is RASA service)
# 20. ✅ Parameter mapping: APP_CONTAINER=healthcare-quality-platform for all services
# 21. ✅ NO separate service-specific repositories created
#
# 🔧 GITOPS VERIFICATION:
# 22. ✅ GitOps manifests in healthcare-quality-platform-gitops/manifests/
# 23. ✅ ConfigMaps for all three services created
# 24. ✅ ArgoCD can discover and deploy all services
#
# 🚀 GITHUB ACTIONS TESTING:
# 25. ✅ Trigger GitHub Actions by pushing dummy code to microservices
# 26. ✅ Verify code-quality-analysis job runs successfully
# 27. ✅ Check GitHub Security tab for SARIF uploads (Bandit, CodeQL, OWASP)
# 28. ✅ Verify quality summaries appear in step summaries
# 29. ✅ Confirm cost savings: $0 cost vs $30-60/month for SonarQube (3 services)
#
# VERIFICATION COMMANDS:
# kubectl get ksvc | grep -E "(payment-service|monitoring-platform|patient-chat)"
# kubectl get applicationclaim | grep -E "(payment-service|monitoring-platform|patient-chat)"
# kubectl get appcontainerclaim healthcare-quality-platform
# curl -s https://api.github.com/repos/shlapolosa/healthcare-quality-platform/contents/microservices
# curl -s https://api.github.com/repos/shlapolosa/healthcare-quality-platform/contents/.github/workflows
# kubectl logs job/payment-service-chat-repo-creator
# kubectl logs job/monitoring-platform-chat-repo-creator  
# kubectl logs job/patient-chat-chat-repo-creator
#
# GITHUB ACTIONS VERIFICATION:
# gh api repos/shlapolosa/healthcare-quality-platform/actions/workflows
# gh api repos/shlapolosa/healthcare-quality-platform/actions/runs --jq '.workflow_runs[0].conclusion'
# gh api repos/shlapolosa/healthcare-quality-platform/code-scanning/alerts
# 
# SUCCESS METRICS:
# - 3 Knative services deployed and ready
# - 1 unified GitHub repository with 3 microservices
# - 2 GitHub Actions workflows with code-quality-analysis jobs
# - 0 separate service repositories (unified pattern working)
# - GitHub Security tab populated with quality analysis results
# - Step summaries showing security, quality, and coverage metrics
# - Total cost: $0/month (vs $30-60/month for SonarQube alternative)