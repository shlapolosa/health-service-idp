apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: appcontainer-creation
  namespace: argo
spec:
  entrypoint: create-appcontainer
  arguments:
    parameters:
    - name: appcontainer-name
      value: "default-app"
    - name: namespace
      value: "default"
    - name: description
      value: "CLAUDE.md-compliant application container"
    - name: github-org
      value: "socrates12345"
    - name: docker-registry
      value: "docker.io/socrates12345"
    - name: observability
      value: "true"
    - name: security
      value: "true"
    - name: vcluster-name
      value: ""
    - name: auto-create-vcluster
      value: "true"
    - name: user
      value: "unknown"
    - name: slack-channel
      value: "unknown"
    - name: slack-user-id
      value: "unknown"

  templates:
  - name: create-appcontainer
    inputs:
      parameters:
      - name: appcontainer-name
        default: "{{workflow.parameters.appcontainer-name}}"
      - name: namespace  
        default: "{{workflow.parameters.namespace}}"
      - name: description
        default: "{{workflow.parameters.description}}"
      - name: github-org
        default: "{{workflow.parameters.github-org}}"
      - name: docker-registry
        default: "{{workflow.parameters.docker-registry}}"
      - name: observability
        default: "{{workflow.parameters.observability}}"
      - name: security
        default: "{{workflow.parameters.security}}"
      - name: vcluster-name
        default: "{{workflow.parameters.vcluster-name}}"
      - name: auto-create-vcluster
        default: "{{workflow.parameters.auto-create-vcluster}}"
      - name: user
        default: "{{workflow.parameters.user}}"
      - name: slack-channel
        default: "{{workflow.parameters.slack-channel}}"
      - name: slack-user-id
        default: "{{workflow.parameters.slack-user-id}}"
    steps:
    - - name: notify-starting
        templateRef:
          name: slack-notifications
          template: send-slack-progress
        arguments:
          parameters:
          - name: workflow-type
            value: "appcontainer"
          - name: resource-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: status
            value: "starting"
          - name: step-name
            value: "Setting up AppContainer and ensuring VCluster availability..."
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
    - - name: validate-request
        template: validate-appcontainer-request
        arguments:
          parameters:
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: description
            value: "{{inputs.parameters.description}}"
          - name: github-org
            value: "{{inputs.parameters.github-org}}"
          - name: user
            value: "{{inputs.parameters.user}}"
    - - name: notify-validated
        templateRef:
          name: slack-notifications
          template: send-slack-progress
        arguments:
          parameters:
          - name: workflow-type
            value: "appcontainer"
          - name: resource-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: status
            value: "validated"
          - name: step-name
            value: "‚úÖ Request validated - setting up VCluster environment..."
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
        when: "{{steps.validate-request.status}} == Succeeded"
    - - name: ensure-vcluster
        template: ensure-vcluster-exists
        arguments:
          parameters:
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: vcluster-name
            value: "{{inputs.parameters.vcluster-name}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: security
            value: "{{inputs.parameters.security}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: slack-channel
            value: "{{inputs.parameters.slack-channel}}"
          - name: slack-user-id
            value: "{{inputs.parameters.slack-user-id}}"
          - name: auto-create-vcluster
            value: "{{inputs.parameters.auto-create-vcluster}}"
        when: "{{steps.validate-request.status}} == Succeeded"
    - - name: notify-vcluster-ready
        templateRef:
          name: slack-notifications
          template: send-slack-progress
        arguments:
          parameters:
          - name: workflow-type
            value: "appcontainer"
          - name: resource-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: status
            value: "vcluster-ready"
          - name: step-name
            value: "‚úÖ VCluster ready - creating application resources..."
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
        when: "{{steps.ensure-vcluster.status}} == Succeeded"
    - - name: create-appcontainer-claim
        template: create-claim
        arguments:
          parameters:
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: description
            value: "{{inputs.parameters.description}}"
          - name: github-org
            value: "{{inputs.parameters.github-org}}"
          - name: docker-registry
            value: "{{inputs.parameters.docker-registry}}"
          - name: observability
            value: "{{inputs.parameters.observability}}"
          - name: security
            value: "{{inputs.parameters.security}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: slack-channel
            value: "{{inputs.parameters.slack-channel}}"
        when: "{{steps.ensure-vcluster.status}} == Succeeded"
    - - name: notify-repositories
        templateRef:
          name: slack-notifications
          template: send-slack-progress
        arguments:
          parameters:
          - name: workflow-type
            value: "appcontainer"
          - name: resource-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: status
            value: "repositories"
          - name: step-name
            value: "Creating source and GitOps repositories..."
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
        when: "{{steps.create-appcontainer-claim.status}} == Succeeded"
    - - name: wait-for-repositories
        template: wait-for-repositories
        arguments:
          parameters:
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
        when: "{{steps.create-appcontainer-claim.status}} == Succeeded"
    - - name: notify-microservices
        templateRef:
          name: slack-notifications
          template: send-slack-progress
        arguments:
          parameters:
          - name: workflow-type
            value: "appcontainer"
          - name: resource-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: status
            value: "microservices"
          - name: step-name
            value: "üöÄ Creating default microservice template..."
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
        when: "{{steps.wait-for-repositories.status}} == Succeeded"
    - - name: create-default-microservice
        template: create-default-microservice
        arguments:
          parameters:
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: vcluster-name
            value: "{{inputs.parameters.vcluster-name}}"
        when: "{{steps.wait-for-repositories.status}} == Succeeded"
    - - name: notify-exposing
        templateRef:
          name: slack-notifications
          template: send-slack-progress
        arguments:
          parameters:
          - name: workflow-type
            value: "appcontainer"
          - name: resource-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: status
            value: "exposing"
          - name: step-name
            value: "üåê Configuring service mesh and exposing endpoints..."
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
        when: "{{steps.create-default-microservice.status}} == Succeeded"
    - - name: expose-vcluster-services
        template: expose-vcluster-services
        arguments:
          parameters:
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: vcluster-name
            value: "{{inputs.parameters.vcluster-name}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
        when: "{{steps.create-default-microservice.status}} == Succeeded"
    - - name: extract-appcontainer-info
        template: extract-appcontainer-info
        arguments:
          parameters:
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: vcluster-name
            value: "{{inputs.parameters.vcluster-name}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
        when: "{{steps.expose-vcluster-services.status}} == Succeeded"
    - - name: notify-success
        templateRef:
          name: slack-notifications
          template: send-slack-success
        arguments:
          parameters:
          - name: workflow-type
            value: "appcontainer"
          - name: resource-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: capabilities
            value: "üì¶ Microservices Platform\\nüîÑ GitOps (ArgoCD)\\nüåê Service Mesh (Istio)\\n‚ö° Auto-scaling (Knative)\\nüìä Observability Stack"
          - name: endpoints
            value: "{{steps.extract-appcontainer-info.outputs.parameters.endpoints-summary}}"
        when: "{{steps.expose-vcluster-services.status}} == Succeeded"
    - - name: notify-failure
        templateRef:
          name: slack-notifications
          template: send-slack-failure
        arguments:
          parameters:
          - name: workflow-type
            value: "appcontainer"
          - name: resource-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: error-message
            value: "AppContainer creation failed - check workflow logs for details"
          - name: failed-step
            value: "AppContainer workflow failed"
        when: "{{steps.validate-request.status}} != Succeeded or {{steps.ensure-vcluster.status}} != Succeeded or {{steps.create-appcontainer-claim.status}} != Succeeded or {{steps.wait-for-repositories.status}} != Succeeded or {{steps.create-default-microservice.status}} != Succeeded or {{steps.expose-vcluster-services.status}} != Succeeded"

  - name: validate-appcontainer-request
    inputs:
      parameters:
      - name: appcontainer-name
        default: "{{workflow.parameters.appcontainer-name}}"
      - name: namespace
        default: "{{workflow.parameters.namespace}}"
      - name: description
        default: "{{workflow.parameters.description}}"
      - name: github-org
        default: "{{workflow.parameters.github-org}}"
      - name: user
        default: "{{workflow.parameters.user}}"
    script:
      image: alpine:3.18
      command: [sh]
      source: |
        echo "Validating AppContainer request..."
        echo "Name: {{inputs.parameters.appcontainer-name}}"
        echo "Namespace: {{inputs.parameters.namespace}}"
        echo "Description: {{inputs.parameters.description}}"
        echo "GitHub Org: {{inputs.parameters.github-org}}"
        echo "User: {{inputs.parameters.user}}"
        
        # Basic validation
        if [ -z "{{inputs.parameters.appcontainer-name}}" ]; then
          echo "AppContainer name is required"
          exit 1
        fi
        
        # Validate name format (lowercase, alphanumeric, hyphens)
        if ! echo "{{inputs.parameters.appcontainer-name}}" | grep -E '^[a-z0-9][a-z0-9-]*[a-z0-9]$'; then
          echo "Invalid AppContainer name format (must be DNS-1123 compliant)"
          exit 1
        fi
        
        # Validate GitHub organization
        if [ -z "{{inputs.parameters.github-org}}" ]; then
          echo "GitHub organization is required"
          exit 1
        fi
        
        echo "Validation successful"

  - name: ensure-vcluster-exists
    inputs:
      parameters:
      - name: appcontainer-name
        default: "{{workflow.parameters.appcontainer-name}}"
      - name: vcluster-name
        default: "{{workflow.parameters.vcluster-name}}"
      - name: namespace
        default: "{{workflow.parameters.namespace}}"
      - name: security
        default: "{{workflow.parameters.security}}"
      - name: user
        default: "{{workflow.parameters.user}}"
      - name: slack-channel
        default: "{{workflow.parameters.slack-channel}}"
      - name: slack-user-id
        default: "{{workflow.parameters.slack-user-id}}"
      - name: auto-create-vcluster
        default: "{{workflow.parameters.auto-create-vcluster}}"
    steps:
    - - name: create-vcluster-for-appcontainer
        templateRef:
          name: vcluster-creation
          template: create-vcluster
        arguments:
          parameters:
          - name: vcluster-name
            value: "{{inputs.parameters.vcluster-name}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: size
            value: "medium"
          - name: capabilities
            value: '{"observability":"true","security":"{{inputs.parameters.security}}","gitops":"true","logging":"true","networking":"true","autoscaling":"false","backup":"false"}'
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: slack-channel
            value: "{{inputs.parameters.slack-channel}}"
          - name: slack-user-id
            value: "{{inputs.parameters.slack-user-id}}"
        when: "{{inputs.parameters.auto-create-vcluster}} == true"
    - - name: check-existing-vcluster
        template: check-existing-vcluster
        arguments:
          parameters:
          - name: vcluster-name
            value: "{{inputs.parameters.vcluster-name}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
        when: "{{inputs.parameters.auto-create-vcluster}} == false"

  - name: check-existing-vcluster
    inputs:
      parameters:
      - name: vcluster-name
        default: "{{workflow.parameters.vcluster-name}}"
      - name: namespace
        default: "{{workflow.parameters.namespace}}"
      - name: appcontainer-name
        default: "{{workflow.parameters.appcontainer-name}}"
    script:
      image: bitnami/kubectl:1.28
      command: [sh]
      source: |
        echo "Checking existing vCluster for AppContainer deployment..."
        
        # Use provided vCluster name or derive from appcontainer name
        TARGET_VCLUSTER="{{inputs.parameters.vcluster-name}}"
        if [ -z "$TARGET_VCLUSTER" ]; then
          TARGET_VCLUSTER="{{inputs.parameters.appcontainer-name}}-vcluster"
        fi
        
        echo "üîç Checking vCluster: $TARGET_VCLUSTER"
        
        # Check if vCluster exists
        if ! kubectl get vclusterenvironmentclaim $TARGET_VCLUSTER -n {{inputs.parameters.namespace}} >/dev/null 2>&1; then
          echo "‚ùå VCluster $TARGET_VCLUSTER does not exist"
          echo "üí° Enable auto-create-vcluster or create the vCluster first"
          exit 1
        fi
        
        # Check required components
        ARGOCD=$(kubectl get vclusterenvironmentclaim $TARGET_VCLUSTER -n {{inputs.parameters.namespace}} -o jsonpath='{.spec.components.argoCD}' 2>/dev/null || echo "false")
        ISTIO=$(kubectl get vclusterenvironmentclaim $TARGET_VCLUSTER -n {{inputs.parameters.namespace}} -o jsonpath='{.spec.components.istio}' 2>/dev/null || echo "false")
        KNATIVE=$(kubectl get vclusterenvironmentclaim $TARGET_VCLUSTER -n {{inputs.parameters.namespace}} -o jsonpath='{.spec.components.knativeServing}' 2>/dev/null || echo "false")
        
        echo "üîç VCluster components:"
        echo "  ArgoCD: $ARGOCD"
        echo "  Istio: $ISTIO"
        echo "  Knative Serving: $KNATIVE"
        
        if [ "$ARGOCD" = "true" ] && [ "$ISTIO" = "true" ] && [ "$KNATIVE" = "true" ]; then
          echo "‚úÖ VCluster has all required components for AppContainer"
          exit 0
        else
          echo "‚ùå VCluster missing required components for AppContainer"
          echo "üí° Required: ArgoCD=true, Istio=true, KnativeServing=true"
          exit 1
        fi

  - name: create-claim
    inputs:
      parameters:
      - name: appcontainer-name
        default: "{{workflow.parameters.appcontainer-name}}"
      - name: namespace
        default: "{{workflow.parameters.namespace}}"
      - name: description
        default: "{{workflow.parameters.description}}"
      - name: github-org
        default: "{{workflow.parameters.github-org}}"
      - name: docker-registry
        default: "{{workflow.parameters.docker-registry}}"
      - name: observability
        default: "{{workflow.parameters.observability}}"
      - name: security
        default: "{{workflow.parameters.security}}"
      - name: user
        default: "{{workflow.parameters.user}}"
      - name: slack-channel
        default: "{{workflow.parameters.slack-channel}}"
    script:
      image: bitnami/kubectl:1.28
      command: [sh]
      source: |
        echo "Creating AppContainer claim..."
        
        # Create namespace if it doesn't exist
        echo "Ensuring namespace {{inputs.parameters.namespace}} exists..."
        kubectl create namespace {{inputs.parameters.namespace}} --dry-run=client -o yaml | kubectl apply -f -
        
        # Parse boolean parameters
        OBSERVABILITY=$([ "{{inputs.parameters.observability}}" = "true" ] && echo "true" || echo "false")
        SECURITY=$([ "{{inputs.parameters.security}}" = "true" ] && echo "true" || echo "false")
        
        # Create AppContainer claim manifest
        cat <<EOF | kubectl apply -f -
        apiVersion: platform.example.org/v1alpha1
        kind: AppContainerClaim
        metadata:
          name: {{inputs.parameters.appcontainer-name}}
          namespace: {{inputs.parameters.namespace}}
          labels:
            created-by: slack
            requested-by: "{{inputs.parameters.user}}"
            slack-channel: "{{inputs.parameters.slack-channel}}"
        spec:
          name: {{inputs.parameters.appcontainer-name}}
          description: "{{inputs.parameters.description}}"
          gitHubOrg: "{{inputs.parameters.github-org}}"
          dockerRegistry: "{{inputs.parameters.docker-registry}}"
          enableObservability: $OBSERVABILITY
          enableSecurity: $SECURITY
        EOF
        
        if [ $? -eq 0 ]; then
          echo "AppContainer claim created successfully"
          echo "Crossplane will now create repositories and CI/CD infrastructure..."
          echo "Source repo: https://github.com/{{inputs.parameters.github-org}}/{{inputs.parameters.appcontainer-name}}"
          echo "GitOps repo: https://github.com/{{inputs.parameters.github-org}}/{{inputs.parameters.appcontainer-name}}-gitops"
          exit 0
        else
          echo "Failed to create AppContainer claim"
          exit 1
        fi

  - name: wait-for-repositories
    inputs:
      parameters:
      - name: appcontainer-name
        default: "{{workflow.parameters.appcontainer-name}}"
      - name: namespace
        default: "{{workflow.parameters.namespace}}"
    script:
      image: bitnami/kubectl:1.28
      command: [sh]
      source: |
        echo "Waiting for AppContainer repositories to be created by Crossplane..."
        
        # Wait for the AppContainer claim to have repository URLs in status
        TIMEOUT=300
        ELAPSED=0
        
        while [ $ELAPSED -lt $TIMEOUT ]; do
          echo "Checking AppContainer claim status... (${ELAPSED}s/${TIMEOUT}s)"
          
          SOURCE_URL=$(kubectl get appcontainerclaim {{inputs.parameters.appcontainer-name}} -n {{inputs.parameters.namespace}} -o jsonpath='{.status.sourceRepository.url}' 2>/dev/null || echo "")
          GITOPS_URL=$(kubectl get appcontainerclaim {{inputs.parameters.appcontainer-name}} -n {{inputs.parameters.namespace}} -o jsonpath='{.status.gitopsRepository.url}' 2>/dev/null || echo "")
          
          if [ ! -z "$SOURCE_URL" ] && [ ! -z "$GITOPS_URL" ]; then
            echo "‚úÖ Repositories created successfully!"
            echo "Source: $SOURCE_URL"
            echo "GitOps: $GITOPS_URL"
            exit 0
          fi
          
          sleep 10
          ELAPSED=$((ELAPSED + 10))
        done
        
        echo "‚ùå Timeout waiting for repositories to be created"
        exit 1

  - name: create-default-microservice
    inputs:
      parameters:
      - name: appcontainer-name
        default: "{{workflow.parameters.appcontainer-name}}"
      - name: vcluster-name
        default: "{{workflow.parameters.vcluster-name}}"
    script:
      image: bitnami/kubectl:1.28
      command: [sh]
      source: |
        echo "Creating default microservice for AppContainer {{inputs.parameters.appcontainer-name}}..."
        
        # Determine target vCluster name  
        TARGET_VCLUSTER="{{inputs.parameters.vcluster-name}}"
        if [ -z "$TARGET_VCLUSTER" ] || [ "$TARGET_VCLUSTER" = "" ]; then
          TARGET_VCLUSTER="{{inputs.parameters.appcontainer-name}}-vcluster"
        fi
        
        echo "üöÄ Creating default microservice in vCluster: $TARGET_VCLUSTER"
        
        # Create an ApplicationClaim for a default "hello-world" microservice
        # This will be deployed inside the vCluster
        cat <<EOF | kubectl apply -f -
        apiVersion: platform.example.org/v1alpha1
        kind: ApplicationClaim
        metadata:
          name: {{inputs.parameters.appcontainer-name}}-hello-world
          namespace: $TARGET_VCLUSTER
          labels:
            created-by: appcontainer-workflow
            app-container: "{{inputs.parameters.appcontainer-name}}"
            microservice-type: default
            target-vcluster: $TARGET_VCLUSTER
        spec:
          appContainer: "{{inputs.parameters.appcontainer-name}}"
          name: hello-world
          language: python
          framework: fastapi
          description: "Default CLAUDE.md-compliant microservice template"
        EOF
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Default microservice 'hello-world' created successfully"
          echo "This provides a complete CLAUDE.md-compliant template structure"
          echo "üìÅ Check: microservices/hello-world/ in your source repository"
          exit 0
        else
          echo "‚ùå Failed to create default microservice"
          exit 1
        fi

  - name: expose-vcluster-services
    inputs:
      parameters:
      - name: appcontainer-name
        default: "{{workflow.parameters.appcontainer-name}}"
      - name: vcluster-name
        default: "{{workflow.parameters.vcluster-name}}"
      - name: namespace
        default: "{{workflow.parameters.namespace}}"
    script:
      image: bitnami/kubectl:1.28
      command: [sh]
      source: |
        echo "Exposing vCluster services for AppContainer {{inputs.parameters.appcontainer-name}}..."
        
        # Use provided vCluster name or derive from appcontainer name
        TARGET_VCLUSTER="{{inputs.parameters.vcluster-name}}"
        if [ -z "$TARGET_VCLUSTER" ]; then
          TARGET_VCLUSTER="{{inputs.parameters.appcontainer-name}}-vcluster"
        fi
        
        echo "üåê Setting up ingress for vCluster: $TARGET_VCLUSTER"
        
        # Create Istio Gateway for vCluster ArgoCD
        cat <<EOF | kubectl apply -f -
        apiVersion: networking.istio.io/v1beta1
        kind: Gateway
        metadata:
          name: ${TARGET_VCLUSTER}-argocd-gateway
          namespace: $TARGET_VCLUSTER
          labels:
            app-container: "{{inputs.parameters.appcontainer-name}}"
            service-type: argocd
        spec:
          selector:
            istio: ingressgateway
          servers:
          - port:
              number: 80
              name: http
              protocol: HTTP
            hosts:
            - "${TARGET_VCLUSTER}-argocd.{{inputs.parameters.namespace}}.local"
            - "${TARGET_VCLUSTER}-argocd.*"
          - port:
              number: 443
              name: https
              protocol: HTTPS
            tls:
              mode: SIMPLE
            hosts:
            - "${TARGET_VCLUSTER}-argocd.{{inputs.parameters.namespace}}.local"
            - "${TARGET_VCLUSTER}-argocd.*"
        EOF
        
        # Create VirtualService for ArgoCD
        cat <<EOF | kubectl apply -f -
        apiVersion: networking.istio.io/v1beta1
        kind: VirtualService
        metadata:
          name: ${TARGET_VCLUSTER}-argocd-vs
          namespace: $TARGET_VCLUSTER
          labels:
            app-container: "{{inputs.parameters.appcontainer-name}}"
            service-type: argocd
        spec:
          hosts:
          - "${TARGET_VCLUSTER}-argocd.{{inputs.parameters.namespace}}.local"
          - "${TARGET_VCLUSTER}-argocd.*"
          gateways:
          - ${TARGET_VCLUSTER}-argocd-gateway
          http:
          - match:
            - uri:
                prefix: /
            route:
            - destination:
                host: argocd-server.argocd.svc.cluster.local
                port:
                  number: 80
            headers:
              request:
                set:
                  Host: argocd-server.argocd.svc.cluster.local
        EOF
        
        # Create Gateway for Knative services (application microservices)
        cat <<EOF | kubectl apply -f -
        apiVersion: networking.istio.io/v1beta1
        kind: Gateway
        metadata:
          name: ${TARGET_VCLUSTER}-apps-gateway
          namespace: $TARGET_VCLUSTER
          labels:
            app-container: "{{inputs.parameters.appcontainer-name}}"
            service-type: applications
        spec:
          selector:
            istio: ingressgateway
          servers:
          - port:
              number: 80
              name: http
              protocol: HTTP
            hosts:
            - "*.{{inputs.parameters.appcontainer-name}}.{{inputs.parameters.namespace}}.local"
            - "*.{{inputs.parameters.appcontainer-name}}.*"
          - port:
              number: 443
              name: https
              protocol: HTTPS
            tls:
              mode: SIMPLE
            hosts:
            - "*.{{inputs.parameters.appcontainer-name}}.{{inputs.parameters.namespace}}.local"
            - "*.{{inputs.parameters.appcontainer-name}}.*"
        EOF
        
        # Create VirtualService for hello-world microservice
        cat <<EOF | kubectl apply -f -
        apiVersion: networking.istio.io/v1beta1
        kind: VirtualService
        metadata:
          name: hello-world-vs
          namespace: {{inputs.parameters.namespace}}
          labels:
            app-container: "{{inputs.parameters.appcontainer-name}}"
            service-type: microservice
            microservice: hello-world
        spec:
          hosts:
          - "hello-world.{{inputs.parameters.appcontainer-name}}.{{inputs.parameters.namespace}}.local"
          - "hello-world.{{inputs.parameters.appcontainer-name}}.*"
          gateways:
          - ${TARGET_VCLUSTER}-apps-gateway
          http:
          - match:
            - uri:
                prefix: /
            route:
            - destination:
                host: hello-world.{{inputs.parameters.namespace}}.svc.cluster.local
                port:
                  number: 80
        EOF
        
        # Get ingress details
        ARGOCD_URL="http://${TARGET_VCLUSTER}-argocd.{{inputs.parameters.namespace}}.local"
        HELLO_WORLD_URL="http://hello-world.{{inputs.parameters.appcontainer-name}}.{{inputs.parameters.namespace}}.local"
        
        echo "‚úÖ Services exposed successfully!"
        echo ""
        echo "üéØ Access URLs:"
        echo "  üìä ArgoCD (GitOps): $ARGOCD_URL"
        echo "  üöÄ Hello World Service: $HELLO_WORLD_URL"
        echo ""
        echo "üìã Next steps:"
        echo "  1. Access ArgoCD to manage deployments"
        echo "  2. Add more microservices using ApplicationClaim"
        echo "  3. Configure custom domains and TLS"
        echo "  4. Monitor with Grafana and Jaeger"
        
        exit 0

  - name: extract-appcontainer-info
    inputs:
      parameters:
      - name: appcontainer-name
        default: "{{workflow.parameters.appcontainer-name}}"
      - name: vcluster-name
        default: "{{workflow.parameters.vcluster-name}}"
      - name: namespace
        default: "{{workflow.parameters.namespace}}"
    outputs:
      parameters:
      - name: endpoints-summary
        valueFrom:
          path: /tmp/endpoints.txt
    script:
      image: bitnami/kubectl:1.28
      command: [sh]
      source: |
        echo "üîç Extracting AppContainer connection information..."
        
        # Use provided vCluster name or derive from appcontainer name
        TARGET_VCLUSTER="{{inputs.parameters.vcluster-name}}"
        if [ -z "$TARGET_VCLUSTER" ]; then
          TARGET_VCLUSTER="{{inputs.parameters.appcontainer-name}}-vcluster"
        fi
        
        echo "üîç Extracting endpoints for AppContainer: {{inputs.parameters.appcontainer-name}}"
        echo "Target VCluster: $TARGET_VCLUSTER"
        
        # Build endpoints summary
        ENDPOINTS_SUMMARY=""
        
        # ArgoCD endpoint
        ARGOCD_URL="http://${TARGET_VCLUSTER}-argocd.{{inputs.parameters.namespace}}.local"
        ENDPOINTS_SUMMARY="${ENDPOINTS_SUMMARY}üîÑ ArgoCD: $ARGOCD_URL\\n"
        
        # Hello World microservice endpoint
        HELLO_WORLD_URL="http://hello-world.{{inputs.parameters.appcontainer-name}}.{{inputs.parameters.namespace}}.local"
        ENDPOINTS_SUMMARY="${ENDPOINTS_SUMMARY}üöÄ Hello World Service: $HELLO_WORLD_URL\\n"
        
        # Check if Grafana is available (from VCluster observability)
        GRAFANA_URL=$(kubectl get vclusterenvironmentclaim $TARGET_VCLUSTER -n {{inputs.parameters.namespace}} -o jsonpath='{.status.observability.grafana.url}' 2>/dev/null || echo "")
        if [ -n "$GRAFANA_URL" ]; then
          ENDPOINTS_SUMMARY="${ENDPOINTS_SUMMARY}üìä Grafana: $GRAFANA_URL\\n"
        fi
        
        # Check if Jaeger is available
        JAEGER_URL=$(kubectl get vclusterenvironmentclaim $TARGET_VCLUSTER -n {{inputs.parameters.namespace}} -o jsonpath='{.status.observability.jaeger.url}' 2>/dev/null || echo "")
        if [ -n "$JAEGER_URL" ]; then
          ENDPOINTS_SUMMARY="${ENDPOINTS_SUMMARY}üîç Jaeger: $JAEGER_URL\\n"
        fi
        
        # Write output to file
        echo -e "$ENDPOINTS_SUMMARY" > /tmp/endpoints.txt
        
        echo "‚úÖ AppContainer connection information extracted"
        echo "Endpoints: $ENDPOINTS_SUMMARY"

  - name: notify-slack
    inputs:
      parameters:
      - name: status
      - name: message
    script:
      image: curlimages/curl:8.5.0
      command: [sh]
      source: |
        echo "üì± Sending Slack notification..."
        
        if [ "{{inputs.parameters.status}}" = "success" ]; then
          EMOJI="‚úÖ"
          COLOR="good"
        else
          EMOJI="‚ùå"
          COLOR="danger"
        fi
        
        # Note: This is a placeholder - in production, you'd get the webhook URL from a secret
        echo "Would send to Slack: $EMOJI {{inputs.parameters.message}}"
        echo "AppContainer: {{workflow.parameters.appcontainer-name}}"
        echo "GitHub Org: {{workflow.parameters.github-org}}"
        echo "User: {{workflow.parameters.user}}"
        echo "Channel: {{workflow.parameters.slack-channel}}"
        
        # TODO: Replace with actual Slack webhook call when implementing
        # curl -X POST -H 'Content-type: application/json' \
        #   --data "{\"text\":\"$EMOJI {{inputs.parameters.message}}\"}" \
        #   "$SLACK_WEBHOOK_URL"