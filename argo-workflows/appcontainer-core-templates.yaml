apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: appcontainer-core-templates
  namespace: argo
  annotations:
    description: "Core AppContainer implementation templates - pure implementation without parameter defaults"
spec:
  templates:

  # =============================================================================
  # MAIN APPCONTAINER CORE WORKFLOW
  # =============================================================================
  - name: appcontainer-core-workflow
    inputs:
      parameters:
      - name: appcontainer-name
      - name: namespace
      - name: description
      - name: github-org
      - name: docker-registry
      - name: observability
      - name: security
      - name: vcluster-name
      - name: auto-create-vcluster
      - name: user
      - name: slack-channel
      - name: slack-user-id
    steps:
    - - name: notify-starting
        templateRef:
          name: slack-notifications
          template: send-slack-progress
        arguments:
          parameters:
          - name: workflow-type
            value: "appcontainer"
          - name: resource-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: status
            value: "starting"
          - name: step-name
            value: "Setting up AppContainer and ensuring VCluster availability..."
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
    - - name: validate-request
        template: validate-appcontainer-core
        arguments:
          parameters:
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: description
            value: "{{inputs.parameters.description}}"
          - name: github-org
            value: "{{inputs.parameters.github-org}}"
          - name: user
            value: "{{inputs.parameters.user}}"
    - - name: notify-validated
        templateRef:
          name: slack-notifications
          template: send-slack-progress
        arguments:
          parameters:
          - name: workflow-type
            value: "appcontainer"
          - name: resource-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: status
            value: "validated"
          - name: step-name
            value: "‚úÖ Request validated - setting up VCluster environment..."
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
        when: "{{steps.validate-request.status}} == Succeeded"
    - - name: ensure-vcluster
        template: ensure-vcluster-core
        arguments:
          parameters:
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: vcluster-name
            value: "{{inputs.parameters.vcluster-name}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: security
            value: "{{inputs.parameters.security}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: slack-channel
            value: "{{inputs.parameters.slack-channel}}"
          - name: slack-user-id
            value: "{{inputs.parameters.slack-user-id}}"
          - name: auto-create-vcluster
            value: "{{inputs.parameters.auto-create-vcluster}}"
        when: "{{steps.validate-request.status}} == Succeeded"
    - - name: notify-vcluster-ready
        templateRef:
          name: slack-notifications
          template: send-slack-progress
        arguments:
          parameters:
          - name: workflow-type
            value: "appcontainer"
          - name: resource-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: status
            value: "vcluster-ready"
          - name: step-name
            value: "‚úÖ VCluster ready - creating application resources..."
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
        when: "{{steps.ensure-vcluster.status}} == Succeeded"
    - - name: create-appcontainer-claim
        template: create-appcontainer-claim-core
        arguments:
          parameters:
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: description
            value: "{{inputs.parameters.description}}"
          - name: github-org
            value: "{{inputs.parameters.github-org}}"
          - name: docker-registry
            value: "{{inputs.parameters.docker-registry}}"
          - name: observability
            value: "{{inputs.parameters.observability}}"
          - name: security
            value: "{{inputs.parameters.security}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: slack-channel
            value: "{{inputs.parameters.slack-channel}}"
        when: "{{steps.ensure-vcluster.status}} == Succeeded"
    - - name: wait-for-repositories
        template: wait-for-repositories-core
        arguments:
          parameters:
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
        when: "{{steps.create-appcontainer-claim.status}} == Succeeded"
    - - name: notify-success
        templateRef:
          name: slack-notifications
          template: send-slack-success
        arguments:
          parameters:
          - name: workflow-type
            value: "appcontainer"
          - name: resource-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: capabilities
            value: "üì¶ Microservices Platform\\nüîÑ GitOps (ArgoCD)\\nüåê Service Mesh (Istio)\\n‚ö° Auto-scaling (Knative)\\nüìä Observability Stack"
          - name: endpoints
            value: "AppContainer '{{inputs.parameters.appcontainer-name}}' ready for microservice deployment"
        when: "{{steps.wait-for-repositories.status}} == Succeeded"
    - - name: notify-failure
        templateRef:
          name: slack-notifications
          template: send-slack-failure
        arguments:
          parameters:
          - name: workflow-type
            value: "appcontainer"
          - name: resource-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: error-message
            value: "AppContainer creation failed - check workflow logs for details"
          - name: failed-step
            value: "AppContainer workflow failed"
        when: "{{steps.validate-request.status}} != Succeeded or {{steps.ensure-vcluster.status}} != Succeeded or {{steps.create-appcontainer-claim.status}} != Succeeded or {{steps.wait-for-repositories.status}} != Succeeded"

  # =============================================================================
  # CORE IMPLEMENTATION TEMPLATES
  # =============================================================================
  - name: validate-appcontainer-core
    inputs:
      parameters:
      - name: appcontainer-name
      - name: namespace
      - name: description
      - name: github-org
      - name: user
    script:
      image: alpine:3.18
      command: [sh]
      source: |
        echo "Validating AppContainer request..."
        echo "Name: {{inputs.parameters.appcontainer-name}}"
        echo "Namespace: {{inputs.parameters.namespace}}"
        echo "Description: {{inputs.parameters.description}}"
        echo "GitHub Org: {{inputs.parameters.github-org}}"
        echo "User: {{inputs.parameters.user}}"
        
        # Basic validation
        if [ -z "{{inputs.parameters.appcontainer-name}}" ]; then
          echo "AppContainer name is required"
          exit 1
        fi
        
        # Validate name format (lowercase, alphanumeric, hyphens)
        if ! echo "{{inputs.parameters.appcontainer-name}}" | grep -E '^[a-z0-9][a-z0-9-]*[a-z0-9]$'; then
          echo "Invalid AppContainer name format (must be DNS-1123 compliant)"
          exit 1
        fi
        
        # Validate GitHub organization
        if [ -z "{{inputs.parameters.github-org}}" ]; then
          echo "GitHub organization is required"
          exit 1
        fi
        
        echo "‚úÖ Validation successful"

  - name: ensure-vcluster-core
    inputs:
      parameters:
      - name: appcontainer-name
      - name: vcluster-name
      - name: namespace
      - name: security
      - name: user
      - name: slack-channel
      - name: slack-user-id
      - name: auto-create-vcluster
    steps:
    - - name: map-vcluster-parameters
        templateRef:
          name: appcontainer-mapping-layer
          template: appcontainer-to-vcluster-mapper
        arguments:
          parameters:
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
          - name: vcluster-name
            value: "{{inputs.parameters.vcluster-name}}"
          - name: namespace
            value: "{{inputs.parameters.namespace}}"
          - name: security
            value: "{{inputs.parameters.security}}"
          - name: user
            value: "{{inputs.parameters.user}}"
          - name: slack-channel
            value: "{{inputs.parameters.slack-channel}}"
          - name: slack-user-id
            value: "{{inputs.parameters.slack-user-id}}"
          - name: auto-create-vcluster
            value: "{{inputs.parameters.auto-create-vcluster}}"
    - - name: create-vcluster-if-needed
        templateRef:
          name: vcluster-creation
          template: create-vcluster
        arguments:
          parameters:
          - name: vcluster-name
            value: "{{steps.map-vcluster-parameters.outputs.parameters.vcluster-name}}"
          - name: namespace
            value: "{{steps.map-vcluster-parameters.outputs.parameters.namespace}}"
          - name: size
            value: "{{steps.map-vcluster-parameters.outputs.parameters.size}}"
          - name: capabilities
            value: "{{steps.map-vcluster-parameters.outputs.parameters.capabilities}}"
          - name: user
            value: "{{steps.map-vcluster-parameters.outputs.parameters.user}}"
          - name: slack-channel
            value: "{{steps.map-vcluster-parameters.outputs.parameters.slack-channel}}"
          - name: slack-user-id
            value: "{{steps.map-vcluster-parameters.outputs.parameters.slack-user-id}}"
        when: "{{inputs.parameters.auto-create-vcluster}} == true"
    - - name: check-existing-vcluster
        template: check-existing-vcluster-core
        arguments:
          parameters:
          - name: vcluster-name
            value: "{{steps.map-vcluster-parameters.outputs.parameters.vcluster-name}}"
          - name: namespace
            value: "{{steps.map-vcluster-parameters.outputs.parameters.namespace}}"
          - name: appcontainer-name
            value: "{{inputs.parameters.appcontainer-name}}"
        when: "{{inputs.parameters.auto-create-vcluster}} == false"

  - name: check-existing-vcluster-core
    inputs:
      parameters:
      - name: vcluster-name
      - name: namespace
      - name: appcontainer-name
    script:
      image: bitnami/kubectl:1.28
      command: [sh]
      source: |
        echo "Checking existing vCluster for AppContainer deployment..."
        
        TARGET_VCLUSTER="{{inputs.parameters.vcluster-name}}"
        if [ -z "$TARGET_VCLUSTER" ]; then
          TARGET_VCLUSTER="{{inputs.parameters.appcontainer-name}}-vcluster"
        fi
        
        echo "üîç Checking vCluster: $TARGET_VCLUSTER"
        
        # Check if vCluster exists
        if ! kubectl get vclusterenvironmentclaim $TARGET_VCLUSTER -n {{inputs.parameters.namespace}} >/dev/null 2>&1; then
          echo "‚ùå VCluster $TARGET_VCLUSTER does not exist"
          echo "üí° Enable auto-create-vcluster or create the vCluster first"
          exit 1
        fi
        
        echo "‚úÖ VCluster $TARGET_VCLUSTER exists and is ready for AppContainer"

  - name: create-appcontainer-claim-core
    inputs:
      parameters:
      - name: appcontainer-name
      - name: namespace
      - name: description
      - name: github-org
      - name: docker-registry
      - name: observability
      - name: security
      - name: user
      - name: slack-channel
    script:
      image: bitnami/kubectl:1.28
      command: [sh]
      source: |
        echo "Creating AppContainer claim..."
        
        # Parse boolean parameters
        OBSERVABILITY=$([ "{{inputs.parameters.observability}}" = "true" ] && echo "true" || echo "false")
        SECURITY=$([ "{{inputs.parameters.security}}" = "true" ] && echo "true" || echo "false")
        
        # Sanitize slack channel for label
        SLACK_CHANNEL_LABEL=$(echo "{{inputs.parameters.slack-channel}}" | sed 's/#//g' | tr '[:upper:]' '[:lower:]')
        
        # Create AppContainer claim manifest
        cat <<EOF | kubectl apply -f -
        apiVersion: platform.example.org/v1alpha1
        kind: AppContainerClaim
        metadata:
          name: {{inputs.parameters.appcontainer-name}}
          namespace: {{inputs.parameters.namespace}}
          labels:
            created-by: parameter-mapping-layer
            requested-by: "{{inputs.parameters.user}}"
            slack-channel: "$SLACK_CHANNEL_LABEL"
        spec:
          name: {{inputs.parameters.appcontainer-name}}
          description: "{{inputs.parameters.description}}"
          gitHubOrg: "{{inputs.parameters.github-org}}"
          dockerRegistry: "{{inputs.parameters.docker-registry}}"
          enableObservability: $OBSERVABILITY
          enableSecurity: $SECURITY
        EOF
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ AppContainer claim created successfully"
          echo "Crossplane will create repositories and CI/CD infrastructure..."
          exit 0
        else
          echo "‚ùå Failed to create AppContainer claim"
          exit 1
        fi

  - name: wait-for-repositories-core
    inputs:
      parameters:
      - name: appcontainer-name
      - name: namespace
    script:
      image: bitnami/kubectl:1.28
      command: [sh]
      source: |
        echo "Waiting for AppContainer repositories to be created by Crossplane..."
        
        # Wait for the AppContainer claim to have repository URLs in status
        TIMEOUT=300
        ELAPSED=0
        
        while [ $ELAPSED -lt $TIMEOUT ]; do
          echo "Checking AppContainer claim status... (${ELAPSED}s/${TIMEOUT}s)"
          
          SOURCE_URL=$(kubectl get appcontainerclaim {{inputs.parameters.appcontainer-name}} -n {{inputs.parameters.namespace}} -o jsonpath='{.status.sourceRepository.url}' 2>/dev/null || echo "")
          GITOPS_URL=$(kubectl get appcontainerclaim {{inputs.parameters.appcontainer-name}} -n {{inputs.parameters.namespace}} -o jsonpath='{.status.gitopsRepository.url}' 2>/dev/null || echo "")
          
          if [ ! -z "$SOURCE_URL" ] && [ ! -z "$GITOPS_URL" ]; then
            echo "‚úÖ Repositories created successfully!"
            echo "Source: $SOURCE_URL"
            echo "GitOps: $GITOPS_URL"
            exit 0
          fi
          
          sleep 10
          ELAPSED=$((ELAPSED + 10))
        done
        
        echo "‚ùå Timeout waiting for repositories to be created"
        exit 1