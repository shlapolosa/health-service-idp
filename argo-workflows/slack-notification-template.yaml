apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: slack-notifications
  namespace: argo
spec:
  templates:
  # =============================================================================
  # Generic Slack Notification Templates
  # =============================================================================
  
  - name: send-slack-notification
    inputs:
      parameters:
      - name: message
        description: "The message text to send"
      - name: emoji
        description: "Emoji for the message"
        default: "‚ÑπÔ∏è"
      - name: color
        description: "Message color (good, warning, danger)"
        default: "good"
      - name: workflow-name
        description: "Name of the workflow"
        default: "{{workflow.name}}"
      - name: step-name
        description: "Current step name"
        default: "{{inputs.parameters.message}}"
    script:
      image: curlimages/curl:8.5.0
      command: [sh]
      env:
      - name: SLACK_WEBHOOK_URL
        valueFrom:
          secretKeyRef:
            name: slack-webhook
            key: webhook-url
      - name: ARGO_WORKFLOWS_BASE_URL
        valueFrom:
          configMapKeyRef:
            name: slack-notification-config
            key: argo-workflows-base-url
      source: |
        echo "üì± Sending Slack notification..."
        
        # Get webhook URL from secret
        WEBHOOK_URL="$SLACK_WEBHOOK_URL"
        if [ -z "$WEBHOOK_URL" ]; then
          echo "‚ùå Slack webhook URL not configured"
          exit 1
        fi
        
        # Send simple notification
        curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"text\": \"{{inputs.parameters.emoji}} {{inputs.parameters.message}}\"
        }" \
        "$WEBHOOK_URL"
        
        echo "‚úÖ Slack notification sent successfully"

  - name: send-slack-progress
    inputs:
      parameters:
      - name: workflow-type
        description: "Type of workflow (vcluster, appcontainer)"
      - name: resource-name
        description: "Name of the resource being created"
      - name: user
        description: "User who requested the operation"
      - name: status
        description: "Current status"
      - name: step-name
        description: "Current step description"
      - name: namespace
        description: "Target namespace"
        default: "default"
    script:
      image: curlimages/curl:8.5.0
      command: [sh]
      env:
      - name: SLACK_WEBHOOK_URL
        valueFrom:
          secretKeyRef:
            name: slack-webhook
            key: webhook-url
      - name: ARGO_WORKFLOWS_BASE_URL
        valueFrom:
          configMapKeyRef:
            name: slack-notification-config
            key: argo-workflows-base-url
      source: |
        echo "üì± Sending progress notification to Slack..."
        
        WEBHOOK_URL="$SLACK_WEBHOOK_URL"
        if [ -z "$WEBHOOK_URL" ]; then
          echo "‚ùå Slack webhook URL not configured"
          exit 1
        fi
        
        # Determine emoji based on workflow type
        case "{{inputs.parameters.workflow-type}}" in
          "vcluster") WORKFLOW_EMOJI="üîß" ;;
          "appcontainer") WORKFLOW_EMOJI="üì¶" ;;
          *) WORKFLOW_EMOJI="‚öôÔ∏è" ;;
        esac
        
        # Send progress notification
        curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"text\": \"$WORKFLOW_EMOJI {{inputs.parameters.workflow-type}} Progress\",
          \"blocks\": [
            {
              \"type\": \"section\",
              \"text\": {
                \"type\": \"mrkdwn\",
                \"text\": \"$WORKFLOW_EMOJI *{{inputs.parameters.workflow-type}} Progress*\\n\\n*Resource:* \`{{inputs.parameters.resource-name}}\`\\n*Namespace:* \`{{inputs.parameters.namespace}}\`\\n*User:* @{{inputs.parameters.user}}\\n\\n*Status:* {{inputs.parameters.step-name}}\"
              }
            }
          ]
        }" \
        "$WEBHOOK_URL"

  - name: send-slack-success
    inputs:
      parameters:
      - name: workflow-type
        description: "Type of workflow (vcluster, appcontainer)"
      - name: resource-name
        description: "Name of the created resource"
      - name: user
        description: "User who requested the operation"
      - name: namespace
        description: "Target namespace"
        default: "default"
      - name: details
        description: "Additional details (JSON or text)"
        default: "{}"
      - name: capabilities
        description: "Enabled capabilities"
        default: ""
      - name: endpoints
        description: "Access endpoints"
        default: ""
    script:
      image: curlimages/curl:8.5.0
      command: [sh]
      env:
      - name: SLACK_WEBHOOK_URL
        valueFrom:
          secretKeyRef:
            name: slack-webhook
            key: webhook-url
      - name: ARGO_WORKFLOWS_BASE_URL
        valueFrom:
          configMapKeyRef:
            name: slack-notification-config
            key: argo-workflows-base-url
      source: |
        echo "üì± Sending success notification to Slack..."
        
        WEBHOOK_URL="$SLACK_WEBHOOK_URL"
        if [ -z "$WEBHOOK_URL" ]; then
          echo "‚ùå Slack webhook URL not configured"
          exit 1
        fi
        
        # Determine emoji and title based on workflow type
        case "{{inputs.parameters.workflow-type}}" in
          "vcluster") 
            WORKFLOW_EMOJI="üéâ"
            TITLE="VCluster Creation Complete"
            ;;
          "appcontainer") 
            WORKFLOW_EMOJI="üöÄ"
            TITLE="AppContainer Deployment Complete"
            ;;
          *) 
            WORKFLOW_EMOJI="‚úÖ"
            TITLE="Workflow Complete"
            ;;
        esac
        
        # Build capabilities text
        CAPABILITIES_TEXT=""
        if [ -n "{{inputs.parameters.capabilities}}" ]; then
          CAPABILITIES_TEXT="*üöÄ Features:*\\n{{inputs.parameters.capabilities}}"
        fi
        
        # Build endpoints text
        ENDPOINTS_TEXT=""
        if [ -n "{{inputs.parameters.endpoints}}" ]; then
          ENDPOINTS_TEXT="*üîó Access:*\\n{{inputs.parameters.endpoints}}"
        fi
        
        # Send success notification
        curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"text\": \"$WORKFLOW_EMOJI {{inputs.parameters.workflow-type}} Created Successfully!\",
          \"blocks\": [
            {
              \"type\": \"header\",
              \"text\": {
                \"type\": \"plain_text\",
                \"text\": \"$WORKFLOW_EMOJI $TITLE\"
              }
            },
            {
              \"type\": \"section\",
              \"fields\": [
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Name:*\\n\`{{inputs.parameters.resource-name}}\`\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Namespace:*\\n\`{{inputs.parameters.namespace}}\`\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Requested by:*\\n@{{inputs.parameters.user}}\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Status:*\\n‚úÖ Ready\"
                }
              ]
            }$(if [ -n "$CAPABILITIES_TEXT" ]; then echo ",
            {
              \"type\": \"section\",
              \"text\": {
                \"type\": \"mrkdwn\",
                \"text\": \"$CAPABILITIES_TEXT\"
              }
            }"; fi)$(if [ -n "$ENDPOINTS_TEXT" ]; then echo ",
            {
              \"type\": \"section\",
              \"text\": {
                \"type\": \"mrkdwn\",
                \"text\": \"$ENDPOINTS_TEXT\"
              }
            }"; fi),
            {
              \"type\": \"actions\",
              \"elements\": [
                {
                  \"type\": \"button\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"üìã View Workflow\"
                  },
                  \"url\": \"$ARGO_WORKFLOWS_BASE_URL/workflows/argo/{{workflow.name}}\"
                }
              ]
            }
          ]
        }" \
        "$WEBHOOK_URL"

  - name: send-slack-failure
    inputs:
      parameters:
      - name: workflow-type
        description: "Type of workflow (vcluster, appcontainer)"
      - name: resource-name
        description: "Name of the resource that failed"
      - name: user
        description: "User who requested the operation"
      - name: namespace
        description: "Target namespace"
        default: "default"
      - name: error-message
        description: "Error description"
        default: "Check workflow logs for details"
      - name: failed-step
        description: "Step that failed"
        default: "Unknown"
    script:
      image: curlimages/curl:8.5.0
      command: [sh]
      env:
      - name: SLACK_WEBHOOK_URL
        valueFrom:
          secretKeyRef:
            name: slack-webhook
            key: webhook-url
      - name: ARGO_WORKFLOWS_BASE_URL
        valueFrom:
          configMapKeyRef:
            name: slack-notification-config
            key: argo-workflows-base-url
      source: |
        echo "üì± Sending failure notification to Slack..."
        
        WEBHOOK_URL="$SLACK_WEBHOOK_URL"
        if [ -z "$WEBHOOK_URL" ]; then
          echo "‚ùå Slack webhook URL not configured"
          exit 1
        fi
        
        # Send failure notification
        curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"text\": \"‚ùå {{inputs.parameters.workflow-type}} Creation Failed\",
          \"blocks\": [
            {
              \"type\": \"header\",
              \"text\": {
                \"type\": \"plain_text\",
                \"text\": \"‚ùå {{inputs.parameters.workflow-type}} Creation Failed\"
              }
            },
            {
              \"type\": \"section\",
              \"fields\": [
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Name:*\\n\`{{inputs.parameters.resource-name}}\`\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Namespace:*\\n\`{{inputs.parameters.namespace}}\`\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Requested by:*\\n@{{inputs.parameters.user}}\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Failed Step:*\\n{{inputs.parameters.failed-step}}\"
                }
              ]
            },
            {
              \"type\": \"section\",
              \"text\": {
                \"type\": \"mrkdwn\",
                \"text\": \"*‚ùå Error:*\\n{{inputs.parameters.error-message}}\"
              }
            },
            {
              \"type\": \"actions\",
              \"elements\": [
                {
                  \"type\": \"button\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"üîç View Logs\"
                  },
                  \"url\": \"$ARGO_WORKFLOWS_BASE_URL/workflows/argo/{{workflow.name}}\"
                }
              ]
            }
          ]
        }" \
        "$WEBHOOK_URL"

  # =============================================================================
  # VCluster-Specific Notification Templates
  # =============================================================================
  
  - name: notify-vcluster-starting
    inputs:
      parameters:
      - name: vcluster-name
      - name: namespace
      - name: user
      - name: capabilities
        default: "{}"
    templateRef:
      name: slack-notifications
      template: send-slack-progress
    arguments:
      parameters:
      - name: workflow-type
        value: "vcluster"
      - name: resource-name
        value: "{{inputs.parameters.vcluster-name}}"
      - name: user
        value: "{{inputs.parameters.user}}"
      - name: status
        value: "starting"
      - name: step-name
        value: "Validating parameters and setting up infrastructure..."
      - name: namespace
        value: "{{inputs.parameters.namespace}}"

  - name: notify-vcluster-provisioning
    inputs:
      parameters:
      - name: vcluster-name
      - name: namespace
      - name: user
    templateRef:
      name: slack-notifications
      template: send-slack-progress
    arguments:
      parameters:
      - name: workflow-type
        value: "vcluster"
      - name: resource-name
        value: "{{inputs.parameters.vcluster-name}}"
      - name: user
        value: "{{inputs.parameters.user}}"
      - name: status
        value: "provisioning"
      - name: step-name
        value: "Creating VCluster resources - this may take several minutes..."
      - name: namespace
        value: "{{inputs.parameters.namespace}}"

  - name: notify-vcluster-success
    inputs:
      parameters:
      - name: vcluster-name
      - name: namespace
      - name: user
      - name: capabilities
        default: ""
      - name: endpoints
        default: ""
    templateRef:
      name: slack-notifications
      template: send-slack-success
    arguments:
      parameters:
      - name: workflow-type
        value: "vcluster"
      - name: resource-name
        value: "{{inputs.parameters.vcluster-name}}"
      - name: user
        value: "{{inputs.parameters.user}}"
      - name: namespace
        value: "{{inputs.parameters.namespace}}"
      - name: capabilities
        value: "{{inputs.parameters.capabilities}}"
      - name: endpoints
        value: "{{inputs.parameters.endpoints}}"

  - name: notify-vcluster-failure
    inputs:
      parameters:
      - name: vcluster-name
      - name: namespace
      - name: user
      - name: error-message
        default: "VCluster creation failed - check workflow logs"
      - name: failed-step
        default: "Unknown step"
    templateRef:
      name: slack-notifications
      template: send-slack-failure
    arguments:
      parameters:
      - name: workflow-type
        value: "vcluster"
      - name: resource-name
        value: "{{inputs.parameters.vcluster-name}}"
      - name: user
        value: "{{inputs.parameters.user}}"
      - name: namespace
        value: "{{inputs.parameters.namespace}}"
      - name: error-message
        value: "{{inputs.parameters.error-message}}"
      - name: failed-step
        value: "{{inputs.parameters.failed-step}}"

  # =============================================================================
  # AppContainer-Specific Notification Templates
  # =============================================================================
  
  - name: notify-appcontainer-starting
    inputs:
      parameters:
      - name: appcontainer-name
      - name: namespace
      - name: user
      - name: vcluster-name
        default: ""
    templateRef:
      name: slack-notifications
      template: send-slack-progress
    arguments:
      parameters:
      - name: workflow-type
        value: "appcontainer"
      - name: resource-name
        value: "{{inputs.parameters.appcontainer-name}}"
      - name: user
        value: "{{inputs.parameters.user}}"
      - name: status
        value: "starting"
      - name: step-name
        value: "Setting up AppContainer and ensuring VCluster availability..."
      - name: namespace
        value: "{{inputs.parameters.namespace}}"

  - name: notify-appcontainer-vcluster-setup
    inputs:
      parameters:
      - name: appcontainer-name
      - name: namespace
      - name: user
      - name: vcluster-name
    templateRef:
      name: slack-notifications
      template: send-slack-progress
    arguments:
      parameters:
      - name: workflow-type
        value: "appcontainer"
      - name: resource-name
        value: "{{inputs.parameters.appcontainer-name}}"
      - name: user
        value: "{{inputs.parameters.user}}"
      - name: status
        value: "vcluster-setup"
      - name: step-name
        value: "Creating VCluster {{inputs.parameters.vcluster-name}} with required capabilities..."
      - name: namespace
        value: "{{inputs.parameters.namespace}}"

  - name: notify-appcontainer-repositories
    inputs:
      parameters:
      - name: appcontainer-name
      - name: namespace
      - name: user
    templateRef:
      name: slack-notifications
      template: send-slack-progress
    arguments:
      parameters:
      - name: workflow-type
        value: "appcontainer"
      - name: resource-name
        value: "{{inputs.parameters.appcontainer-name}}"
      - name: user
        value: "{{inputs.parameters.user}}"
      - name: status
        value: "repositories"
      - name: step-name
        value: "Creating source and GitOps repositories..."
      - name: namespace
        value: "{{inputs.parameters.namespace}}"

  - name: notify-appcontainer-success
    inputs:
      parameters:
      - name: appcontainer-name
      - name: namespace
      - name: user
      - name: github-org
        default: "shlapolosa"
      - name: vcluster-name
        default: ""
      - name: endpoints
        default: ""
    templateRef:
      name: slack-notifications
      template: send-slack-success
    arguments:
      parameters:
      - name: workflow-type
        value: "appcontainer"
      - name: resource-name
        value: "{{inputs.parameters.appcontainer-name}}"
      - name: user
        value: "{{inputs.parameters.user}}"
      - name: namespace
        value: "{{inputs.parameters.namespace}}"
      - name: capabilities
        value: "üì¶ Microservices Platform\\nüîÑ GitOps (ArgoCD)\\nüåê Service Mesh (Istio)\\n‚ö° Auto-scaling (Knative)\\nüìä Observability Stack"
      - name: endpoints
        value: "üìö Source: https://github.com/{{inputs.parameters.github-org}}/{{inputs.parameters.appcontainer-name}}\\nüîÑ GitOps: https://github.com/{{inputs.parameters.github-org}}/{{inputs.parameters.appcontainer-name}}-gitops{{if inputs.parameters.endpoints}}\\n{{inputs.parameters.endpoints}}{{end}}"

  - name: notify-appcontainer-failure
    inputs:
      parameters:
      - name: appcontainer-name
      - name: namespace
      - name: user
      - name: error-message
        default: "AppContainer creation failed - check workflow logs"
      - name: failed-step
        default: "Unknown step"
    templateRef:
      name: slack-notifications
      template: send-slack-failure
    arguments:
      parameters:
      - name: workflow-type
        value: "appcontainer"
      - name: resource-name
        value: "{{inputs.parameters.appcontainer-name}}"
      - name: user
        value: "{{inputs.parameters.user}}"
      - name: namespace
        value: "{{inputs.parameters.namespace}}"
      - name: error-message
        value: "{{inputs.parameters.error-message}}"
      - name: failed-step
        value: "{{inputs.parameters.failed-step}}"
  # =============================================================================
  # Microservice-Specific Notification Templates
  # =============================================================================
  
  - name: notify-microservice-starting
    inputs:
      parameters:
      - name: microservice-name
      - name: namespace
      - name: user
      - name: language
        default: "python"
      - name: database
        default: "none"
      - name: cache
        default: "none"
      - name: target-vcluster
        default: ""
    script:
      image: curlimages/curl:8.5.0
      command: [sh]
      env:
      - name: SLACK_WEBHOOK_URL
        valueFrom:
          secretKeyRef:
            name: slack-webhook
            key: webhook-url
      - name: ARGO_WORKFLOWS_BASE_URL
        valueFrom:
          configMapKeyRef:
            name: slack-notification-config
            key: argo-workflows-base-url
      source: |
        echo "üì± Sending microservice starting notification to Slack..."
        
        WEBHOOK_URL="$SLACK_WEBHOOK_URL"
        if [ -z "$WEBHOOK_URL" ]; then
          echo "‚ùå Slack webhook URL not configured"
          exit 1
        fi
        
        # Determine repository name (remove -service suffix)
        REPO_NAME="{{inputs.parameters.microservice-name}}"
        if echo "$REPO_NAME" | grep -q -- "-service$"; then
          REPO_NAME=$(echo "$REPO_NAME" | sed 's/-service$//')
        fi
        
        # Determine vCluster name
        VCLUSTER_NAME="{{inputs.parameters.target-vcluster}}"
        if [ -z "$VCLUSTER_NAME" ] || [ "$VCLUSTER_NAME" = "" ]; then
          VCLUSTER_NAME="${REPO_NAME}-vcluster"
        fi
        
        # Send starting notification
        curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"text\": \"üöÄ Microservice Creation Started\",
          \"blocks\": [
            {
              \"type\": \"header\",
              \"text\": {
                \"type\": \"plain_text\",
                \"text\": \"üöÄ Microservice Creation Started\"
              }
            },
            {
              \"type\": \"section\",
              \"fields\": [
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Name:*\\n\`{{inputs.parameters.microservice-name}}\`\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Namespace:*\\n\`{{inputs.parameters.namespace}}\`\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Language:*\\n{{inputs.parameters.language}}\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Database:*\\n{{inputs.parameters.database}}\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Cache:*\\n{{inputs.parameters.cache}}\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Requested by:*\\n@{{inputs.parameters.user}}\"
                }
              ]
            },
            {
              \"type\": \"section\",
              \"text\": {
                \"type\": \"mrkdwn\",
                \"text\": \"‚è≥ *Status:* Setting up complete OAM development environment...\\n\\n*Will create:*\\n‚Ä¢ üìö Repository: \`$REPO_NAME\`\\n‚Ä¢ üîÑ GitOps Repository: \`$REPO_NAME-gitops\`\\n‚Ä¢ üîß VCluster: \`$VCLUSTER_NAME\`\\n‚Ä¢ üìÅ CLAUDE.md-compliant structure\"
              }
            },
            {
              \"type\": \"actions\",
              \"elements\": [
                {
                  \"type\": \"button\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"üîç View Progress\"
                  },
                  \"url\": \"$ARGO_WORKFLOWS_BASE_URL/workflows/argo/{{workflow.name}}\"
                }
              ]
            }
          ]
        }" \
        "$WEBHOOK_URL"
        
        echo "‚úÖ Microservice starting notification sent successfully"

  - name: notify-microservice-success
    inputs:
      parameters:
      - name: microservice-name
      - name: namespace
      - name: user
      - name: language
        default: "python"
      - name: database
        default: "none"
      - name: cache
        default: "none"
      - name: github-org
        default: "shlapolosa"
      - name: target-vcluster
        default: ""
      - name: repository-name
        default: ""
      - name: endpoints
        default: ""
    script:
      image: curlimages/curl:8.5.0
      command: [sh]
      env:
      - name: SLACK_WEBHOOK_URL
        valueFrom:
          secretKeyRef:
            name: slack-webhook
            key: webhook-url
      - name: ARGO_WORKFLOWS_BASE_URL
        valueFrom:
          configMapKeyRef:
            name: slack-notification-config
            key: argo-workflows-base-url
      source: |
        echo "üì± Sending microservice success notification to Slack..."
        
        WEBHOOK_URL="$SLACK_WEBHOOK_URL"
        if [ -z "$WEBHOOK_URL" ]; then
          echo "‚ùå Slack webhook URL not configured"
          exit 1
        fi
        
        # Determine repository name
        REPO_NAME="{{inputs.parameters.repository-name}}"
        if [ -z "$REPO_NAME" ] || [ "$REPO_NAME" = "" ]; then
          REPO_NAME="{{inputs.parameters.microservice-name}}"
          if echo "$REPO_NAME" | grep -q -- "-service$"; then
            REPO_NAME=$(echo "$REPO_NAME" | sed 's/-service$//')
          fi
        fi
        
        # Determine vCluster name
        VCLUSTER_NAME="{{inputs.parameters.target-vcluster}}"
        if [ -z "$VCLUSTER_NAME" ] || [ "$VCLUSTER_NAME" = "" ]; then
          VCLUSTER_NAME="${REPO_NAME}-vcluster"
        fi
        
        # Send success notification
        curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"text\": \"‚úÖ Microservice Created Successfully\",
          \"blocks\": [
            {
              \"type\": \"header\",
              \"text\": {
                \"type\": \"plain_text\",
                \"text\": \"‚úÖ Microservice Created Successfully\"
              }
            },
            {
              \"type\": \"section\",
              \"fields\": [
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Name:*\\n\`{{inputs.parameters.microservice-name}}\`\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Repository:*\\n\`$REPO_NAME\`\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Language:*\\n{{inputs.parameters.language}}\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*VCluster:*\\n\`$VCLUSTER_NAME\`\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Database:*\\n{{inputs.parameters.database}}\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Cache:*\\n{{inputs.parameters.cache}}\"
                }
              ]
            },
            {
              \"type\": \"section\",
              \"text\": {
                \"type\": \"mrkdwn\",
                \"text\": \"üéØ *Access Points:*\\n{{inputs.parameters.endpoints}}\"
              }
            },
            {
              \"type\": \"section\",
              \"text\": {
                \"type\": \"mrkdwn\",
                \"text\": \"üìã *Next Steps:*\\n‚Ä¢ Access ArgoCD for GitOps management\\n‚Ä¢ Check repository structure following CLAUDE.md\\n‚Ä¢ Configure custom domains and TLS\\n‚Ä¢ Start developing your microservice\"
              }
            },
            {
              \"type\": \"actions\",
              \"elements\": [
                {
                  \"type\": \"button\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"üìö Source Repo\"
                  },
                  \"url\": \"https://github.com/{{inputs.parameters.github-org}}/$REPO_NAME\"
                },
                {
                  \"type\": \"button\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"üîÑ GitOps Repo\"
                  },
                  \"url\": \"https://github.com/{{inputs.parameters.github-org}}/$REPO_NAME-gitops\"
                }
              ]
            }
          ]
        }" \
        "$WEBHOOK_URL"
        
        echo "‚úÖ Microservice success notification sent successfully"

  - name: notify-microservice-failure
    inputs:
      parameters:
      - name: microservice-name
      - name: namespace
      - name: user
      - name: error-message
        default: "Microservice creation failed - check workflow logs"
      - name: failed-step
        default: "Unknown step"
    script:
      image: curlimages/curl:8.5.0
      command: [sh]
      env:
      - name: SLACK_WEBHOOK_URL
        valueFrom:
          secretKeyRef:
            name: slack-webhook
            key: webhook-url
      - name: ARGO_WORKFLOWS_BASE_URL
        valueFrom:
          configMapKeyRef:
            name: slack-notification-config
            key: argo-workflows-base-url
      source: |
        echo "üì± Sending microservice failure notification to Slack..."
        
        WEBHOOK_URL="$SLACK_WEBHOOK_URL"
        if [ -z "$WEBHOOK_URL" ]; then
          echo "‚ùå Slack webhook URL not configured"
          exit 1
        fi
        
        # Send failure notification
        curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"text\": \"‚ùå Microservice Creation Failed\",
          \"blocks\": [
            {
              \"type\": \"header\",
              \"text\": {
                \"type\": \"plain_text\",
                \"text\": \"‚ùå Microservice Creation Failed\"
              }
            },
            {
              \"type\": \"section\",
              \"fields\": [
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Name:*\\n\`{{inputs.parameters.microservice-name}}\`\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Namespace:*\\n\`{{inputs.parameters.namespace}}\`\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Requested by:*\\n@{{inputs.parameters.user}}\"
                },
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Failed Step:*\\n{{inputs.parameters.failed-step}}\"
                }
              ]
            },
            {
              \"type\": \"section\",
              \"text\": {
                \"type\": \"mrkdwn\",
                \"text\": \"*‚ùå Error:*\\n{{inputs.parameters.error-message}}\"
              }
            },
            {
              \"type\": \"section\",
              \"text\": {
                \"type\": \"mrkdwn\",
                \"text\": \"üí° *Troubleshooting:*\\n‚Ä¢ Check workflow logs for detailed error messages\\n‚Ä¢ Verify GitHub organization permissions\\n‚Ä¢ Ensure namespace exists and has proper RBAC\\n‚Ä¢ Check if target vCluster is available\"
              }
            },
            {
              \"type\": \"actions\",
              \"elements\": [
                {
                  \"type\": \"button\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"üîç View Logs\"
                  },
                  \"url\": \"$ARGO_WORKFLOWS_BASE_URL/workflows/argo/{{workflow.name}}\"
                },
                {
                  \"type\": \"button\",
                  \"text\": {
                    \"type\": \"plain_text\",
                    \"text\": \"üìö Documentation\"
                  },
                  \"url\": \"https://github.com/{{inputs.parameters.github-org}}/health-service-idp/blob/main/CLAUDE.md\"
                }
              ]
            }
          ]
        }" \
        "$WEBHOOK_URL"
        
        echo "‚úÖ Microservice failure notification sent successfully"