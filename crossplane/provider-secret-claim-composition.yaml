---
# ProviderSecretClaim Composition
# Creates Kubernetes secrets for external provider services
# Pattern 3A: Provider Systems
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: provider-secret-claim-composition
  labels:
    provider: kubernetes
    pattern: infrastructural
    type: provider-system
spec:
  compositeTypeRef:
    apiVersion: platform.io/v1alpha1
    kind: XProviderSecretClaim
  
  resources:
  # Main provider secret
  - name: provider-secret
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        providerConfigRef:
          name: kubernetes-provider
        forProvider:
          manifest:
            apiVersion: v1
            kind: Secret
            metadata:
              labels:
                provider-type: ""
                managed-by: crossplane
                pattern: infrastructural
            type: Opaque
            data: {}
    patches:
    # Set secret name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.secretName
      toFieldPath: spec.forProvider.manifest.metadata.name
    
    # Set namespace
    - type: FromCompositeFieldPath
      fromFieldPath: spec.namespace
      toFieldPath: spec.forProvider.manifest.metadata.namespace
    
    # Set provider type label
    - type: FromCompositeFieldPath
      fromFieldPath: spec.providerType
      toFieldPath: spec.forProvider.manifest.metadata.labels[provider-type]
    
    # Transform credentials to base64
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.credentials
        strategy: string
        string:
          fmt: "%s"
      toFieldPath: spec.forProvider.manifest.data
      transforms:
      - type: map
        map:
          neon-postgres: |
            # Provider-specific credential mapping for Neon
            connection_string: ""
            database_url: ""
            host: ""
            port: ""
            database: ""
            username: ""
            password: ""
          auth0-idp: |
            # Provider-specific credential mapping for Auth0
            domain: ""
            client_id: ""
            client_secret: ""
            audience: ""
            api_identifier: ""
    
    # Status update
    - type: ToCompositeFieldPath
      fromFieldPath: spec.forProvider.manifest.metadata.name
      toFieldPath: status.secretRef.name
    
    - type: ToCompositeFieldPath
      fromFieldPath: spec.forProvider.manifest.metadata.namespace
      toFieldPath: status.secretRef.namespace

  # Service binding (if enabled)
  - name: service-binding
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        providerConfigRef:
          name: kubernetes-provider
        forProvider:
          manifest:
            apiVersion: v1
            kind: ConfigMap
            metadata:
              labels:
                servicebinding.io/provisioned-service: "true"
                provider-type: ""
            data:
              type: provider-service
              provider: ""
              binding: |
                {
                  "secretRef": "",
                  "autoInject": true
                }
    patches:
    # Only create if service binding is enabled
    - type: FromCompositeFieldPath
      fromFieldPath: spec.serviceBinding
      toFieldPath: spec.forProvider.manifest.metadata.annotations[create]
      transforms:
      - type: convert
        convert:
          toType: string
    
    # Set ConfigMap name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.secretName
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-binding"
    
    # Set namespace
    - type: FromCompositeFieldPath
      fromFieldPath: spec.namespace
      toFieldPath: spec.forProvider.manifest.metadata.namespace
    
    # Set provider type
    - type: FromCompositeFieldPath
      fromFieldPath: spec.providerType
      toFieldPath: spec.forProvider.manifest.metadata.labels[provider-type]
    
    - type: FromCompositeFieldPath
      fromFieldPath: spec.providerType
      toFieldPath: spec.forProvider.manifest.data.provider
    
    # Set secret reference in binding
    - type: FromCompositeFieldPath
      fromFieldPath: spec.secretName
      toFieldPath: spec.forProvider.manifest.data.binding
      transforms:
      - type: string
        string:
          fmt: |
            {
              "secretRef": "%s",
              "autoInject": true
            }

  # External Secret (if enabled)
  - name: external-secret
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        providerConfigRef:
          name: kubernetes-provider
        forProvider:
          manifest:
            apiVersion: external-secrets.io/v1beta1
            kind: ExternalSecret
            metadata:
              labels:
                provider-type: ""
            spec:
              secretStoreRef:
                name: vault-backend
                kind: SecretStore
              target:
                name: ""
              data: []
    patches:
    # Only create if external secrets enabled
    - type: FromCompositeFieldPath
      fromFieldPath: spec.externalSecretsEnabled
      toFieldPath: spec.forProvider.manifest.metadata.annotations[create]
      transforms:
      - type: convert
        convert:
          toType: string
    
    # Set ExternalSecret name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.secretName
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-external"
    
    # Set namespace
    - type: FromCompositeFieldPath
      fromFieldPath: spec.namespace
      toFieldPath: spec.forProvider.manifest.metadata.namespace
    
    # Set target secret name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.secretName
      toFieldPath: spec.forProvider.manifest.spec.target.name
    
    # Set provider type
    - type: FromCompositeFieldPath
      fromFieldPath: spec.providerType
      toFieldPath: spec.forProvider.manifest.metadata.labels[provider-type]