# ClickHouse Analytics Database ComponentDefinition
# Optimized for healthcare analytics and time-series data
# Supports OLAP queries for demand forecasting and reporting

apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: clickhouse
  annotations:
    definition.oam.dev/description: "ClickHouse analytical database for time-series data and OLAP queries"
spec:
  workload:
    definition:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "helm.crossplane.io/v1beta1"
          kind: "Release"
          metadata: {
            name: parameter.name + "-clickhouse"
            namespace: context.namespace
            labels: {
              "app.kubernetes.io/name": parameter.name + "-clickhouse"
              "app.kubernetes.io/component": "analytics-database"
              "app.kubernetes.io/managed-by": "kubevela"
            }
          }
          spec: {
            forProvider: {
              chart: {
                name: "clickhouse"
                repository: "https://charts.bitnami.com/bitnami"
                version: "4.1.15"
              }
              namespace: context.namespace
              skipCreateNamespace: false
              values: {
                architecture: parameter.architecture
                auth: {
                  username: parameter.auth.username
                  password: parameter.auth.password
                  database: parameter.auth.database
                }
                persistence: {
                  enabled: true
                  size: parameter.storage
                  storageClass: parameter.storageClass
                }
                resources: {
                  requests: {
                    cpu: parameter.resources.cpu
                    memory: parameter.resources.memory
                  }
                  limits: {
                    cpu: parameter.resources.cpu
                    memory: parameter.resources.memory
                  }
                }
                if parameter.architecture == "replication" {
                  replicaCount: parameter.replicas
                  shards: parameter.shards
                }
                service: {
                  type: "ClusterIP"
                  ports: {
                    http: 8123
                    tcp: 9000
                    mysql: 9004
                    postgresql: 9005
                  }
                }
                configuration: {
                  // Healthcare-specific optimizations
                  maxMemoryUsage: "8000000000"  // 8GB for analytics queries
                  maxBytesBeforeExternalGroupBy: "2000000000"  // 2GB
                  maxBytesBeforeExternalSort: "2000000000"     // 2GB
                  httpPort: 8123
                  tcpPort: 9000
                  // Timezone for South African operations
                  timezone: "Africa/Johannesburg"
                  // Custom settings for healthcare compliance
                  queryLogRetentionTime: "7776000"  // 90 days for audit compliance
                  partLogRetentionTime: "7776000"   // 90 days
                  // Performance optimizations for stock analytics
                  backgroundPoolSize: 16
                  backgroundSchedulePoolSize: 16
                  maxConcurrentQueries: 100
                  maxConnections: 1000
                }
                metrics: {
                  enabled: true
                  serviceMonitor: {
                    enabled: true
                  }
                }
                // Healthcare data encryption
                tls: {
                  enabled: parameter.security.tlsEnabled
                  if parameter.security.tlsEnabled {
                    certificatesSecret: parameter.security.certificateSecret
                  }
                }
                // Backup configuration for compliance
                backup: {
                  enabled: parameter.backup.enabled
                  if parameter.backup.enabled {
                    schedule: parameter.backup.schedule
                    retention: parameter.backup.retentionDays
                  }
                }
                // Network policies for healthcare security
                networkPolicy: {
                  enabled: parameter.security.networkPolicyEnabled
                  if parameter.security.networkPolicyEnabled {
                    allowExternal: false
                    ingressRules: {
                      accessOnlyFrom: {
                        enabled: true
                        namespaceSelector: {
                          "healthcare.org/access": "analytics"
                        }
                      }
                    }
                  }
                }
              }
            }
            providerConfigRef: {
              name: "default"
            }
          }
        }
        
        // Secondary outputs for healthcare-specific configurations
        outputs: {
          // Database initialization ConfigMap
          "database-init": {
            apiVersion: "v1"
            kind: "ConfigMap"
            metadata: {
              name: parameter.name + "-clickhouse-init"
              namespace: context.namespace
              labels: {
                "app.kubernetes.io/name": parameter.name + "-clickhouse"
                "app.kubernetes.io/component": "database-init"
              }
            }
            data: {
              "001-create-databases.sql": """
                -- Healthcare analytics database structure
                CREATE DATABASE IF NOT EXISTS """ + parameter.auth.database + """;
                
                -- Stock movements fact table (partitioned by date for performance)
                CREATE TABLE IF NOT EXISTS """ + parameter.auth.database + """.stock_movements (
                  id UUID,
                  item_id UUID,
                  location_id UUID,
                  movement_type Enum8('receipt'=1, 'issue'=2, 'transfer'=3, 'adjustment'=4, 'expiry'=5),
                  quantity Int32,
                  batch_number String,
                  expiry_date Date,
                  created_at DateTime DEFAULT now(),
                  created_by UUID
                ) ENGINE = MergeTree()
                PARTITION BY toYYYYMM(created_at)
                ORDER BY (item_id, location_id, created_at)
                TTL created_at + INTERVAL 7 YEAR;  -- 7-year retention for healthcare compliance
                
                -- Stock levels materialized view for real-time queries
                CREATE MATERIALIZED VIEW IF NOT EXISTS """ + parameter.auth.database + """.stock_levels_mv
                ENGINE = AggregatingMergeTree()
                PARTITION BY toYYYYMM(last_updated)
                ORDER BY (item_id, location_id)
                AS SELECT
                  item_id,
                  location_id,
                  sumState(
                    CASE 
                      WHEN movement_type IN ('receipt', 'adjustment') AND quantity > 0 THEN quantity
                      WHEN movement_type IN ('issue', 'transfer', 'expiry') OR quantity < 0 THEN -abs(quantity)
                      ELSE 0
                    END
                  ) as current_stock,
                  maxState(created_at) as last_updated
                FROM """ + parameter.auth.database + """.stock_movements
                GROUP BY item_id, location_id;
                
                -- Demand forecasting aggregation tables
                CREATE TABLE IF NOT EXISTS """ + parameter.auth.database + """.demand_history (
                  item_id UUID,
                  location_id UUID,
                  period_start Date,
                  period_end Date,
                  total_consumption Int32,
                  avg_daily_consumption Float32,
                  forecasted_demand Float32,
                  confidence_interval Float32,
                  created_at DateTime DEFAULT now()
                ) ENGINE = MergeTree()
                PARTITION BY toYYYYMM(period_start)
                ORDER BY (item_id, location_id, period_start)
                TTL period_start + INTERVAL 5 YEAR;
                
                -- Expiry tracking for waste management
                CREATE TABLE IF NOT EXISTS """ + parameter.auth.database + """.expiry_alerts (
                  item_id UUID,
                  location_id UUID,
                  batch_number String,
                  expiry_date Date,
                  current_quantity Int32,
                  days_to_expiry Int32,
                  alert_level Enum8('green'=1, 'yellow'=2, 'red'=3),
                  created_at DateTime DEFAULT now()
                ) ENGINE = ReplacingMergeTree(created_at)
                PARTITION BY toYYYYMM(expiry_date)
                ORDER BY (item_id, location_id, batch_number, expiry_date);
                
                -- Users and permissions for healthcare RBAC
                CREATE USER IF NOT EXISTS 'analytics_readonly' IDENTIFIED BY 'readonly_analytics_password';
                GRANT SELECT ON """ + parameter.auth.database + """.* TO 'analytics_readonly';
                
                CREATE USER IF NOT EXISTS 'forecasting_service' IDENTIFIED BY 'forecasting_service_password';
                GRANT SELECT, INSERT ON """ + parameter.auth.database + """.demand_history TO 'forecasting_service';
                GRANT SELECT ON """ + parameter.auth.database + """.stock_movements TO 'forecasting_service';
                
                CREATE USER IF NOT EXISTS 'reporting_service' IDENTIFIED BY 'reporting_service_password';
                GRANT SELECT ON """ + parameter.auth.database + """.* TO 'reporting_service';
                """
              
              "002-healthcare-functions.sql": """
                -- Healthcare-specific analytical functions
                
                -- Stock turnover calculation
                CREATE OR REPLACE FUNCTION stockTurnoverRate(item_id UUID, location_id UUID, days Int32)
                RETURNS Float32 AS $$
                  SELECT 
                    CASE 
                      WHEN avg_stock > 0 THEN total_consumption / avg_stock
                      ELSE 0
                    END
                  FROM (
                    SELECT 
                      sum(CASE WHEN movement_type = 'issue' THEN quantity ELSE 0 END) as total_consumption,
                      avg(sumMerge(current_stock)) as avg_stock
                    FROM """ + parameter.auth.database + """.stock_movements sm
                    LEFT JOIN """ + parameter.auth.database + """.stock_levels_mv sl 
                      ON sm.item_id = sl.item_id AND sm.location_id = sl.location_id
                    WHERE sm.item_id = $1 
                      AND sm.location_id = $2 
                      AND sm.created_at >= now() - INTERVAL $3 DAY
                  );
                $$;
                
                -- Stockout risk calculation based on consumption patterns
                CREATE OR REPLACE FUNCTION stockoutRisk(item_id UUID, location_id UUID)
                RETURNS Float32 AS $$
                  WITH consumption_stats AS (
                    SELECT 
                      avg(daily_consumption) as avg_consumption,
                      stddevPop(daily_consumption) as std_consumption
                    FROM (
                      SELECT 
                        toDate(created_at) as date,
                        sum(CASE WHEN movement_type = 'issue' THEN quantity ELSE 0 END) as daily_consumption
                      FROM """ + parameter.auth.database + """.stock_movements
                      WHERE item_id = $1 
                        AND location_id = $2 
                        AND created_at >= now() - INTERVAL 90 DAY
                      GROUP BY toDate(created_at)
                    )
                  ),
                  current_stock AS (
                    SELECT sumMerge(current_stock) as stock_level
                    FROM """ + parameter.auth.database + """.stock_levels_mv
                    WHERE item_id = $1 AND location_id = $2
                  )
                  SELECT 
                    CASE 
                      WHEN cs.stock_level <= 0 THEN 1.0
                      WHEN cons.avg_consumption <= 0 THEN 0.0
                      ELSE greatest(0.0, least(1.0, 
                        1.0 - (cs.stock_level / (cons.avg_consumption + cons.std_consumption))
                      ))
                    END
                  FROM consumption_stats cons
                  CROSS JOIN current_stock cs;
                $$;
                """
            }
          }
          
          // Healthcare compliance monitoring
          "compliance-monitor": {
            apiVersion: "v1"
            kind: "ConfigMap"
            metadata: {
              name: parameter.name + "-clickhouse-compliance"
              namespace: context.namespace
              labels: {
                "app.kubernetes.io/name": parameter.name + "-clickhouse"
                "app.kubernetes.io/component": "compliance-monitoring"
              }
            }
            data: {
              "audit-queries.sql": """
                -- POPIA/HIPAA compliance audit queries
                
                -- Data access audit trail
                CREATE VIEW IF NOT EXISTS audit_data_access AS
                SELECT 
                  user,
                  query_kind,
                  query_start_time,
                  query_duration_ms,
                  read_rows,
                  read_bytes,
                  databases,
                  tables,
                  columns,
                  exception
                FROM system.query_log 
                WHERE event_date >= today() - 90
                  AND type = 'QueryFinish'
                ORDER BY query_start_time DESC;
                
                -- Data retention compliance check
                CREATE VIEW IF NOT EXISTS data_retention_status AS
                SELECT 
                  database,
                  table,
                  min_date,
                  max_date,
                  datediff('day', min_date, today()) as retention_days,
                  CASE 
                    WHEN datediff('day', min_date, today()) > 2555 THEN 'VIOLATION' -- 7 years
                    WHEN datediff('day', min_date, today()) > 2190 THEN 'WARNING'   -- 6 years
                    ELSE 'COMPLIANT'
                  END as compliance_status
                FROM (
                  SELECT 
                    database,
                    table,
                    min(created_at) as min_date,
                    max(created_at) as max_date
                  FROM """ + parameter.auth.database + """.stock_movements
                  GROUP BY database, table
                );
                """
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Database configuration
          auth: *{
            username: "clickhouse"
            password: "secure-clickhouse-password"
            database: "healthcare_analytics"
          } | {
            username: string
            password: string
            database: string
          }
          
          // Infrastructure configuration
          architecture: *"standalone" | "replication"
          replicas: *1 | int
          shards: *1 | int
          storage: *"20Gi" | string
          storageClass: *"gp2" | string
          
          // Resource allocation
          resources: *{
            cpu: "2000m"
            memory: "4Gi"
          } | {
            cpu: string
            memory: string
          }
          
          // Security configuration
          security: *{
            tlsEnabled: true
            networkPolicyEnabled: true
            certificateSecret: "clickhouse-tls-cert"
          } | {
            tlsEnabled: bool
            networkPolicyEnabled?: bool
            certificateSecret?: string
          }
          
          // Backup configuration for healthcare compliance
          backup: *{
            enabled: true
            schedule: "0 2 * * *"  // Daily at 2 AM
            retentionDays: 2555    // 7 years for healthcare compliance
          } | {
            enabled: bool
            schedule?: string
            retentionDays?: int
          }
        }