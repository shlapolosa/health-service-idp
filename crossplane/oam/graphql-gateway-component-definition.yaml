---
# GraphQL Gateway ComponentDefinition
# Architecturally follows the same pattern as realtime-platform: OAM Component → Knative Service + Infrastructure Claims
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: graphql-gateway
  annotations:
    definition.oam.dev/description: "Auto-generating GraphQL API gateway that discovers and federates Knative services"
spec:
  workload:
    definition:
      apiVersion: serving.knative.dev/v1
      kind: Service
    type: services.serving.knative.dev
  schematic:
    cue:
      template: |
        // Primary Output: GraphQL Gateway Knative Service (OAM-compliant workload)
        output: {
          apiVersion: "serving.knative.dev/v1"
          kind: "Service"
          metadata: {
            name: context.name
            namespace: context.namespace
            labels: {
              "app.kubernetes.io/name": context.name
              "app.kubernetes.io/component": "graphql-gateway"
              "app.kubernetes.io/managed-by": "kubevela"
              "app.kubernetes.io/part-of": "graphql-platform"
              "app": context.name
            }
            annotations: {
              // Multi-cluster deployment support
              if parameter.targetEnvironment != _|_ {
                "app.oam.dev/cluster": parameter.targetEnvironment
              }
              "graphql-gateway.oam.dev/bootstrap": "true"
              "graphql-gateway.oam.dev/auto-schema": "\(parameter.autoSchema)"
              if parameter.repository != _|_ {
                "graphql-gateway.oam.dev/repository": parameter.repository
                "graphql-gateway.oam.dev/trigger-repo-creation": "true"
              }
            }
          }
          spec: {
            template: {
              metadata: {
                annotations: {
                  "autoscaling.knative.dev/minScale": "1"
                  "autoscaling.knative.dev/maxScale": "10"
                  "run.googleapis.com/execution-environment": "gen2"
                }
                labels: {
                  "app.kubernetes.io/name": context.name
                  "app.kubernetes.io/version": parameter.version
                  "app.kubernetes.io/part-of": "graphql-platform"
                  "app": context.name
                }
              }
              spec: {
                serviceAccountName: "graphql-gateway-sa"
                volumes: [
                  {
                    name: "gateway-config"
                    configMap: {
                      name: context.name + "-config"
                    }
                  }
                ]
                containers: [{
                  image: parameter.gatewayImage
                  ports: [{
                    containerPort: 8080
                    name: "http1"
                  }]
                  resources: {
                    limits: {
                      cpu: parameter.resources.cpu
                      memory: parameter.resources.memory
                    }
                    requests: {
                      cpu: "100m"
                      memory: "128Mi"
                    }
                  }
                  volumeMounts: [
                    {
                      name: "gateway-config"
                      mountPath: "/app/config"
                    }
                  ]
                  env: [
                    {
                      name: "GATEWAY_NAME"
                      value: context.name
                    },
                    {
                      name: "NAMESPACE"
                      value: context.namespace
                    },
                    {
                      name: "SERVICE_SELECTOR_LABELS"
                      value: "app.kubernetes.io/managed-by=kubevela"
                    },
                    {
                      name: "AUTO_DISCOVERY"
                      value: "\(parameter.autoSchema)"
                    },
                    {
                      name: "DISCOVERY_INTERVAL"
                      value: parameter.schemaRefreshInterval
                    },
                    {
                      name: "GATEWAY_PORT"
                      value: "8080"
                    },
                    {
                      name: "HOST"
                      value: "0.0.0.0"
                    },
                    {
                      name: "LOG_LEVEL"
                      value: "info"
                    }
                  ] + [
                    for k, v in parameter.environment {
                      name: k
                      value: v
                    }
                  ]
                  if parameter.envFrom != _|_ {
                    envFrom: parameter.envFrom
                  }
                  // Health checks for robust deployment
                  livenessProbe: {
                    httpGet: {
                      path: "/healthz"
                      port: 8080
                    }
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  }
                  readinessProbe: {
                    httpGet: {
                      path: "/healthz"
                      port: 8080
                    }
                    initialDelaySeconds: 5
                    periodSeconds: 5
                  }
                }]
              }
            }
          }
        }
        
        // Secondary Output: GraphQL Platform Infrastructure (always created)
        outputs: {
          "graphql-infrastructure": {
            apiVersion: "platform.example.org/v1alpha1"
            kind: "GraphQLPlatformClaim"
            metadata: {
              name: context.name + "-infrastructure"
              namespace: context.namespace
              labels: {
                "app.kubernetes.io/name": context.name
                "app.kubernetes.io/component": "graphql-infrastructure"
                "app.kubernetes.io/part-of": "graphql-platform"
              }
            }
            spec: {
              name: context.name
              serviceSelector: parameter.serviceSelector
              autoSchema: parameter.autoSchema
              schemaRefreshInterval: parameter.schemaRefreshInterval
              exposeIntrospection: parameter.exposeIntrospection
              exposePlayground: parameter.exposePlayground
              enableCors: parameter.enableCors
              if parameter.customResolvers != _|_ {
                customResolvers: parameter.customResolvers
              }
              resources: {
                cpu: parameter.resources.cpu
                memory: parameter.resources.memory
              }
              if parameter.targetEnvironment != _|_ {
                targetEnvironment: parameter.targetEnvironment
              }
            }
          }
        }
        
        // Optional: Repository Creation Workflow (when language specified - follows webservice pattern)
        if parameter.language != _|_ {
          outputs: {
            // Always include infrastructure
            "graphql-infrastructure": outputs["graphql-infrastructure"]
            
            // Add workflow trigger when language specified
            "workflow-trigger": {
              apiVersion: "batch/v1"
              kind: "Job"
              metadata: {
                name: context.name + "-workflow-trigger"
                namespace: context.namespace
                labels: {
                  "app.kubernetes.io/name": context.name
                  "app.kubernetes.io/component": "workflow-trigger"
                  "app.kubernetes.io/managed-by": "kubevela"
                  "app.kubernetes.io/part-of": "graphql-platform"
                }
                annotations: {
                  "graphql-gateway.oam.dev/trigger-type": "argo-workflow"
                  "graphql-gateway.oam.dev/workflow-template": "graphql-gateway-template"
                  "graphql-gateway.oam.dev/source": "oam-driven"
                  "graphql-gateway.oam.dev/platform-type": "graphql"
                }
              }
              spec: {
                template: {
                  spec: {
                    serviceAccountName: "argo-workflows-client"
                    restartPolicy: "Never"
                    volumes: []
                    containers: [{
                      name: "workflow-trigger"
                      image: "curlimages/curl:latest"
                      command: ["/bin/sh", "-c"]
                      volumeMounts: []
                      args: [
                        "echo '🚀 Triggering Argo Workflow for GraphQL gateway: " + context.name + "'\n" +
                        "cat > /tmp/workflow.json << 'WORKFLOW_EOF'\n" +
                        "{\n" +
                        "  \"namespace\": \"argo\",\n" +
                        "  \"serverDryRun\": false,\n" +
                        "  \"workflow\": {\n" +
                        "    \"metadata\": {\n" +
                        "      \"generateName\": \"graphql-gateway-creation-\",\n" +
                        "      \"namespace\": \"argo\",\n" +
                        "      \"labels\": {\n" +
                        "        \"created-by\": \"oam-componentdefinition\",\n" +
                        "        \"gateway-name\": \"" + context.name + "\",\n" +
                        "        \"source\": \"oam-driven\",\n" +
                        "        \"platform-type\": \"graphql\"\n" +
                        "      }\n" +
                        "    },\n" +
                        "    \"spec\": {\n" +
                        "      \"workflowTemplateRef\": {\n" +
                        "        \"name\": \"graphql-gateway-template\"\n" +
                        "      },\n" +
                        "      \"arguments\": {\n" +
                        "        \"parameters\": [\n" +
                        "          {\"name\": \"repository-name\", \"value\": \"" + parameter.repository + "\"},\n" +
                        "          {\"name\": \"app-container\", \"value\": \"" + parameter.repository + "\"},\n" +
                        "          {\"name\": \"namespace\", \"value\": \"" + context.namespace + "\"},\n" +
                        "          {\"name\": \"gateway-name\", \"value\": \"" + context.name + "\"},\n" +
                        "          {\"name\": \"docker-registry\", \"value\": \"docker.io\"},\n" +
                        "          {\"name\": \"docker-username\", \"value\": \"socrates12345\"},\n" +
                        "          {\"name\": \"gitops-repo\", \"value\": \"health-service-idp-gitops\"}\n" +
                        "        ]\n" +
                        "      }\n" +
                        "    }\n" +
                        "  }\n" +
                        "}\n" +
                        "WORKFLOW_EOF\n" +
                        "echo '📋 Workflow JSON created, submitting to Argo...'\n" +
                        "cat /tmp/workflow.json\n" +
                        "RESPONSE=$(curl -s -w 'HTTPSTATUS:%{http_code}' -X POST -H 'Content-Type: application/json' -H 'Accept: application/json' -d @/tmp/workflow.json http://argo-server.argo.svc.cluster.local:2746/api/v1/workflows/argo)\n" +
                        "HTTP_STATUS=$(echo $RESPONSE | tr -d '\\n' | sed -e 's/.*HTTPSTATUS://')\n" +
                        "BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')\n" +
                        "echo '📊 HTTP Status:' $HTTP_STATUS\n" +
                        "echo '📄 Response:' $BODY\n" +
                        "if [ \"$HTTP_STATUS\" -eq 200 ] || [ \"$HTTP_STATUS\" -eq 201 ]; then\n" +
                        "  echo '✅ Workflow submission successful!'\n" +
                        "  echo \"$BODY\" | grep -o '\"name\":\"[^\"]*\"' | head -1\n" +
                        "else\n" +
                        "  echo '❌ Workflow submission failed with status:' $HTTP_STATUS\n" +
                        "  echo 'Response:' $BODY\n" +
                        "  exit 1\n" +
                        "fi"
                      ]
                    }]
                  }
                }
              }
            }
          }
        }
        
        parameter: {
          // Required
          gatewayImage: *"docker.io/socrates12345/graphql-mesh-gateway:openapi-fix" | string
          
          // Service Discovery
          serviceSelector: *{
            "app.kubernetes.io/managed-by": "kubevela"
          } | {[string]: string}
          
          // Schema Management
          autoSchema: *true | bool
          schemaRefreshInterval: *"5m" | string
          exposeIntrospection: *false | bool
          
          // GraphQL Gateway Configuration
          exposePlayground: *true | bool
          enableCors: *true | bool
          
          // Resource Management
          resources: *{
            cpu: "500m"
            memory: "512Mi"
          } | {
            cpu?: string
            memory?: string
          }
          
          // Service Configuration
          version: *"latest" | string
          
          // Environment Variables
          environment: *{} | {[string]: string}
          
          // Environment Variables from Secrets
          envFrom?: [...{
            secretRef: {
              name: string
            }
          }]
          
          // Optional Infrastructure Bootstrap (for repository creation)
          language?: string     // Triggers bootstrap: nodejs, typescript
          framework?: string    // graphql-gateway
          repository?: string   // Git repository template name (defaults to name)
          
          // Advanced Options
          customResolvers?: [...{
            name: string
            endpoint: string
            headers?: {[string]: string}
          }]
          
          // Multi-cluster support
          targetEnvironment?: string  // vCluster deployment target
        }