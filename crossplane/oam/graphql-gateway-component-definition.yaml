---
# GraphQL Gateway ComponentDefinition
# Architecturally follows the same pattern as realtime-platform: OAM Component → Knative Service + Infrastructure Claims
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: graphql-gateway
  annotations:
    definition.oam.dev/description: "Auto-generating GraphQL API gateway with Hasura that discovers and federates Knative services"
spec:
  workload:
    definition:
      apiVersion: serving.knative.dev/v1
      kind: Service
    type: services.serving.knative.dev
  schematic:
    cue:
      template: |
        // Primary Output: Hasura Knative Service (OAM-compliant workload)
        output: {
          apiVersion: "serving.knative.dev/v1"
          kind: "Service"
          metadata: {
            name: context.name + "-hasura"
            namespace: context.namespace
            labels: {
              "app.kubernetes.io/name": context.name
              "app.kubernetes.io/component": "graphql-gateway"
              "app.kubernetes.io/managed-by": "kubevela"
              "app.kubernetes.io/part-of": "graphql-platform"
              "app": context.name + "-hasura"
            }
            annotations: {
              // Multi-cluster deployment support
              if parameter.targetEnvironment != _|_ {
                "app.oam.dev/cluster": parameter.targetEnvironment
              }
              "graphql-gateway.oam.dev/bootstrap": "true"
              "graphql-gateway.oam.dev/auto-schema": "\(parameter.autoSchema)"
              "graphql-gateway.oam.dev/service-selector": "\(parameter.serviceSelector)"
            }
          }
          spec: {
            template: {
              metadata: {
                annotations: {
                  "autoscaling.knative.dev/minScale": "1"
                  "autoscaling.knative.dev/maxScale": "10"
                  "run.googleapis.com/execution-environment": "gen2"
                }
                labels: {
                  "app.kubernetes.io/name": context.name
                  "app.kubernetes.io/version": parameter.version
                  "app.kubernetes.io/part-of": "graphql-platform"
                  "app": context.name + "-hasura"
                }
              }
              spec: {
                serviceAccountName: "knative-docker-sa"
                volumes: [
                  {
                    name: "graphql-schema"
                    configMap: {
                      name: context.name + "-graphql-schema-merged"
                    }
                  },
                  {
                    name: "hasura-metadata"
                    configMap: {
                      name: context.name + "-hasura-metadata"
                    }
                  }
                ]
                containers: [{
                  image: parameter.hasuraImage
                  ports: [{
                    containerPort: 8080
                    name: "http1"
                  }]
                  resources: {
                    limits: {
                      cpu: parameter.resources.cpu
                      memory: parameter.resources.memory
                    }
                    requests: {
                      cpu: "250m"
                      memory: "256Mi"
                    }
                  }
                  volumeMounts: [
                    {
                      name: "graphql-schema"
                      mountPath: "/hasura-metadata/schema"
                    },
                    {
                      name: "hasura-metadata"
                      mountPath: "/hasura-metadata/config"
                    }
                  ]
                  env: [
                    {
                      name: "HASURA_GRAPHQL_DATABASE_URL"
                      value: "postgres://postgres:postgres@postgres:5432/postgres"
                    },
                    {
                      name: "HASURA_GRAPHQL_METADATA_DATABASE_URL"
                      value: "postgres://postgres:postgres@postgres:5432/postgres"
                    },
                    {
                      name: "HASURA_GRAPHQL_ENABLE_CONSOLE"
                      value: "\(parameter.enableConsole)"
                    },
                    {
                      name: "HASURA_GRAPHQL_DEV_MODE"
                      value: "false"
                    },
                    {
                      name: "HASURA_GRAPHQL_ENABLED_LOG_TYPES"
                      value: "startup, http-log, webhook-log, websocket-log, query-log"
                    },
                    {
                      name: "HASURA_GRAPHQL_ENABLE_TELEMETRY"
                      value: "false"
                    },
                    {
                      name: "HASURA_GRAPHQL_ADMIN_SECRET"
                      valueFrom: {
                        secretKeyRef: {
                          name: context.name + "-hasura-admin-secret"
                          key: "admin-secret"
                        }
                      }
                    },
                    {
                      name: "HASURA_GRAPHQL_ENABLE_ALLOWLIST"
                      value: "\(parameter.enableAllowList)"
                    },
                    {
                      name: "HASURA_GRAPHQL_ENABLE_SCHEMA_INTROSPECTION"
                      value: "\(parameter.exposeIntrospection)"
                    },
                    {
                      name: "HASURA_GRAPHQL_SERVER_PORT"
                      value: "8080"
                    },
                    {
                      name: "HASURA_GRAPHQL_UNAUTHORIZED_ROLE"
                      value: "anonymous"
                    },
                    {
                      name: "GRAPHQL_GATEWAY_NAME"
                      value: context.name
                    },
                    {
                      name: "LOG_LEVEL"
                      value: "INFO"
                    }
                  ] + [
                    for k, v in parameter.environment {
                      name: k
                      value: v
                    }
                  ]
                  if parameter.envFrom != _|_ {
                    envFrom: parameter.envFrom
                  }
                  // Health checks for robust deployment
                  livenessProbe: {
                    httpGet: {
                      path: "/healthz"
                      port: 8080
                    }
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  }
                  readinessProbe: {
                    httpGet: {
                      path: "/healthz"
                      port: 8080
                    }
                    initialDelaySeconds: 5
                    periodSeconds: 5
                  }
                }]
              }
            }
          }
        }
        
        // Secondary Output: GraphQL Platform Infrastructure (always created)
        outputs: {
          "graphql-infrastructure": {
            apiVersion: "platform.example.org/v1alpha1"
            kind: "GraphQLPlatformClaim"
            metadata: {
              name: context.name + "-infrastructure"
              namespace: context.namespace
              labels: {
                "app.kubernetes.io/name": context.name
                "app.kubernetes.io/component": "graphql-infrastructure"
                "app.kubernetes.io/part-of": "graphql-platform"
              }
            }
            spec: {
              name: context.name
              serviceSelector: parameter.serviceSelector
              autoSchema: parameter.autoSchema
              schemaRefreshInterval: parameter.schemaRefreshInterval
              exposeIntrospection: parameter.exposeIntrospection
              adminSecret: parameter.adminSecret
              enableConsole: parameter.enableConsole
              enableAllowList: parameter.enableAllowList
              if parameter.customResolvers != _|_ {
                customResolvers: parameter.customResolvers
              }
              resources: {
                cpu: parameter.resources.cpu
                memory: parameter.resources.memory
              }
              if parameter.targetEnvironment != _|_ {
                targetEnvironment: parameter.targetEnvironment
              }
            }
          }
        }
        
        // Optional: Repository Creation Workflow (when language specified - follows webservice pattern)
        if parameter.language != _|_ {
          outputs: {
            // Always include infrastructure
            "graphql-infrastructure": outputs["graphql-infrastructure"]
            
            // Add workflow trigger when language specified
            "workflow-trigger": {
              apiVersion: "batch/v1"
              kind: "Job"
              metadata: {
                name: context.name + "-workflow-trigger"
                namespace: context.namespace
                labels: {
                  "app.kubernetes.io/name": context.name
                  "app.kubernetes.io/component": "workflow-trigger"
                  "app.kubernetes.io/managed-by": "kubevela"
                  "app.kubernetes.io/part-of": "graphql-platform"
                }
                annotations: {
                  "graphql-gateway.oam.dev/trigger-type": "argo-workflow"
                  "graphql-gateway.oam.dev/workflow-template": "microservice-standard-contract"
                  "graphql-gateway.oam.dev/source": "oam-driven"
                  "graphql-gateway.oam.dev/platform-type": "graphql"
                }
              }
              spec: {
                template: {
                  spec: {
                    serviceAccountName: "argo-workflows-client"
                    restartPolicy: "Never"
                    volumes: []
                    containers: [{
                      name: "workflow-trigger"
                      image: "curlimages/curl:latest"
                      command: ["/bin/sh", "-c"]
                      volumeMounts: []
                      args: [
                        "echo '🚀 Triggering Argo Workflow for GraphQL gateway: " + context.name + "'\n" +
                        "cat > /tmp/workflow.json << 'WORKFLOW_EOF'\n" +
                        "{\n" +
                        "  \"namespace\": \"argo\",\n" +
                        "  \"serverDryRun\": false,\n" +
                        "  \"workflow\": {\n" +
                        "    \"metadata\": {\n" +
                        "      \"generateName\": \"graphql-gateway-creation-\",\n" +
                        "      \"namespace\": \"argo\",\n" +
                        "      \"labels\": {\n" +
                        "        \"created-by\": \"oam-componentdefinition\",\n" +
                        "        \"gateway-name\": \"" + context.name + "\",\n" +
                        "        \"source\": \"oam-driven\",\n" +
                        "        \"platform-type\": \"graphql\"\n" +
                        "      }\n" +
                        "    },\n" +
                        "    \"spec\": {\n" +
                        "      \"workflowTemplateRef\": {\n" +
                        "        \"name\": \"microservice-standard-contract\"\n" +
                        "      },\n" +
                        "      \"arguments\": {\n" +
                        "        \"parameters\": [\n" +
                        "          {\"name\": \"resource-name\", \"value\": \"" + context.name + "\"},\n" +
                        "          {\"name\": \"resource-type\", \"value\": \"graphql-gateway\"},\n" +
                        "          {\"name\": \"namespace\", \"value\": \"" + context.namespace + "\"},\n" +
                        "          {\"name\": \"user\", \"value\": \"oam-system\"},\n" +
                        "          {\"name\": \"description\", \"value\": \"OAM-driven GraphQL gateway via ComponentDefinition\"},\n" +
                        "          {\"name\": \"github-org\", \"value\": \"shlapolosa\"},\n" +
                        "          {\"name\": \"docker-registry\", \"value\": \"docker.io/socrates12345\"},\n" +
                        "          {\"name\": \"slack-channel\", \"value\": \"#oam-notifications\"},\n" +
                        "          {\"name\": \"slack-user-id\", \"value\": \"OAM\"},\n" +
                        "          {\"name\": \"security-enabled\", \"value\": \"true\"},\n" +
                        "          {\"name\": \"observability-enabled\", \"value\": \"true\"},\n" +
                        "          {\"name\": \"backup-enabled\", \"value\": \"false\"},\n" +
                        "          {\"name\": \"environment-tier\", \"value\": \"development\"},\n" +
                        "          {\"name\": \"auto-create-dependencies\", \"value\": \"true\"},\n" +
                        "          {\"name\": \"resource-size\", \"value\": \"medium\"},\n" +
                        "          {\"name\": \"microservice-language\", \"value\": \"" + parameter.language + "\"},\n" +
                        "          {\"name\": \"microservice-framework\", \"value\": \"" + (*"nodejs" | parameter.framework) + "\"},\n" +
                        "          {\"name\": \"microservice-database\", \"value\": \"none\"},\n" +
                        "          {\"name\": \"microservice-cache\", \"value\": \"none\"},\n" +
                        "          {\"name\": \"microservice-expose-api\", \"value\": \"true\"},\n" +
                        "          {\"name\": \"target-vcluster\", \"value\": \"\"},\n" +
                        "          {\"name\": \"parent-appcontainer\", \"value\": \"" + parameter.repository + "\"},\n" +
                        "          {\"name\": \"repository-name\", \"value\": \"" + parameter.repository + "\"}\n" +
                        "        ]\n" +
                        "      }\n" +
                        "    }\n" +
                        "  }\n" +
                        "}\n" +
                        "WORKFLOW_EOF\n" +
                        "echo '📋 Workflow JSON created, submitting to Argo...'\n" +
                        "cat /tmp/workflow.json\n" +
                        "RESPONSE=$(curl -s -w 'HTTPSTATUS:%{http_code}' -X POST -H 'Content-Type: application/json' -H 'Accept: application/json' -d @/tmp/workflow.json http://argo-server.argo.svc.cluster.local:2746/api/v1/workflows/argo)\n" +
                        "HTTP_STATUS=$(echo $RESPONSE | tr -d '\\n' | sed -e 's/.*HTTPSTATUS://')\n" +
                        "BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')\n" +
                        "echo '📊 HTTP Status:' $HTTP_STATUS\n" +
                        "echo '📄 Response:' $BODY\n" +
                        "if [ \"$HTTP_STATUS\" -eq 200 ] || [ \"$HTTP_STATUS\" -eq 201 ]; then\n" +
                        "  echo '✅ Workflow submission successful!'\n" +
                        "  echo \"$BODY\" | grep -o '\"name\":\"[^\"]*\"' | head -1\n" +
                        "else\n" +
                        "  echo '❌ Workflow submission failed with status:' $HTTP_STATUS\n" +
                        "  echo 'Response:' $BODY\n" +
                        "  exit 1\n" +
                        "fi"
                      ]
                    }]
                  }
                }
              }
            }
          }
        }
        
        parameter: {
          // Required
          hasuraImage: *"hasura/graphql-engine:v2.36.0" | string
          
          // Service Discovery
          serviceSelector: *{
            "app.kubernetes.io/managed-by": "kubevela"
          } | {[string]: string}
          
          // Schema Management
          autoSchema: *true | bool
          schemaRefreshInterval: *"5m" | string
          exposeIntrospection: *false | bool
          
          // Hasura Configuration
          adminSecret: *"" | string  // Generated if empty
          enableConsole: *true | bool
          enableAllowList: *false | bool
          
          // Resource Management
          resources: *{
            cpu: "500m"
            memory: "512Mi"
          } | {
            cpu?: string
            memory?: string
          }
          
          // Service Configuration
          version: *"latest" | string
          
          // Environment Variables
          environment: *{} | {[string]: string}
          
          // Environment Variables from Secrets
          envFrom?: [...{
            secretRef: {
              name: string
            }
          }]
          
          // Optional Infrastructure Bootstrap (for repository creation)
          language?: string     // Triggers bootstrap: nodejs, typescript
          framework?: string    // graphql-gateway
          repository?: string   // Git repository template name (defaults to name)
          
          // Advanced Options
          customResolvers?: [...{
            name: string
            endpoint: string
            headers?: {[string]: string}
          }]
          
          // Multi-cluster support
          targetEnvironment?: string  // vCluster deployment target
        }