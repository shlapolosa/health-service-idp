# Consolidated OAM ComponentDefinitions
# Following Architecture Principles:
# 1. Single component declaration creates everything needed
# 2. ComponentDefinition-only (no Claims for basic components)
# 3. Embedded workflows for complex orchestration
# 4. KubeVela orchestrates, Crossplane executes
#
# Component Types:
# - webservice: Standard microservices with optional infrastructure
# - graphql-gateway: Auto-discovering GraphQL API aggregation with Hasura
# - realtime-platform: Complete streaming infrastructure with Kafka/MQTT
# - rasa-chatbot: Dual-container chatbot with Rasa + Actions
# - identity-service: Domain-specific Spring Boot identity services via Argo Workflows
# - kafka/redis/mongodb: Direct infrastructure components via Helm
# - application-infrastructure: Complex application setup via Claims
# - vcluster: Virtual Kubernetes environments
# - neon-postgres/auth0-idp: External service integrations
# - clickhouse: Analytics database for time-series data

---
# Enhanced WebService ComponentDefinition with Parameter Transformation
# Works with webservice WorkloadDefinition for Knative Service rendering
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: webservice
  annotations:
    definition.oam.dev/description: "Enhanced webservice with automatic infrastructure bootstrap via embedded workflows"
    definition.oam.dev/requires-source-code: "true"
spec:
  workload:
    definition:
      apiVersion: serving.knative.dev/v1
      kind: Service
    type: services.serving.knative.dev
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "serving.knative.dev/v1"
          kind: "Service"
          metadata: {
            name: context.name
            namespace: context.namespace
            labels: {
              "app.kubernetes.io/name": context.name
              "app.kubernetes.io/component": "web-service"
              "app.kubernetes.io/managed-by": "kubevela"
            } & {
              // GraphQL federation label conditionally added
              if parameter.enableGraphQLFederation != _|_ {
                if parameter.enableGraphQLFederation {
                  "graphql.federation/enabled": "true"
                }
              }
            }
            annotations: {
              // Multi-cluster deployment support
              if parameter.targetEnvironment != _|_ {
                "app.oam.dev/cluster": parameter.targetEnvironment
              }
              if parameter.language != _|_ {
                "webservice.oam.dev/bootstrap": "true"
                "webservice.oam.dev/language": parameter.language
                "webservice.oam.dev/framework": parameter.framework
                if parameter.source != _|_ {
                  "webservice.oam.dev/source": parameter.source
                }
                if parameter.source == _|_ {
                  "webservice.oam.dev/source": "api-driven"
                }
              }
              if parameter.realtime != _|_ {
                "realtime.platform.example.org/integration": parameter.realtime
                "webservice.oam.dev/secret-discovery": "enabled"
                "webservice.oam.dev/secret-pattern": parameter.realtime + "-*-secret"
              }
            } & {
              // GraphQL federation annotations conditionally added
              if parameter.enableGraphQLFederation != _|_ {
                if parameter.enableGraphQLFederation {
                  "graphql.federation/enabled": "true"
                }
              }
              if parameter.enableGraphQLFederation != _|_ {
                if parameter.enableGraphQLFederation {
                  if parameter.openApiPath != _|_ {
                    "graphql.federation/openapi-path": parameter.openApiPath
                  }
                }
              }
              if parameter.enableGraphQLFederation != _|_ {
                if parameter.enableGraphQLFederation {
                  if parameter.apiVersion != _|_ {
                    "graphql.federation/api-version": parameter.apiVersion
                  }
                }
              }
            }
          }
          spec: {
            template: {
              metadata: {
                annotations: {
                  "autoscaling.knative.dev/minScale": "0"
                  "autoscaling.knative.dev/maxScale": "10"
                  "run.googleapis.com/execution-environment": "gen2"
                }
                labels: {
                  "app.kubernetes.io/name": context.name
                  "app.kubernetes.io/version": parameter.version
                }
              }
              spec: {
                serviceAccountName: "knative-docker-sa"
                containers: [{
                  image: parameter.image
                  ports: [{
                    containerPort: parameter.port
                    name: "http1"
                  }]
                  resources: {
                    limits: {
                      cpu: parameter.resources.cpu
                      memory: parameter.resources.memory
                    }
                    requests: {
                      cpu: parameter.resources.cpu
                      memory: parameter.resources.memory
                    }
                  }
                  env: [
                    for k, v in parameter.environment {
                      name: k
                      value: v
                    }
                  ] + (
                    if parameter.realtime != _|_ {[
                      {
                        name: "REALTIME_PLATFORM_NAME"
                        value: parameter.realtime
                      },
                      {
                        name: "REALTIME_INTEGRATION_ENABLED"
                        value: "true"
                      },
                      {
                        name: "WEBSERVICE_NAME"
                        value: context.name
                      }
                    ]} else {[]}
                  )
                  if parameter.envFrom != _|_ || parameter.realtime != _|_ {
                    envFrom: [
                      if parameter.envFrom != _|_ {
                        for envRef in parameter.envFrom {
                          envRef
                        }
                      }
                    ] + [
                      if parameter.realtime != _|_ {
                        secretRef: {
                          name: parameter.realtime + "-kafka-secret"
                          optional: true
                        }
                      }
                    ] + [
                      if parameter.realtime != _|_ {
                        secretRef: {
                          name: parameter.realtime + "-mqtt-secret"
                          optional: true
                        }
                      }
                    ] + [
                      if parameter.realtime != _|_ {
                        secretRef: {
                          name: parameter.realtime + "-mongodb-secret"
                          optional: true
                        }
                      }
                    ]
                  }
                  if parameter.probes != _|_ {
                    if parameter.probes.liveness != _|_ {
                      livenessProbe: parameter.probes.liveness
                    }
                    if parameter.probes.readiness != _|_ {
                      readinessProbe: parameter.probes.readiness
                    }
                    if parameter.probes.startup != _|_ {
                      startupProbe: parameter.probes.startup
                    }
                  }
                  if parameter.volumeMounts != _|_ {
                    volumeMounts: parameter.volumeMounts
                  }
                  if parameter.securityContext != _|_ {
                    securityContext: parameter.securityContext
                  }
                }]
                if parameter.volumes != _|_ {
                  volumes: parameter.volumes
                }
                if parameter.initContainers != _|_ {
                  initContainers: parameter.initContainers
                }
                if parameter.podSecurityContext != _|_ {
                  securityContext: parameter.podSecurityContext
                }
                if parameter.affinity != _|_ {
                  affinity: parameter.affinity
                }
                if parameter.tolerations != _|_ {
                  tolerations: parameter.tolerations
                }
                if parameter.nodeSelector != _|_ {
                  nodeSelector: parameter.nodeSelector
                }
                if parameter.topologySpreadConstraints != _|_ {
                  topologySpreadConstraints: parameter.topologySpreadConstraints
                }
              }
            }
          }
        }
        
        parameter: {
          // Required Parameters
          image: string
          port: *8080 | int
          version: *"latest" | string
          healthPath: *"/health" | string
          resources: *{
            cpu: "100m"
            memory: "128Mi"
          } | {
            cpu?: string
            memory?: string
          }
          environment: *{} | {[string]: string}
          envFrom?: [...{
            secretRef: {
              name: string
            }
          }]
          language?: string
          framework?: string
          source?: string
          realtime?: string
          repository?: string
          targetEnvironment?: string  // vCluster deployment target
          
          // GraphQL Federation Support
          enableGraphQLFederation?: bool  // Mark service for GraphQL federation
          openApiPath?: string           // Custom OpenAPI spec path (e.g., "/api/v1/openapi.json")
          apiVersion?: string            // API version for GraphQL federation (e.g., "v1", "v2")
          
          // Advanced Configuration
          probes?: {
            liveness?: {
              httpGet?: {
                path: string
                port: int
              }
              initialDelaySeconds?: int
              periodSeconds?: int
              timeoutSeconds?: int
              successThreshold?: int
              failureThreshold?: int
            }
            readiness?: {
              httpGet?: {
                path: string
                port: int
              }
              initialDelaySeconds?: int
              periodSeconds?: int
              timeoutSeconds?: int
              successThreshold?: int
              failureThreshold?: int
            }
            startup?: {
              httpGet?: {
                path: string
                port: int
              }
              initialDelaySeconds?: int
              periodSeconds?: int
              timeoutSeconds?: int
              successThreshold?: int
              failureThreshold?: int
            }
          }
          volumeMounts?: [...{
            name: string
            mountPath: string
            readOnly?: bool
          }]
          volumes?: [...{
            name: string
            configMap?: {
              name: string
            }
            secret?: {
              secretName: string
            }
            emptyDir?: {}
          }]
          initContainers?: [...{
            name: string
            image: string
            command?: [...string]
            args?: [...string]
            env?: [...{
              name: string
              value?: string
              valueFrom?: {
                secretKeyRef?: {
                  name: string
                  key: string
                }
              }
            }]
          }]
          securityContext?: {
            runAsNonRoot?: bool
            runAsUser?: int
            runAsGroup?: int
            fsGroup?: int
            capabilities?: {
              add?: [...string]
              drop?: [...string]
            }
          }
          podSecurityContext?: {
            runAsNonRoot?: bool
            runAsUser?: int
            runAsGroup?: int
            fsGroup?: int
          }
          affinity?: {
            nodeAffinity?: {}
            podAffinity?: {}
            podAntiAffinity?: {}
          }
          tolerations?: [...{
            key?: string
            operator?: string
            value?: string
            effect?: string
            tolerationSeconds?: int
          }]
          nodeSelector?: {[string]: string}
          topologySpreadConstraints?: [...{
            maxSkew: int
            topologyKey: string
            whenUnsatisfiable: string
            labelSelector: {
              matchLabels?: {[string]: string}
            }
          }]
        }
---
# Native Kafka ComponentDefinition (Crossplane-managed via Helm)
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: kafka
  annotations:
    definition.oam.dev/description: "Apache Kafka event streaming platform via Crossplane Helm provider"
    definition.oam.dev/requires-source-code: "false"
spec:
  workload:
    definition:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "helm.crossplane.io/v1beta1"
          kind: "Release"
          metadata: {
            name: parameter.name + "-kafka"
            namespace: context.namespace
            // Multi-cluster deployment support
            if parameter.targetEnvironment != _|_ {
              annotations: {
                "app.oam.dev/cluster": parameter.targetEnvironment
              }
            }
          }
          spec: {
            forProvider: {
              chart: {
                name: "kafka"
                repository: "https://charts.bitnami.com/bitnami"
                version: "26.8.5"
              }
              namespace: context.namespace
              skipCreateNamespace: false
              values: {
                replicaCount: parameter.replicas
                persistence: {
                  enabled: true
                  size: parameter.storage
                }
                service: {
                  type: "ClusterIP"
                }
                auth: {
                  clientProtocol: "plaintext"
                  interBrokerProtocol: "plaintext"
                }
                metrics: {
                  kafka: {
                    enabled: true
                  }
                  jmx: {
                    enabled: true
                  }
                }
                if parameter.zookeeper.enabled {
                  zookeeper: {
                    enabled: true
                    replicaCount: parameter.zookeeper.replicas
                    persistence: {
                      enabled: true
                      size: parameter.zookeeper.storage
                    }
                  }
                }
              }
            }
            providerConfigRef: {
              name: "default"
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          replicas: *3 | int
          storage: *"10Gi" | string
          zookeeper: *{
            enabled: true
            replicas: 3
            storage: "8Gi"
          } | {
            enabled: bool
            replicas?: int
            storage?: string
          }
          targetEnvironment?: string  // vCluster deployment target
        }

---
# Native Redis ComponentDefinition (Crossplane-managed via Helm)
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: redis
  annotations:
    definition.oam.dev/description: "Redis in-memory data store via Crossplane Helm provider"
    definition.oam.dev/requires-source-code: "false"
spec:
  workload:
    definition:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "helm.crossplane.io/v1beta1"
          kind: "Release"
          metadata: {
            name: parameter.name + "-redis"
            namespace: context.namespace
            // Multi-cluster deployment support
            if parameter.targetEnvironment != _|_ {
              annotations: {
                "app.oam.dev/cluster": parameter.targetEnvironment
              }
            }
          }
          spec: {
            forProvider: {
              chart: {
                name: "redis"
                repository: "https://charts.bitnami.com/bitnami"
                version: "18.19.4"
              }
              namespace: context.namespace
              skipCreateNamespace: false
              values: {
                architecture: parameter.architecture
                auth: {
                  enabled: parameter.auth.enabled
                  if parameter.auth.enabled {
                    password: parameter.auth.password
                  }
                }
                master: {
                  persistence: {
                    enabled: true
                    size: parameter.storage
                  }
                  resources: {
                    requests: {
                      cpu: parameter.resources.cpu
                      memory: parameter.resources.memory
                    }
                    limits: {
                      cpu: parameter.resources.cpu
                      memory: parameter.resources.memory
                    }
                  }
                }
                if parameter.architecture == "replication" {
                  replica: {
                    replicaCount: parameter.replicas
                    persistence: {
                      enabled: true
                      size: parameter.storage
                    }
                    resources: {
                      requests: {
                        cpu: parameter.resources.cpu
                        memory: parameter.resources.memory
                      }
                      limits: {
                        cpu: parameter.resources.cpu
                        memory: parameter.resources.memory
                      }
                    }
                  }
                }
                metrics: {
                  enabled: false
                }
              }
            }
            providerConfigRef: {
              name: "default"
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          architecture: *"standalone" | "replication"
          replicas: *2 | int
          storage: *"8Gi" | string
          auth: *{
            enabled: false
          } | {
            enabled: bool
            password?: string
          }
          resources: *{
            cpu: "100m"
            memory: "128Mi"
          } | {
            cpu: string
            memory: string
          }
          targetEnvironment?: string  // vCluster deployment target
        }

---
# Native MongoDB ComponentDefinition (Crossplane-managed via Helm)
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: mongodb
  annotations:
    definition.oam.dev/description: "MongoDB document database via Crossplane Helm provider"
    definition.oam.dev/requires-source-code: "false"
spec:
  workload:
    definition:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "helm.crossplane.io/v1beta1"
          kind: "Release"
          metadata: {
            name: parameter.name + "-mongodb"
            namespace: context.namespace
            // Multi-cluster deployment support
            if parameter.targetEnvironment != _|_ {
              annotations: {
                "app.oam.dev/cluster": parameter.targetEnvironment
              }
            }
          }
          spec: {
            forProvider: {
              chart: {
                name: "mongodb"
                repository: "https://charts.bitnami.com/bitnami"
                version: "15.6.13"
              }
              namespace: context.namespace
              skipCreateNamespace: false
              values: {
                architecture: parameter.architecture
                auth: {
                  enabled: parameter.auth.enabled
                  if parameter.auth.enabled {
                    rootPassword: parameter.auth.rootPassword
                    username: parameter.auth.username
                    password: parameter.auth.password
                    database: parameter.auth.database
                  }
                }
                persistence: {
                  enabled: true
                  size: parameter.storage
                }
                resources: {
                  requests: {
                    cpu: parameter.resources.cpu
                    memory: parameter.resources.memory
                  }
                  limits: {
                    cpu: parameter.resources.cpu
                    memory: parameter.resources.memory
                  }
                }
                if parameter.architecture == "replicaset" {
                  replicaCount: parameter.replicas
                  replicaSetName: parameter.name + "-rs"
                }
                metrics: {
                  enabled: false
                }
              }
            }
            providerConfigRef: {
              name: "default"
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          architecture: *"standalone" | "replicaset"
          replicas: *3 | int
          storage: *"8Gi" | string
          auth: *{
            enabled: true
            rootPassword: "mongopass"
            username: "mongodb"
            password: "mongodb"
            database: "mydb"
          } | {
            enabled: bool
            rootPassword?: string
            username?: string
            password?: string
            database?: string
          }
          resources: *{
            cpu: "500m"
            memory: "512Mi"
          } | {
            cpu: string
            memory: string
          }
          targetEnvironment?: string  // vCluster deployment target
        }

---
# Infrastructure Components (Create Crossplane Claims for complex infrastructure)

# Application Infrastructure Component (for complex setups)
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: application-infrastructure
  annotations:
    definition.oam.dev/description: "Complete application infrastructure including repos, databases, caches, and secrets. Use when you need the full ApplicationClaim workflow."
    definition.oam.dev/requires-source-code: "false"
spec:
  workload:
    definition:
      apiVersion: platform.example.org/v1alpha1
      kind: ApplicationClaim
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "platform.example.org/v1alpha1"
          kind: "ApplicationClaim"
          metadata: {
            name: parameter.name + "-infra"
            namespace: context.namespace
            annotations: {
              if parameter.source != _|_ {
                "webservice.oam.dev/source": parameter.source
              }
              if parameter.source == _|_ {
                "webservice.oam.dev/source": "OAM-driven"
              }
            }
          }
          spec: {
            name: parameter.name
            language: parameter.language
            framework: parameter.framework
            if parameter.database != _|_ {
              database: parameter.database
            }
            if parameter.cache != _|_ {
              cache: parameter.cache
            }
            if parameter.generateRepo != _|_ {
              generateRepo: parameter.generateRepo
            }
            resources: {
              cpu: parameter.resources.cpu
              memory: parameter.resources.memory
            }
            environment: parameter.environment
          }
        }
        
        parameter: {
          // Required
          name: string
          language: "python" | "java" | "javascript" | "go"
          framework: string
          
          // Optional
          database?: "postgres" | "mysql" | "mongodb"
          cache?: "redis" | "memcached"
          generateRepo: *false | bool
          source?: string  // Source of the ApplicationClaim (api-driven, OAM-driven, etc.)
          environment: *{} | {...}
          resources: *{
            cpu: "500m"
            memory: "512Mi"
          } | {
            cpu?: string
            memory?: string
          }
        }


---
# VCluster Component (creates virtual Kubernetes environments)
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: vcluster
  annotations:
    definition.oam.dev/description: "Virtual Kubernetes cluster with optional components via Crossplane"
    definition.oam.dev/requires-source-code: "false"
spec:
  workload:
    definition:
      apiVersion: platform.example.org/v1alpha1
      kind: VClusterEnvironmentClaim
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "platform.example.org/v1alpha1"
          kind: "VClusterEnvironmentClaim"
          metadata: {
            name: parameter.name
            namespace: context.namespace
          }
          spec: {
            name: parameter.name
            if parameter.domain != _|_ {
              domain: parameter.domain
            }
            components: {
              istio: parameter.istio
              knativeServing: parameter.knativeServing
              argoCD: parameter.argoCD
              if parameter.observability {
                grafana: true
                prometheus: true
                jaeger: true
                kiali: true
              }
              if parameter.apiGateway {
                apiGateway: true
              }
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          domain?: string
          istio: *true | bool
          knativeServing: *true | bool
          argoCD: *true | bool
          observability: *true | bool
          apiGateway: *false | bool
        }

---
# External Integration Components

# Neon Postgres Component (managed database via Secret reference)
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: neon-postgres
  annotations:
    definition.oam.dev/description: "Neon PostgreSQL managed database credentials via Secret reference"
    definition.oam.dev/requires-source-code: "false"
spec:
  workload:
    definition:
      apiVersion: v1
      kind: Secret
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "v1"
          kind: "Secret"
          metadata: {
            name: parameter.name + "-db-credentials" 
            namespace: context.namespace
            annotations: {
              // Multi-cluster deployment support
              if parameter.targetEnvironment != _|_ {
                "app.oam.dev/cluster": parameter.targetEnvironment
              }
              "neon-postgres.oam.dev/source-secret": "neon-postgres-credentials"
              "neon-postgres.oam.dev/component-scoped": "true"
            }
          }
          type: "Opaque"
          stringData: {
            PGDATABASE: parameter.database
            // Component references host secret via external mechanism
            DB_REF: "host-cluster"
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          database: *"postgres" | string
          targetEnvironment?: string  // vCluster deployment target
        }

---
# Auth0 Identity Provider Component
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: auth0-idp
  annotations:
    definition.oam.dev/description: "Auth0 identity provider integration via External Secrets"
    definition.oam.dev/requires-source-code: "false"
spec:
  workload:
    definition:
      apiVersion: external-secrets.io/v1beta1
      kind: ExternalSecret
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "external-secrets.io/v1beta1"
          kind: "ExternalSecret"
          metadata: {
            name: parameter.name + "-auth0-credentials"
            namespace: context.namespace
            // Multi-cluster deployment support
            if parameter.targetEnvironment != _|_ {
              annotations: {
                "app.oam.dev/cluster": parameter.targetEnvironment
              }
            }
          }
          spec: {
            refreshInterval: "1h"
            secretStoreRef: {
              kind: "ClusterSecretStore"
              name: "aws-secretsmanager"
            }
            target: {
              name: parameter.name + "-auth0-credentials"
              creationPolicy: "Owner"
            }
            data: [
              {
                secretKey: "clientId"
                remoteRef: {
                  key: "auth0/credentials"
                  property: "clientId"
                }
              },
              {
                secretKey: "clientSecret"
                remoteRef: {
                  key: "auth0/credentials"
                  property: "clientSecret"
                }
              },
              {
                secretKey: "domain"
                remoteRef: {
                  key: "auth0/credentials"
                  property: "domain"
                }
              },
              {
                secretKey: "audience"
                remoteRef: {
                  key: "auth0/credentials"  
                  property: "audience"
                }
              }
            ]
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          targetEnvironment?: string  // vCluster deployment target
        }

---
# ClickHouse Analytics Database ComponentDefinition
# Optimized for healthcare analytics and time-series data
# Supports OLAP queries for demand forecasting and reporting
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: clickhouse
  annotations:
    definition.oam.dev/description: "ClickHouse analytical database for time-series data and OLAP queries with healthcare compliance"
    definition.oam.dev/requires-source-code: "false"
spec:
  workload:
    definition:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "helm.crossplane.io/v1beta1"
          kind: "Release"
          metadata: {
            name: parameter.name + "-clickhouse"
            namespace: context.namespace
            labels: {
              "app.kubernetes.io/name": parameter.name + "-clickhouse"
              "app.kubernetes.io/component": "analytics-database"
              "app.kubernetes.io/managed-by": "kubevela"
            }
            // Multi-cluster deployment support
            if parameter.targetEnvironment != _|_ {
              annotations: {
                "app.oam.dev/cluster": parameter.targetEnvironment
              }
            }
          }
          spec: {
            forProvider: {
              chart: {
                name: "clickhouse"
                repository: "https://charts.bitnami.com/bitnami"
                version: "4.1.15"
              }
              namespace: context.namespace
              skipCreateNamespace: false
              values: {
                architecture: parameter.architecture
                auth: {
                  username: parameter.auth.username
                  password: parameter.auth.password
                  database: parameter.auth.database
                }
                persistence: {
                  enabled: true
                  size: parameter.storage
                  storageClass: parameter.storageClass
                }
                resources: {
                  requests: {
                    cpu: parameter.resources.cpu
                    memory: parameter.resources.memory
                  }
                  limits: {
                    cpu: parameter.resources.cpu
                    memory: parameter.resources.memory
                  }
                }
                if parameter.architecture == "replication" {
                  replicaCount: parameter.replicas
                  shards: parameter.shards
                }
                service: {
                  type: "ClusterIP"
                  ports: {
                    http: 8123
                    tcp: 9000
                    mysql: 9004
                    postgresql: 9005
                  }
                }
                configuration: {
                  // Healthcare-specific optimizations
                  maxMemoryUsage: "8000000000"  // 8GB for analytics queries
                  maxBytesBeforeExternalGroupBy: "2000000000"  // 2GB
                  maxBytesBeforeExternalSort: "2000000000"     // 2GB
                  httpPort: 8123
                  tcpPort: 9000
                  // Timezone for South African operations
                  timezone: "Africa/Johannesburg"
                  // Custom settings for healthcare compliance
                  queryLogRetentionTime: "7776000"  // 90 days for audit compliance
                  partLogRetentionTime: "7776000"   // 90 days
                  // Performance optimizations for stock analytics
                  backgroundPoolSize: 16
                  backgroundSchedulePoolSize: 16
                  maxConcurrentQueries: 100
                  maxConnections: 1000
                }
                metrics: {
                  enabled: true
                  serviceMonitor: {
                    enabled: true
                  }
                }
                // Healthcare data encryption
                tls: {
                  enabled: parameter.security.tlsEnabled
                  if parameter.security.tlsEnabled {
                    certificatesSecret: parameter.security.certificateSecret
                  }
                }
                // Backup configuration for compliance
                backup: {
                  enabled: parameter.backup.enabled
                  if parameter.backup.enabled {
                    schedule: parameter.backup.schedule
                    retention: parameter.backup.retentionDays
                  }
                }
                // Network policies for healthcare security
                networkPolicy: {
                  enabled: parameter.security.networkPolicyEnabled
                  if parameter.security.networkPolicyEnabled {
                    allowExternal: false
                    ingressRules: {
                      accessOnlyFrom: {
                        enabled: true
                        namespaceSelector: {
                          "healthcare.org/access": "analytics"
                        }
                      }
                    }
                  }
                }
              }
            }
            providerConfigRef: {
              name: "default"
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Database configuration
          auth: *{
            username: "clickhouse"
            password: "secure-clickhouse-password"
            database: "healthcare_analytics"
          } | {
            username: string
            password: string
            database: string
          }
          
          // Infrastructure configuration
          architecture: *"standalone" | "replication"
          replicas: *1 | int
          shards: *1 | int
          storage: *"20Gi" | string
          storageClass: *"gp2" | string
          
          // Resource allocation
          resources: *{
            cpu: "2000m"
            memory: "4Gi"
          } | {
            cpu: string
            memory: string
          }
          
          // Security configuration
          security: *{
            tlsEnabled: true
            networkPolicyEnabled: true
            certificateSecret: "clickhouse-tls-cert"
          } | {
            tlsEnabled: bool
            networkPolicyEnabled?: bool
            certificateSecret?: string
          }
          
          // Backup configuration for healthcare compliance
          backup: *{
            enabled: true
            schedule: "0 2 * * *"  // Daily at 2 AM
            retentionDays: 2555    // 7 years for healthcare compliance
          } | {
            enabled: bool
            schedule?: string
            retentionDays?: int
          }
          targetEnvironment?: string  // vCluster deployment target
        }

---
# Identity Service ComponentDefinition
# Generates domain-specific Spring Boot identity services via Argo Workflows
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: identity-service
  annotations:
    definition.oam.dev/description: "Domain-specific identity and access management service generator using Spring Boot templates"
    definition.oam.dev/requires-source-code: "true"
spec:
  workload:
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Workflow
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "argoproj.io/v1alpha1"
          kind: "Workflow"
          metadata: {
            generateName: context.name + "-identity-gen-"
            namespace: context.namespace
            labels: {
              "app.kubernetes.io/name": context.name
              "app.kubernetes.io/component": "identity-service"
              "app.kubernetes.io/managed-by": "oam"
              "identity.platform/domain": parameter.domain
            }
          }
          spec: {
            serviceAccountName: "argo-workflow"
            workflowTemplateRef: {
              name: "identity-service-generator"
            }
            arguments: {
              parameters: [
                {name: "domain", value: parameter.domain},
                {name: "repo-name", value: context.name + "-identity-service"},
                {name: "app-name", value: context.name},
                {name: "github-owner", value: parameter.githubOwner}
              ]
            }
          }
        }
        
        outputs: {
          // Create ConfigMap with service metadata for other components to discover
          "service-metadata": {
            apiVersion: "v1"
            kind: "ConfigMap"
            metadata: {
              name: context.name + "-identity-metadata"
              namespace: context.namespace
              labels: {
                "app.kubernetes.io/name": context.name
                "app.kubernetes.io/component": "identity-service"
                "identity.platform/domain": parameter.domain
              }
            }
            data: {
              "domain": parameter.domain
              "repository": parameter.githubOwner + "/" + context.name + "-identity-service"
              "language": "java"
              "framework": "spring-boot"
              "profiles": parameter.domain == "healthcare" ? "Patient,Physician,Nurse,Administrator" :
                         parameter.domain == "financial" ? "Customer,Banker,ComplianceOfficer,Auditor" :
                         parameter.domain == "education" ? "Student,Teacher,Parent,Administrator" :
                         "BaseUser"
              "compliance": parameter.domain == "healthcare" ? "HIPAA,HITECH,GDPR" :
                           parameter.domain == "financial" ? "PCI-DSS,SOX,AML-KYC,FATCA" :
                           parameter.domain == "education" ? "FERPA,COPPA,IDEA" :
                           "GDPR"
              "integrations": parameter.domain == "healthcare" ? "fhir,hl7,kafka" :
                             parameter.domain == "financial" ? "kyc,credit-bureau,kafka" :
                             parameter.domain == "education" ? "lms,sis,kafka" :
                             "kafka"
            }
          }
          
          // Create placeholder Service for future deployment
          "service-placeholder": {
            apiVersion: "v1"
            kind: "Service"
            metadata: {
              name: context.name + "-identity"
              namespace: context.namespace
              labels: {
                "app.kubernetes.io/name": context.name
                "app.kubernetes.io/component": "identity-service"
                "identity.platform/domain": parameter.domain
              }
              annotations: {
                "identity.platform/repository": parameter.githubOwner + "/" + context.name + "-identity-service"
                "identity.platform/status": "pending-generation"
              }
            }
            spec: {
              type: "ClusterIP"
              selector: {
                "app.kubernetes.io/name": context.name + "-identity"
              }
              ports: [{
                name: "http"
                port: 8080
                targetPort: 8080
                protocol: "TCP"
              }]
            }
          }
        }
        
        parameter: {
          // Domain selection - determines profiles, integrations, and compliance
          domain: "healthcare" | "financial" | "education"
          
          // GitHub configuration
          githubOwner: *"shlapolosa" | string
          
          // Future expansion parameters (not used in MVP)
          customProfiles?: [...string]
          additionalIntegrations?: [...string]
          javaVersion?: *"21" | string
          springBootVersion?: *"3.2.0" | string
          
          // Database configuration (for future auto-provisioning)
          database?: *{
            type: "postgresql"
            provision: true
          } | {
            type: string
            provision: bool
          }
          
          // Redis configuration (for future auto-provisioning)
          redis?: *{
            enabled: true
            provision: true
          } | {
            enabled: bool
            provision: bool
          }
        }
EOF < /dev/null