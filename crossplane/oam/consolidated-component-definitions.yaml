# Consolidated OAM ComponentDefinitions
# Following Architecture Principles:
# 1. Single component declaration creates everything needed
# 2. ComponentDefinition-only (no Claims for basic components)
# 3. Embedded workflows for complex orchestration
# 4. KubeVela orchestrates, Crossplane executes

---
# Enhanced WebService ComponentDefinition with Embedded Workflow
# Automatically handles infrastructure bootstrap when needed
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: webservice
  annotations:
    definition.oam.dev/description: "Enhanced webservice with automatic infrastructure bootstrap via embedded workflows"
spec:
  workload:
    definition:
      apiVersion: serving.knative.dev/v1
      kind: Service
    type: services.serving.knative.dev
  schematic:
    cue:
      template: |
        // Primary Output: Knative Service (OAM-compliant workload)
        output: {
          apiVersion: "serving.knative.dev/v1"
          kind: "Service"
          metadata: {
            name: parameter.name
            namespace: context.namespace
            labels: {
              "app.kubernetes.io/name": parameter.name
              "app.kubernetes.io/component": "web-service"
              "app.kubernetes.io/managed-by": "kubevela"
            }
            annotations: {
              if parameter.language != _|_ {
                "webservice.oam.dev/bootstrap": "true"
                "webservice.oam.dev/language": parameter.language
                "webservice.oam.dev/framework": parameter.framework
                if parameter.source != _|_ {
                  "webservice.oam.dev/source": parameter.source
                }
                if parameter.source == _|_ {
                  "webservice.oam.dev/source": "api-driven"
                }
              }
            }
          }
          spec: {
            template: {
              metadata: {
                annotations: {
                  "autoscaling.knative.dev/minScale": "0"
                  "autoscaling.knative.dev/maxScale": "10"
                  "run.googleapis.com/execution-environment": "gen2"
                }
                labels: {
                  "app.kubernetes.io/name": parameter.name
                  "app.kubernetes.io/version": parameter.version
                }
              }
              spec: {
                serviceAccountName: "knative-docker-sa"
                containers: [{
                  image: parameter.image
                  ports: [{
                    containerPort: parameter.port
                    name: "http1"
                  }]
                  resources: {
                    limits: {
                      cpu: parameter.resources.cpu
                      memory: parameter.resources.memory
                    }
                    requests: {
                      cpu: "100m"
                      memory: "128Mi"
                    }
                  }
                  if len(parameter.environment) > 0 {
                    env: [
                      for k, v in parameter.environment {
                        name: k
                        value: v
                      }
                    ]
                  }
                  if parameter.envFrom != _|_ {
                    envFrom: parameter.envFrom
                  }
                  // Health checks for robust deployment
                  livenessProbe: {
                    httpGet: {
                      path: parameter.healthPath
                      port: parameter.port
                    }
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  }
                  readinessProbe: {
                    httpGet: {
                      path: parameter.healthPath
                      port: parameter.port
                    }
                    initialDelaySeconds: 5
                    periodSeconds: 5
                  }
                }]
              }
            }
          }
        }
        
        // Secondary Outputs: Infrastructure Bootstrap via Argo Workflow (when language specified)
        if parameter.language != _|_ {
          outputs: {
            // Create Job to trigger Argo Workflow for microservice creation
            "workflow-trigger": {
              apiVersion: "batch/v1"
              kind: "Job"
              metadata: {
                name: parameter.name + "-workflow-trigger"
                namespace: context.namespace
                labels: {
                  "app.kubernetes.io/name": parameter.name
                  "app.kubernetes.io/component": "workflow-trigger"
                  "app.kubernetes.io/managed-by": "kubevela"
                }
                annotations: {
                  "webservice.oam.dev/trigger-type": "argo-workflow"
                  "webservice.oam.dev/workflow-template": "microservice-standard-contract"
                  if parameter.source != _|_ {
                    "webservice.oam.dev/source": parameter.source
                  }
                  if parameter.source == _|_ {
                    "webservice.oam.dev/source": "oam-driven"
                  }
                }
              }
              spec: {
                template: {
                  spec: {
                    serviceAccountName: "argo-workflows-client"
                    restartPolicy: "Never"
                    containers: [{
                      name: "workflow-trigger"
                      image: "curlimages/curl:latest"
                      command: ["/bin/sh", "-c"]
                      args: [
                        "echo '🚀 Triggering Argo Workflow for microservice: " + parameter.name + "'\n" +
                        "cat > /tmp/workflow.json << 'WORKFLOW_EOF'\n" +
                        "{\n" +
                        "  \"namespace\": \"argo\",\n" +
                        "  \"serverDryRun\": false,\n" +
                        "  \"workflow\": {\n" +
                        "    \"metadata\": {\n" +
                        "      \"generateName\": \"microservice-creation-\",\n" +
                        "      \"namespace\": \"argo\",\n" +
                        "      \"labels\": {\n" +
                        "        \"created-by\": \"oam-componentdefinition\",\n" +
                        "        \"microservice-name\": \"" + parameter.name + "\",\n" +
                        "        \"source\": \"" + (*"oam-driven" | parameter.source) + "\"\n" +
                        "      }\n" +
                        "    },\n" +
                        "    \"spec\": {\n" +
                        "      \"workflowTemplateRef\": {\n" +
                        "        \"name\": \"microservice-standard-contract\"\n" +
                        "      },\n" +
                        "      \"arguments\": {\n" +
                        "        \"parameters\": [\n" +
                        "          {\"name\": \"resource-name\", \"value\": \"" + parameter.name + "\"},\n" +
                        "          {\"name\": \"resource-type\", \"value\": \"microservice\"},\n" +
                        "          {\"name\": \"namespace\", \"value\": \"" + context.namespace + "\"},\n" +
                        "          {\"name\": \"user\", \"value\": \"oam-system\"},\n" +
                        "          {\"name\": \"description\", \"value\": \"OAM-driven microservice via ComponentDefinition\"},\n" +
                        "          {\"name\": \"github-org\", \"value\": \"shlapolosa\"},\n" +
                        "          {\"name\": \"docker-registry\", \"value\": \"" + (*"docker.io/socrates12345" | parameter.registry) + "\"},\n" +
                        "          {\"name\": \"slack-channel\", \"value\": \"#oam-notifications\"},\n" +
                        "          {\"name\": \"slack-user-id\", \"value\": \"OAM\"},\n" +
                        "          {\"name\": \"security-enabled\", \"value\": \"true\"},\n" +
                        "          {\"name\": \"observability-enabled\", \"value\": \"true\"},\n" +
                        "          {\"name\": \"backup-enabled\", \"value\": \"false\"},\n" +
                        "          {\"name\": \"environment-tier\", \"value\": \"development\"},\n" +
                        "          {\"name\": \"auto-create-dependencies\", \"value\": \"true\"},\n" +
                        "          {\"name\": \"resource-size\", \"value\": \"medium\"},\n" +
                        "          {\"name\": \"microservice-language\", \"value\": \"" + parameter.language + "\"},\n" +
                        "          {\"name\": \"microservice-framework\", \"value\": \"" + parameter.framework + "\"},\n" +
                        "          {\"name\": \"microservice-database\", \"value\": \"" + (*"none" | parameter.database) + "\"},\n" +
                        "          {\"name\": \"microservice-cache\", \"value\": \"" + (*"none" | parameter.cache) + "\"},\n" +
                        "          {\"name\": \"microservice-expose-api\", \"value\": \"false\"},\n" +
                        "          {\"name\": \"target-vcluster\", \"value\": \"\"},\n" +
                        "          {\"name\": \"parent-appcontainer\", \"value\": \"\"},\n" +
                        "          {\"name\": \"repository-name\", \"value\": \"" + (*parameter.name | parameter.repository) + "\"}\n" +
                        "        ]\n" +
                        "      }\n" +
                        "    }\n" +
                        "  }\n" +
                        "}\n" +
                        "WORKFLOW_EOF\n" +
                        "echo '📋 Workflow JSON created, submitting to Argo...'\n" +
                        "cat /tmp/workflow.json\n" +
                        "RESPONSE=$(curl -s -w 'HTTPSTATUS:%{http_code}' -X POST -H 'Content-Type: application/json' -H 'Accept: application/json' -d @/tmp/workflow.json http://argo-server.argo.svc.cluster.local:2746/api/v1/workflows/argo)\n" +
                        "HTTP_STATUS=$(echo $RESPONSE | tr -d '\\n' | sed -e 's/.*HTTPSTATUS://')\n" +
                        "BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')\n" +
                        "echo '📊 HTTP Status:' $HTTP_STATUS\n" +
                        "echo '📄 Response:' $BODY\n" +
                        "if [ \"$HTTP_STATUS\" -eq 200 ] || [ \"$HTTP_STATUS\" -eq 201 ]; then\n" +
                        "  echo '✅ Workflow submission successful!'\n" +
                        "  echo \"$BODY\" | grep -o '\"name\":\"[^\"]*\"' | head -1\n" +
                        "else\n" +
                        "  echo '❌ Workflow submission failed with status:' $HTTP_STATUS\n" +
                        "  echo 'Response:' $BODY\n" +
                        "  exit 1\n" +
                        "fi"
                      ]
                    }]
                  }
                }
              }
            }
            
            // Create application secrets configuration
            "app-secrets": {
              apiVersion: "v1"
              kind: "Secret"
              metadata: {
                name: parameter.name + "-config"
                namespace: context.namespace
                labels: {
                  "app.kubernetes.io/name": parameter.name
                  "app.kubernetes.io/component": "configuration"
                }
              }
              type: "Opaque"
              stringData: {
                "SERVICE_NAME": parameter.name
                "SERVICE_PORT": "\(parameter.port)"
                "SERVICE_VERSION": parameter.version
                if parameter.database != _|_ {
                  "DATABASE_TYPE": parameter.database
                }
                if parameter.cache != _|_ {
                  "CACHE_TYPE": parameter.cache
                }
              }
            }
          }
        }
        
        parameter: {
          // Required Parameters
          name: string
          image: string
          
          // Optional Infrastructure Bootstrap
          language?: string     // Triggers bootstrap: python, nodejs, java, go
          framework?: string    // fastapi, express, spring, gin
          repository?: string   // Git repository template name
          registry?: string     // Container registry (default: docker.io)
          source?: string       // Source detection: api-driven, oam-driven, analyzer-driven
          
          // Service Configuration
          port: *8080 | int
          version: *"latest" | string
          healthPath: *"/health" | string
          
          // Resource Management
          resources: *{
            cpu: "500m"
            memory: "512Mi"
          } | {
            cpu?: string
            memory?: string
          }
          
          // Environment Variables
          environment: *{} | {[string]: string}
          
          // Environment Variables from Secrets
          envFrom?: [...{
            secretRef: {
              name: string
            }
          }]
          
          // Infrastructure Dependencies (optional)
          database?: string     // postgres, mysql, mongodb
          cache?: string        // redis, memcached
        }

---
# Native Kafka ComponentDefinition (Crossplane-managed via Helm)
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: kafka
  annotations:
    definition.oam.dev/description: "Apache Kafka event streaming platform via Crossplane Helm provider"
spec:
  workload:
    definition:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "helm.crossplane.io/v1beta1"
          kind: "Release"
          metadata: {
            name: parameter.name + "-kafka"
            namespace: context.namespace
          }
          spec: {
            forProvider: {
              chart: {
                name: "kafka"
                repository: "https://charts.bitnami.com/bitnami"
                version: "26.8.5"
              }
              namespace: context.namespace
              skipCreateNamespace: false
              values: {
                replicaCount: parameter.replicas
                persistence: {
                  enabled: true
                  size: parameter.storage
                }
                service: {
                  type: "ClusterIP"
                }
                auth: {
                  clientProtocol: "plaintext"
                  interBrokerProtocol: "plaintext"
                }
                metrics: {
                  kafka: {
                    enabled: true
                  }
                  jmx: {
                    enabled: true
                  }
                }
                if parameter.zookeeper.enabled {
                  zookeeper: {
                    enabled: true
                    replicaCount: parameter.zookeeper.replicas
                    persistence: {
                      enabled: true
                      size: parameter.zookeeper.storage
                    }
                  }
                }
              }
            }
            providerConfigRef: {
              name: "default"
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          replicas: *3 | int
          storage: *"10Gi" | string
          zookeeper: *{
            enabled: true
            replicas: 3
            storage: "8Gi"
          } | {
            enabled: bool
            replicas?: int
            storage?: string
          }
        }

---
# Native Redis ComponentDefinition (Crossplane-managed via Helm)
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: redis
  annotations:
    definition.oam.dev/description: "Redis in-memory data store via Crossplane Helm provider"
spec:
  workload:
    definition:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "helm.crossplane.io/v1beta1"
          kind: "Release"
          metadata: {
            name: parameter.name + "-redis"
            namespace: context.namespace
          }
          spec: {
            forProvider: {
              chart: {
                name: "redis"
                repository: "https://charts.bitnami.com/bitnami"
                version: "18.19.4"
              }
              namespace: context.namespace
              skipCreateNamespace: false
              values: {
                architecture: parameter.architecture
                auth: {
                  enabled: parameter.auth.enabled
                  if parameter.auth.enabled {
                    password: parameter.auth.password
                  }
                }
                master: {
                  persistence: {
                    enabled: true
                    size: parameter.storage
                  }
                  resources: {
                    requests: {
                      cpu: parameter.resources.cpu
                      memory: parameter.resources.memory
                    }
                    limits: {
                      cpu: parameter.resources.cpu
                      memory: parameter.resources.memory
                    }
                  }
                }
                if parameter.architecture == "replication" {
                  replica: {
                    replicaCount: parameter.replicas
                    persistence: {
                      enabled: true
                      size: parameter.storage
                    }
                    resources: {
                      requests: {
                        cpu: parameter.resources.cpu
                        memory: parameter.resources.memory
                      }
                      limits: {
                        cpu: parameter.resources.cpu
                        memory: parameter.resources.memory
                      }
                    }
                  }
                }
                metrics: {
                  enabled: false
                }
              }
            }
            providerConfigRef: {
              name: "default"
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          architecture: *"standalone" | "replication"
          replicas: *2 | int
          storage: *"8Gi" | string
          auth: *{
            enabled: false
          } | {
            enabled: bool
            password?: string
          }
          resources: *{
            cpu: "100m"
            memory: "128Mi"
          } | {
            cpu: string
            memory: string
          }
        }

---
# Native MongoDB ComponentDefinition (Crossplane-managed via Helm)
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: mongodb
  annotations:
    definition.oam.dev/description: "MongoDB document database via Crossplane Helm provider"
spec:
  workload:
    definition:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "helm.crossplane.io/v1beta1"
          kind: "Release"
          metadata: {
            name: parameter.name + "-mongodb"
            namespace: context.namespace
          }
          spec: {
            forProvider: {
              chart: {
                name: "mongodb"
                repository: "https://charts.bitnami.com/bitnami"
                version: "15.6.13"
              }
              namespace: context.namespace
              skipCreateNamespace: false
              values: {
                architecture: parameter.architecture
                auth: {
                  enabled: parameter.auth.enabled
                  if parameter.auth.enabled {
                    rootPassword: parameter.auth.rootPassword
                    username: parameter.auth.username
                    password: parameter.auth.password
                    database: parameter.auth.database
                  }
                }
                persistence: {
                  enabled: true
                  size: parameter.storage
                }
                resources: {
                  requests: {
                    cpu: parameter.resources.cpu
                    memory: parameter.resources.memory
                  }
                  limits: {
                    cpu: parameter.resources.cpu
                    memory: parameter.resources.memory
                  }
                }
                if parameter.architecture == "replicaset" {
                  replicaCount: parameter.replicas
                  replicaSetName: parameter.name + "-rs"
                }
                metrics: {
                  enabled: false
                }
              }
            }
            providerConfigRef: {
              name: "default"
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          architecture: *"standalone" | "replicaset"
          replicas: *3 | int
          storage: *"8Gi" | string
          auth: *{
            enabled: true
            rootPassword: "mongopass"
            username: "mongodb"
            password: "mongodb"
            database: "mydb"
          } | {
            enabled: bool
            rootPassword?: string
            username?: string
            password?: string
            database?: string
          }
          resources: *{
            cpu: "500m"
            memory: "512Mi"
          } | {
            cpu: string
            memory: string
          }
        }

---
# Infrastructure Components (Create Crossplane Claims for complex infrastructure)

# Application Infrastructure Component (for complex setups)
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: application-infrastructure
  annotations:
    definition.oam.dev/description: "Complete application infrastructure including repos, databases, caches, and secrets. Use when you need the full ApplicationClaim workflow."
spec:
  workload:
    definition:
      apiVersion: platform.example.org/v1alpha1
      kind: ApplicationClaim
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "platform.example.org/v1alpha1"
          kind: "ApplicationClaim"
          metadata: {
            name: parameter.name + "-infra"
            namespace: context.namespace
          }
          spec: {
            name: parameter.name
            language: parameter.language
            framework: parameter.framework
            if parameter.database != _|_ {
              database: parameter.database
            }
            if parameter.cache != _|_ {
              cache: parameter.cache
            }
            if parameter.generateRepo != _|_ {
              generateRepo: parameter.generateRepo
            }
            resources: {
              cpu: parameter.resources.cpu
              memory: parameter.resources.memory
            }
            environment: parameter.environment
          }
        }
        
        parameter: {
          // Required
          name: string
          language: "python" | "java" | "javascript" | "go"
          framework: string
          
          // Optional
          database?: "postgres" | "mysql" | "mongodb"
          cache?: "redis" | "memcached"
          generateRepo: *false | bool
          environment: *{} | {...}
          resources: *{
            cpu: "500m"
            memory: "512Mi"
          } | {
            cpu?: string
            memory?: string
          }
        }

---
# Realtime Platform Component (creates complete streaming infrastructure)
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: realtime-platform
  annotations:
    definition.oam.dev/description: "Complete real-time streaming platform including Kafka, MQTT, Analytics via Crossplane"
spec:
  workload:
    definition:
      apiVersion: platform.example.org/v1alpha1
      kind: RealtimePlatformClaim
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "platform.example.org/v1alpha1"
          kind: "RealtimePlatformClaim"
          metadata: {
            name: parameter.name + "-platform"
            namespace: context.namespace
          }
          spec: {
            name: parameter.name
            if parameter.database != _|_ {
              database: parameter.database
            }
            if parameter.visualization != _|_ {
              visualization: parameter.visualization
            }
            if parameter.iotBroker != _|_ {
              iotBroker: parameter.iotBroker
            }
            if parameter.streamProcessor != _|_ {
              streamProcessor: parameter.streamProcessor
            }
            resources: {
              cpu: parameter.resources.cpu
              memory: parameter.resources.memory
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          database: *"postgres" | "mysql" | "mongodb"
          visualization: *"metabase" | "grafana"
          iotBroker: *true | bool
          streamProcessor: *true | bool
          resources: *{
            cpu: "2000m"
            memory: "4Gi"
          } | {
            cpu?: string
            memory?: string
          }
        }

---
# VCluster Component (creates virtual Kubernetes environments)
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: vcluster
  annotations:
    definition.oam.dev/description: "Virtual Kubernetes cluster with optional components via Crossplane"
spec:
  workload:
    definition:
      apiVersion: platform.example.org/v1alpha1
      kind: VClusterEnvironmentClaim
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "platform.example.org/v1alpha1"
          kind: "VClusterEnvironmentClaim"
          metadata: {
            name: parameter.name
            namespace: context.namespace
          }
          spec: {
            name: parameter.name
            if parameter.domain != _|_ {
              domain: parameter.domain
            }
            components: {
              istio: parameter.istio
              knativeServing: parameter.knativeServing
              argoCD: parameter.argoCD
              if parameter.observability {
                grafana: true
                prometheus: true
                jaeger: true
                kiali: true
              }
              if parameter.apiGateway {
                apiGateway: true
              }
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          domain?: string
          istio: *true | bool
          knativeServing: *true | bool
          argoCD: *true | bool
          observability: *true | bool
          apiGateway: *false | bool
        }

---
# External Integration Components

# Neon Postgres Component (managed database via Secret reference)
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: neon-postgres
  annotations:
    definition.oam.dev/description: "Neon PostgreSQL managed database credentials via Secret reference"
spec:
  workload:
    definition:
      apiVersion: v1
      kind: Secret
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "v1"
          kind: "Secret"
          metadata: {
            name: parameter.name + "-db-credentials" 
            namespace: context.namespace
            annotations: {
              "neon-postgres.oam.dev/source-secret": "neon-postgres-credentials"
              "neon-postgres.oam.dev/component-scoped": "true"
            }
          }
          type: "Opaque"
          stringData: {
            PGDATABASE: parameter.database
            // Component references host secret via external mechanism
            DB_REF: "host-cluster"
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          database: *"postgres" | string
        }

---
# Auth0 Identity Provider Component
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: auth0-idp
  annotations:
    definition.oam.dev/description: "Auth0 identity provider integration via External Secrets"
spec:
  workload:
    definition:
      apiVersion: external-secrets.io/v1beta1
      kind: ExternalSecret
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "external-secrets.io/v1beta1"
          kind: "ExternalSecret"
          metadata: {
            name: parameter.name + "-auth0-credentials"
            namespace: context.namespace
          }
          spec: {
            refreshInterval: "1h"
            secretStoreRef: {
              kind: "ClusterSecretStore"
              name: "aws-secretsmanager"
            }
            target: {
              name: parameter.name + "-auth0-credentials"
              creationPolicy: "Owner"
            }
            data: [
              {
                secretKey: "clientId"
                remoteRef: {
                  key: "auth0/credentials"
                  property: "clientId"
                }
              },
              {
                secretKey: "clientSecret"
                remoteRef: {
                  key: "auth0/credentials"
                  property: "clientSecret"
                }
              },
              {
                secretKey: "domain"
                remoteRef: {
                  key: "auth0/credentials"
                  property: "domain"
                }
              },
              {
                secretKey: "audience"
                remoteRef: {
                  key: "auth0/credentials"  
                  property: "audience"
                }
              }
            ]
          }
        }
        
        parameter: {
          // Required
          name: string
        }

---
# Real-time Platform ComponentDefinition
# Architecturally identical to webservice pattern: OAM Component → Knative Service + Infrastructure Claims
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: realtime-platform
  annotations:
    definition.oam.dev/description: "Complete real-time streaming platform with IoT, analytics, and stream processing"
spec:
  workload:
    definition:
      apiVersion: serving.knative.dev/v1
      kind: Service
    type: services.serving.knative.dev
  schematic:
    cue:
      template: |
        // Primary Output: Knative Service (OAM-compliant workload)
        output: {
          apiVersion: "serving.knative.dev/v1"
          kind: "Service"
          metadata: {
            name: parameter.name + "-realtime-service"
            namespace: context.namespace
            labels: {
              "app.kubernetes.io/name": parameter.name
              "app.kubernetes.io/component": "realtime-service"
              "app.kubernetes.io/managed-by": "kubevela"
              "app.kubernetes.io/part-of": "realtime-platform"
            }
            annotations: {
              "realtime-platform.oam.dev/bootstrap": "true"
              "realtime-platform.oam.dev/database": parameter.database
              "realtime-platform.oam.dev/visualization": parameter.visualization
              "realtime-platform.oam.dev/iot": "\\(parameter.iot)"
            }
          }
          spec: {
            template: {
              metadata: {
                annotations: {
                  "autoscaling.knative.dev/minScale": "1"
                  "autoscaling.knative.dev/maxScale": "10"
                  "run.googleapis.com/execution-environment": "gen2"
                }
                labels: {
                  "app.kubernetes.io/name": parameter.name
                  "app.kubernetes.io/version": parameter.version
                  "app.kubernetes.io/part-of": "realtime-platform"
                }
              }
              spec: {
                serviceAccountName: "knative-docker-sa"
                containers: [{
                  image: parameter.image
                  ports: [{
                    containerPort: parameter.port
                    name: "http1"
                  }]
                  resources: {
                    limits: {
                      cpu: parameter.resources.cpu
                      memory: parameter.resources.memory
                    }
                    requests: {
                      cpu: "250m"
                      memory: "512Mi"
                    }
                  }
                  env: [
                    {
                      name: "REALTIME_PLATFORM_NAME"
                      value: parameter.name
                    },
                    {
                      name: "AGENT_TYPE"
                      value: "realtime-data-processor"
                    },
                    {
                      name: "IMPLEMENTATION_TYPE"
                      value: "anthropic"
                    },
                    {
                      name: "LOG_LEVEL"
                      value: "INFO"
                    },
                    {
                      name: "WEBSOCKET_ENABLED"
                      value: "true"
                    }
                  ]
                  if len(parameter.environment) > 0 {
                    env: env + [
                      for k, v in parameter.environment {
                        name: k
                        value: v
                      }
                    ]
                  }
                  if parameter.envFrom != _|_ {
                    envFrom: parameter.envFrom
                  }
                  // Health checks for robust deployment
                  livenessProbe: {
                    httpGet: {
                      path: parameter.healthPath
                      port: parameter.port
                    }
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  }
                  readinessProbe: {
                    httpGet: {
                      path: parameter.healthPath
                      port: parameter.port
                    }
                    initialDelaySeconds: 5
                    periodSeconds: 5
                  }
                }]
              }
            }
          }
        }
        
        // Secondary Output: Infrastructure via RealtimePlatformClaim
        outputs: {
          "realtime-infrastructure": {
            apiVersion: "platform.example.org/v1alpha1"
            kind: "RealtimePlatformClaim"
            metadata: {
              name: parameter.name + "-infrastructure"
              namespace: context.namespace
              labels: {
                "app.kubernetes.io/name": parameter.name
                "app.kubernetes.io/component": "realtime-infrastructure"
                "app.kubernetes.io/part-of": "realtime-platform"
              }
            }
            spec: {
              name: parameter.name
              appContainer: (*parameter.name | parameter.repository)
              database: parameter.database
              visualization: parameter.visualization
              iot: parameter.iot
              if parameter.dataRetention != _|_ {
                dataRetention: parameter.dataRetention
              }
              if parameter.mqttUsers != _|_ {
                mqttUsers: parameter.mqttUsers
              }
            }
          }
        }
        
        parameter: {
          // Required (following webservice pattern)
          name: string
          image: *"socrates12345/realtime-service-template:latest" | string
          
          // Service Configuration
          port: *8080 | int
          version: *"latest" | string
          healthPath: *"/health" | string
          
          // Resource Management
          resources: *{
            cpu: "1000m"
            memory: "2Gi"
          } | {
            cpu?: string
            memory?: string
          }
          
          // Environment Variables
          environment: *{} | {[string]: string}
          
          // Environment Variables from Secrets
          envFrom?: [...{
            secretRef: {
              name: string
            }
          }]
          
          // Realtime Platform Configuration
          database: *"postgres" | "postgres" | "mysql" | "mongodb"
          visualization: *"metabase" | "metabase" | "grafana"
          iot: *true | bool
          
          // Advanced optional
          repository?: string   // Git repository template name (defaults to name)
          dataRetention?: string // "7d", "30d", etc.
          mqttUsers?: [...{
            username: string
            password: string
          }]
        }