apiVersion: batch/v1
kind: CronJob
metadata:
  name: oam-application-analyzer
  namespace: crossplane-system
spec:
  # Run every 2 minutes to monitor for new OAM applications
  schedule: "*/2 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: oam-application-analyzer
          restartPolicy: OnFailure
          nodeSelector:
            eks.amazonaws.com/nodegroup: socrateshlapolosa-karpenter-demo-ng-medium
          containers:
          - name: analyzer
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - -c
            - |
              set -e
              
              # Install curl for GitHub API calls
              apt-get update && apt-get install -y curl
              
              echo "üîç OAM Application Infrastructure Analyzer"
              echo "Time: $(date)"
              echo "=========================================="
              
              # Function to check if a GitHub repository exists
              check_github_repo() {
                local repo_name="$1"
                local org="${GITHUB_ORG:-shlapolosa}"
                
                echo "üîç Checking if GitHub repo exists: $org/$repo_name"
                
                if [ -n "$GITHUB_TOKEN" ]; then
                  local response_code=$(curl -s -o /dev/null -w "%{http_code}" \
                    -H "Authorization: token $GITHUB_TOKEN" \
                    -H "Accept: application/vnd.github.v3+json" \
                    "https://api.github.com/repos/$org/$repo_name")
                  
                  if [ "$response_code" = "200" ]; then
                    echo "‚úÖ Repository $org/$repo_name exists"
                    return 0
                  elif [ "$response_code" = "404" ]; then
                    echo "‚ÑπÔ∏è  Repository $org/$repo_name does not exist"
                    return 1
                  else
                    echo "‚ö†Ô∏è  API error checking repository (HTTP $response_code), assuming it doesn't exist"
                    return 1
                  fi
                else
                  echo "‚ö†Ô∏è  No GitHub token available, assuming repo does not exist"
                  return 1
                fi
              }
              
              # Function to infer language from component properties
              infer_language_framework() {
                local component_yaml="$1"
                local service_name="$2"
                
                local language="python"
                local framework="fastapi"
                
                # Check environment variables for language hints
                if echo "$component_yaml" | grep -A 20 "name: $service_name" | grep -q "JAVA_OPTS\|SERVER_PORT.*8080"; then
                  language="java"
                  framework="springboot"
                elif echo "$component_yaml" | grep -A 20 "name: $service_name" | grep -q "NODE_ENV\|NODE_PATH"; then
                  language="nodejs"
                  framework="express"
                elif echo "$component_yaml" | grep -A 20 "name: $service_name" | grep -q "PYTHONPATH"; then
                  language="python"
                  framework="fastapi"
                fi
                
                # Check image names for language hints
                local image_name=$(echo "$component_yaml" | grep -A 10 "name: $service_name" | grep "image:" | head -1 | awk '{print $2}' | tr -d '"')
                if [[ "$image_name" == *"java"* ]] || [[ "$image_name" == *"spring"* ]]; then
                  language="java"
                  framework="springboot"
                elif [[ "$image_name" == *"python"* ]] || [[ "$image_name" == *"fastapi"* ]]; then
                  language="python"
                  framework="fastapi"
                elif [[ "$image_name" == *"node"* ]]; then
                  language="nodejs"
                  framework="express"
                fi
                
                # Check port numbers for additional hints
                local port=$(echo "$component_yaml" | grep -A 20 "name: $service_name" | grep -E "port:|PORT" | head -1 | grep -o '[0-9]\+')
                if [[ "$port" == "8080" ]]; then
                  language="java"
                  framework="springboot"
                elif [[ "$port" == "8000" ]]; then
                  language="python"
                  framework="fastapi"
                elif [[ "$port" == "3000" ]]; then
                  language="nodejs"
                  framework="express"
                fi
                
                echo "$language,$framework"
              }
              
              # Function to detect database needs
              detect_database_needs() {
                local component_yaml="$1"
                local service_name="$2"
                
                if echo "$component_yaml" | grep -A 20 "name: $service_name" | grep -q "DATABASE_URL\|DB_URL\|POSTGRES\|MYSQL"; then
                  if echo "$component_yaml" | grep -A 20 "name: $service_name" | grep -q "mysql"; then
                    echo "mysql"
                  else
                    echo "postgres"
                  fi
                else
                  echo "none"
                fi
              }
              
              # Function to detect cache needs
              detect_cache_needs() {
                local component_yaml="$1"
                local service_name="$2"
                
                if echo "$component_yaml" | grep -A 20 "name: $service_name" | grep -q "REDIS_URL\|CACHE_URL"; then
                  echo "redis"
                else
                  echo "none"
                fi
              }
              
              # Function to create ApplicationClaim
              create_application_claim() {
                local service_name="$1"
                local namespace="$2"
                local app_container="$3"
                local language="$4"
                local framework="$5"
                local database="$6"
                local cache="$7"
                local source_app="$8"
                
                echo "üèóÔ∏è  Creating ApplicationClaim for: $service_name"
                
                cat <<EOF | kubectl apply -f -
              apiVersion: platform.example.org/v1alpha1
              kind: ApplicationClaim
              metadata:
                name: $service_name
                namespace: $namespace
                annotations:
                  generated-by: "oam-analyzer"
                  generated-at: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
                  source-application: "$source_app"
                labels:
                  generated-by: "oam-analyzer"
              spec:
                appContainer: $app_container
                name: $service_name
                language: $language
                framework: $framework
                database: $database
                cache: $cache
                frontend: false
                exposeApi: false
                messaging: none
                apiEndpoint: /api
              EOF
              }
              
              # Function to create AppContainerClaim
              create_app_container_claim() {
                local container_name="$1"
                local namespace="$2"
                local source_app="$3"
                
                echo "üèóÔ∏è  Creating AppContainerClaim for: $container_name"
                
                cat <<EOF | kubectl apply -f -
              apiVersion: platform.example.org/v1alpha1
              kind: AppContainerClaim
              metadata:
                name: $container_name
                namespace: $namespace
                annotations:
                  generated-by: "oam-analyzer"
                  generated-at: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
                  source-application: "$source_app"
                  webservice.oam.dev/source: "analyzer-driven"
                labels:
                  generated-by: "oam-analyzer"
              spec:
                name: $container_name
                description: "Auto-generated AppContainer for OAM Application: $source_app"
                gitHubOrg: "${GITHUB_ORG:-shlapolosa}"
                dockerRegistry: "${DOCKER_REGISTRY:-docker.io/socrates12345}"
                enableObservability: true
                enableSecurity: true
              EOF
              }
              
              # Function to analyze OAM application
              analyze_oam_application() {
                local app_name="$1"
                local app_namespace="$2"
                
                echo ""
                echo "üìã Analyzing OAM Application: $app_name in namespace: $app_namespace"
                echo "=================================================================="
                
                # Get the application YAML
                local app_yaml=$(kubectl get application.core.oam.dev "$app_name" -n "$app_namespace" -o yaml 2>/dev/null)
                if [ $? -ne 0 ]; then
                  echo "‚ùå Failed to get application $app_name"
                  return 1
                fi
                
                # Check if already processed
                if echo "$app_yaml" | grep -q "processed-by.*oam-analyzer"; then
                  echo "‚úÖ Application $app_name already processed by analyzer"
                  return 0
                fi
                
                # Extract components
                local components=$(echo "$app_yaml" | grep -A 1000 "components:" | grep -E "^  - name:" | awk '{print $3}')
                
                if [ -z "$components" ]; then
                  echo "‚ÑπÔ∏è  No components found in application $app_name"
                  return 0
                fi
                
                echo "üì¶ Found components:"
                echo "$components" | sed 's/^/   - /'
                
                # Check/create AppContainer
                local app_container_name="$app_name"
                if ! kubectl get appcontainerclaim "$app_container_name" -n "$app_namespace" >/dev/null 2>&1; then
                  create_app_container_claim "$app_container_name" "$app_namespace" "$app_name"
                else
                  echo "‚úÖ AppContainerClaim $app_container_name already exists"
                fi
                
                # Process each component
                while read -r component; do
                  if [ -n "$component" ]; then
                    echo ""
                    echo "üîç Processing component: $component"
                    echo "----------------------------------------"
                    
                    # Get component type
                    local component_type=$(echo "$app_yaml" | grep -A 10 "name: $component" | grep "type:" | head -1 | awk '{print $2}')
                    echo "üìã Component type: $component_type"
                    
                    # Only process workload components
                    if [[ "$component_type" == "knative-service" ]] || [[ "$component_type" == "webservice" ]] || [[ "$component_type" == "webservice-fixed" ]]; then
                      
                      # Check if ApplicationClaim already exists
                      if kubectl get applicationclaim "$component" -n "$app_namespace" >/dev/null 2>&1; then
                        echo "‚úÖ ApplicationClaim for $component already exists"
                      else
                        # Check if GitHub repo exists
                        if ! check_github_repo "$component"; then
                          echo "üîç Repository does not exist, creating ApplicationClaim..."
                          
                          # Infer language and framework
                          local lang_fw=$(infer_language_framework "$app_yaml" "$component")
                          local language=$(echo "$lang_fw" | cut -d',' -f1)
                          local framework=$(echo "$lang_fw" | cut -d',' -f2)
                          
                          # Detect infrastructure needs
                          local database=$(detect_database_needs "$app_yaml" "$component")
                          local cache=$(detect_cache_needs "$app_yaml" "$component")
                          
                          # Create the ApplicationClaim
                          create_application_claim "$component" "$app_namespace" "$app_container_name" "$language" "$framework" "$database" "$cache" "$app_name"
                        else
                          echo "‚úÖ Repository for $component already exists"
                        fi
                      fi
                    else
                      echo "‚ÑπÔ∏è  Component $component is infrastructure/config (type: $component_type), skipping"
                    fi
                  fi
                done <<< "$components"
                
                # Mark application as processed
                echo ""
                echo "üìù Marking application $app_name as processed..."
                kubectl annotate application.core.oam.dev "$app_name" -n "$app_namespace" processed-by=oam-analyzer processed-at="$(date -u +%Y-%m-%dT%H:%M:%SZ)" --overwrite
                
                echo "‚úÖ Analysis complete for application: $app_name"
              }
              
              # Main execution
              echo "üöÄ Starting OAM Application monitoring cycle..."
              
              # Check prerequisites
              if ! kubectl version --client >/dev/null 2>&1; then
                echo "‚ùå kubectl not available"
                exit 1
              fi
              
              # Check cluster access
              if ! kubectl get namespaces >/dev/null 2>&1; then
                echo "‚ùå Cannot access Kubernetes cluster"
                exit 1
              fi
              
              # Check for OAM CRDs
              if ! kubectl get crd applications.core.oam.dev >/dev/null 2>&1; then
                echo "‚ö†Ô∏è  OAM Application CRD not found, skipping analysis"
                exit 0
              fi
              
              # Check for Platform CRDs
              if ! kubectl get crd applicationclaims.platform.example.org >/dev/null 2>&1; then
                echo "‚ö†Ô∏è  ApplicationClaim CRD not found, skipping analysis"
                exit 0
              fi
              
              echo "‚úÖ Prerequisites checked"
              
              # Find all OAM Applications
              echo ""
              echo "üîç Scanning for OAM Applications..."
              
              applications=$(kubectl get applications.core.oam.dev --all-namespaces --no-headers 2>/dev/null | awk '{print $1 " " $2}')
              
              if [ -z "$applications" ]; then
                echo "‚ÑπÔ∏è  No OAM Applications found"
                exit 0
              fi
              
              echo "üìã Found OAM Applications:"
              echo "$applications" | sed 's/^/   /'
              
              # Process each application
              while read -r namespace name; do
                if [ -n "$namespace" ] && [ -n "$name" ]; then
                  analyze_oam_application "$name" "$namespace"
                fi
              done <<< "$applications"
              
              echo ""
              echo "üéâ OAM Application monitoring cycle completed!"
              echo "Time: $(date)"
            
            env:
            - name: GITHUB_ORG
              value: "shlapolosa"
            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: github-analyzer-credentials
                  key: token
                  optional: true
            - name: DOCKER_REGISTRY
              value: "docker.io/socrates12345"
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 512Mi
  # Keep only the last 3 successful jobs and 1 failed job
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1