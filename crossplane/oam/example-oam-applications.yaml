# Example OAM Applications that auto-create Crossplane Claims
# These demonstrate how users write simple OAM specs that trigger your existing Crossplane infrastructure

---
# Example 1: Simple Web Application with Database
# This OAM Application will automatically create:
# - VClusterEnvironmentClaim (if not exists)
# - ApplicationClaim for the backend service
# - NeonPostgres claim for database
# - Auth0IDP claim for authentication
apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: user-management-app
  namespace: default
spec:
  components:
  
  # Infrastructure Components (auto-created)
  - name: dev-environment
    type: vcluster
    properties:
      name: user-mgmt-env
      observability: true
      apiGateway: true
      
  - name: user-database
    type: neon-postgres
    properties:
      name: user-db
      namespace: user-mgmt-env
      database: users
      
  - name: auth-provider
    type: auth0-idp
    properties:
      name: user-auth
      namespace: user-mgmt-env
  
  # Application Components (deployed to vCluster)
  - name: user-api
    type: webservice
    properties:
      image: socrates12345/user-api:latest
      language: python
      framework: fastapi
      database: postgres
      exposeApi: true
    traits:
    - type: ingress
      properties:
        domain: api.users.local
        
  policies:
  - name: health-policy
    type: health
    properties:
      probeInterval: 30

---
# Example 2: ML Analytics Pipeline
# Creates a complete ML pipeline with data warehouse and processing
apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: ml-analytics-pipeline
  namespace: default
spec:
  components:
  
  # Infrastructure for ML workloads
  - name: ml-environment
    type: vcluster
    properties:
      name: ml-analytics
      observability: true
      knativeServing: true
      
  - name: data-warehouse
    type: snowflake-datawarehouse
    properties:
      name: analytics
      namespace: ml-analytics
      accountIdentifier: "xy12345.us-east-1"
      warehouseSize: "MEDIUM"
      
  - name: feature-database
    type: neon-postgres
    properties:
      name: features
      namespace: ml-analytics
      database: ml_features
      schema: features
      
  - name: etl-pipeline
    type: data-pipeline
    properties:
      name: feature-extraction
      namespace: ml-analytics
      schedule: "0 2 * * *"  # Daily at 2 AM
      source:
        type: postgres
        connectionSecret: features-db-credentials
      destination:
        type: snowflake
        connectionSecret: analytics-snowflake-connection
  
  # ML Application Components
  - name: model-training
    type: tfjob
    properties:
      image: tensorflow/tensorflow:2.13.0
      replicas: 1
      resources:
        cpu: "2"
        memory: "4Gi"
        
  - name: inference-api
    type: webservice
    properties:
      image: socrates12345/ml-inference:latest
      language: python
      framework: fastapi
      exposeApi: true
    traits:
    - type: autoscaler
      properties:
        minReplicas: 1
        maxReplicas: 10
        targetCPU: 70

---
# Example 3: Microservices with Event Streaming
# Demonstrates multiple services with Kafka integration
apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: event-driven-microservices
  namespace: default
spec:
  components:
  
  # Shared Infrastructure
  - name: microservices-env
    type: vcluster
    properties:
      name: event-driven
      observability: true
      apiGateway: true
      istio: true
      
  - name: shared-auth
    type: auth0-idp
    properties:
      name: microservices-auth
      namespace: event-driven
      
  - name: shared-database
    type: neon-postgres
    properties:
      name: shared-db
      namespace: event-driven
      database: microservices
  
  # Event Streaming
  - name: event-stream
    type: kafka
    properties:
      replicas: 3
      storage: "10Gi"
      
  # Microservice Applications
  - name: user-service
    type: webservice
    properties:
      image: socrates12345/user-service:latest
      language: python
      framework: fastapi
      database: postgres
      exposeApi: true
    traits:
    - type: kafka-producer
      properties:
        topics: ["user-events"]
        
  - name: notification-service
    type: webservice
    properties:
      image: socrates12345/notification-service:latest
      language: python
      framework: fastapi
      cache: redis
    traits:
    - type: kafka-consumer
      properties:
        topics: ["user-events"]
        consumerGroup: "notifications"
        
  - name: analytics-service
    type: webservice
    properties:
      image: socrates12345/analytics-service:latest
      language: java
      framework: springboot
      database: postgres
    traits:
    - type: kafka-consumer
      properties:
        topics: ["user-events"]
        consumerGroup: "analytics"

---
# Example 4: Frontend + Backend + Database Stack
# Complete full-stack application
apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: fullstack-ecommerce
  namespace: default
spec:
  components:
  
  # Infrastructure
  - name: ecommerce-env
    type: vcluster
    properties:
      name: ecommerce
      observability: true
      apiGateway: true
      
  - name: ecommerce-db
    type: neon-postgres
    properties:
      name: ecommerce-db
      namespace: ecommerce
      database: ecommerce
      
  - name: ecommerce-auth
    type: auth0-idp
    properties:
      name: ecommerce-auth
      namespace: ecommerce
  
  # Application Stack
  - name: product-api
    type: webservice
    properties:
      image: socrates12345/product-api:latest
      language: python
      framework: fastapi
      database: postgres
      cache: redis
      exposeApi: true
    traits:
    - type: ingress
      properties:
        domain: api.ecommerce.local
        path: "/api/products"
        
  - name: order-api
    type: webservice
    properties:
      image: socrates12345/order-api:latest
      language: java
      framework: springboot
      database: postgres
      exposeApi: true
    traits:
    - type: ingress
      properties:
        domain: api.ecommerce.local
        path: "/api/orders"
        
  - name: frontend-app
    type: webservice
    properties:
      image: socrates12345/ecommerce-frontend:latest
      language: javascript
      framework: react
      hasFrontend: true
      exposeApi: true
    traits:
    - type: ingress
      properties:
        domain: ecommerce.local
        path: "/"
        
  policies:
  - name: security-policy
    type: security-policy
    properties:
      allowedOrigins: ["https://ecommerce.local"]
      
  - name: scaling-policy
    type: override
    properties:
      components:
      - name: product-api
        traits:
        - type: autoscaler
          properties:
            minReplicas: 2
            maxReplicas: 20