# Custom WorkflowStepDefinitions for OAM â†’ Crossplane Integration
# These enable declarative orchestration between KubeVela and Crossplane

---
# 1. Create Crossplane Claims WorkflowStepDefinition
apiVersion: core.oam.dev/v1beta1
kind: WorkflowStepDefinition
metadata:
  name: create-crossplane-claims
  namespace: vela-system
  annotations:
    definition.oam.dev/description: "Analyzes OAM Application components and creates corresponding Crossplane Claims"
spec:
  schematic:
    cue:
      template: |
        import (
          "vela/op"
          "encoding/json"
        )
        
        // Read the current OAM Application to analyze components
        app: op.#Read & {
          value: {
            apiVersion: "core.oam.dev/v1beta1"
            kind: "Application"
            metadata: {
              name: context.name
              namespace: context.namespace
            }
          }
        }
        
        // Process each component and create appropriate Crossplane Claims
        if app.value.spec.components != _|_ {
          for i, component in app.value.spec.components {
            
            // Handle microservice-with-db components
            if component.type == "microservice-with-db" {
              "create-application-claim-\(i)": op.#Apply & {
                value: {
                  apiVersion: "platform.example.org/v1alpha1"
                  kind: "ApplicationClaim"
                  metadata: {
                    name: component.name
                    namespace: context.namespace
                    labels: {
                      "oam.dev/application": context.name
                      "oam.dev/component": component.name
                      "oam.dev/component-type": component.type
                    }
                  }
                  spec: {
                    name: component.name
                    if component.properties.language != _|_ {
                      language: component.properties.language
                    }
                    if component.properties.framework != _|_ {
                      framework: component.properties.framework
                    }
                    if component.properties.database != _|_ {
                      database: component.properties.database
                    }
                    if component.properties.cache != _|_ {
                      cache: component.properties.cache
                    }
                    if component.properties.exposeApi != _|_ {
                      exposeApi: component.properties.exposeApi
                    }
                    if component.properties.appContainer != _|_ {
                      appContainer: component.properties.appContainer
                    }
                  }
                }
              }
            }
            
            // Handle vcluster components
            if component.type == "vcluster" {
              "create-vcluster-claim-\(i)": op.#Apply & {
                value: {
                  apiVersion: "platform.example.org/v1alpha1"
                  kind: "VClusterEnvironmentClaim"
                  metadata: {
                    name: component.name
                    namespace: context.namespace
                    labels: {
                      "oam.dev/application": context.name
                      "oam.dev/component": component.name
                      "oam.dev/component-type": component.type
                    }
                  }
                  spec: {
                    name: component.name
                    if component.properties.domain != _|_ {
                      domain: component.properties.domain
                    }
                    if component.properties.components != _|_ {
                      components: component.properties.components
                    }
                  }
                }
              }
            }
            
            // Handle app-container components
            if component.type == "app-container" {
              "create-app-container-claim-\(i)": op.#Apply & {
                value: {
                  apiVersion: "platform.example.org/v1alpha1"
                  kind: "AppContainerClaim"
                  metadata: {
                    name: component.name
                    namespace: context.namespace
                    labels: {
                      "oam.dev/application": context.name
                      "oam.dev/component": component.name
                      "oam.dev/component-type": component.type
                    }
                  }
                  spec: {
                    name: component.name
                    if component.properties.description != _|_ {
                      description: component.properties.description
                    }
                    if component.properties.gitHubOrg != _|_ {
                      gitHubOrg: component.properties.gitHubOrg
                    }
                  }
                }
              }
            }
          }
        }
        
        // Output status information
        message: "Created Crossplane Claims for \(len(app.value.spec.components)) components"
        
        parameter: {
          // Optional parameters for the workflow step
          timeout?: *"15m" | string
          retryPolicy?: *"OnFailure" | string
        }

---
# 2. Wait for Claims WorkflowStepDefinition
apiVersion: core.oam.dev/v1beta1
kind: WorkflowStepDefinition
metadata:
  name: wait-for-claims
  namespace: vela-system
  annotations:
    definition.oam.dev/description: "Waits for Crossplane Claims to be Ready before proceeding"
spec:
  schematic:
    cue:
      template: |
        import (
          "vela/op"
          "time"
        )
        
        // Wait for ApplicationClaims to be Ready
        applicationClaims: op.#List & {
          resource: {
            apiVersion: "platform.example.org/v1alpha1"
            kind: "ApplicationClaim"
          }
          filter: {
            namespace: context.namespace
            matchingLabels: {
              "oam.dev/application": context.name
            }
          }
        }
        
        // Wait for VClusterEnvironmentClaims to be Ready
        vclusterClaims: op.#List & {
          resource: {
            apiVersion: "platform.example.org/v1alpha1"
            kind: "VClusterEnvironmentClaim"
          }
          filter: {
            namespace: context.namespace
            matchingLabels: {
              "oam.dev/application": context.name
            }
          }
        }
        
        // Wait for AppContainerClaims to be Ready
        appContainerClaims: op.#List & {
          resource: {
            apiVersion: "platform.example.org/v1alpha1"
            kind: "AppContainerClaim"
          }
          filter: {
            namespace: context.namespace
            matchingLabels: {
              "oam.dev/application": context.name
            }
          }
        }
        
        // Check readiness of ApplicationClaims
        if applicationClaims.list != _|_ && len(applicationClaims.list.items) > 0 {
          for i, claim in applicationClaims.list.items {
            "wait-application-claim-\(i)": op.#ConditionalWait & {
              continue: claim.status != _|_ && 
                       claim.status.conditions != _|_ &&
                       [for cond in claim.status.conditions 
                        if cond.type == "Ready" { cond.status }][0] == "True"
            }
          }
        }
        
        // Check readiness of VClusterEnvironmentClaims
        if vclusterClaims.list != _|_ && len(vclusterClaims.list.items) > 0 {
          for i, claim in vclusterClaims.list.items {
            "wait-vcluster-claim-\(i)": op.#ConditionalWait & {
              continue: claim.status != _|_ && 
                       claim.status.conditions != _|_ &&
                       [for cond in claim.status.conditions 
                        if cond.type == "Ready" { cond.status }][0] == "True"
            }
          }
        }
        
        // Check readiness of AppContainerClaims
        if appContainerClaims.list != _|_ && len(appContainerClaims.list.items) > 0 {
          for i, claim in appContainerClaims.list.items {
            "wait-app-container-claim-\(i)": op.#ConditionalWait & {
              continue: claim.status != _|_ && 
                       claim.status.conditions != _|_ &&
                       [for cond in claim.status.conditions 
                        if cond.type == "Ready" { cond.status }][0] == "True"
            }
          }
        }
        
        // Calculate total claims being waited for
        totalClaims: len(applicationClaims.list.items) + 
                    len(vclusterClaims.list.items) + 
                    len(appContainerClaims.list.items)
        
        message: "Waiting for \(totalClaims) Crossplane Claims to be Ready"
        
        parameter: {
          // Wait timeout - how long to wait for claims to be ready
          timeout?: *"10m" | string
          // Check interval - how often to check claim status
          interval?: *"30s" | string
        }

---
# 3. Cleanup Failed Claims WorkflowStepDefinition
apiVersion: core.oam.dev/v1beta1
kind: WorkflowStepDefinition
metadata:
  name: cleanup-failed-claims
  namespace: vela-system
  annotations:
    definition.oam.dev/description: "Cleans up failed or partially created Crossplane Claims for error recovery"
spec:
  schematic:
    cue:
      template: |
        import (
          "vela/op"
        )
        
        // Find all Claims created by this OAM Application
        applicationClaims: op.#List & {
          resource: {
            apiVersion: "platform.example.org/v1alpha1"
            kind: "ApplicationClaim"
          }
          filter: {
            namespace: context.namespace
            matchingLabels: {
              "oam.dev/application": context.name
            }
          }
        }
        
        vclusterClaims: op.#List & {
          resource: {
            apiVersion: "platform.example.org/v1alpha1"
            kind: "VClusterEnvironmentClaim"
          }
          filter: {
            namespace: context.namespace
            matchingLabels: {
              "oam.dev/application": context.name
            }
          }
        }
        
        appContainerClaims: op.#List & {
          resource: {
            apiVersion: "platform.example.org/v1alpha1"
            kind: "AppContainerClaim"
          }
          filter: {
            namespace: context.namespace
            matchingLabels: {
              "oam.dev/application": context.name
            }
          }
        }
        
        // Delete failed ApplicationClaims
        if applicationClaims.list != _|_ && len(applicationClaims.list.items) > 0 {
          for i, claim in applicationClaims.list.items {
            if claim.status != _|_ && claim.status.conditions != _|_ {
              // Check if claim has failed condition
              failedConditions: [for cond in claim.status.conditions 
                               if cond.type == "Ready" && cond.status == "False" 
                               { cond }]
              if len(failedConditions) > 0 {
                "delete-failed-application-claim-\(i)": op.#Delete & {
                  value: {
                    apiVersion: "platform.example.org/v1alpha1"
                    kind: "ApplicationClaim"
                    metadata: {
                      name: claim.metadata.name
                      namespace: claim.metadata.namespace
                    }
                  }
                }
              }
            }
          }
        }
        
        // Delete failed VClusterEnvironmentClaims
        if vclusterClaims.list != _|_ && len(vclusterClaims.list.items) > 0 {
          for i, claim in vclusterClaims.list.items {
            if claim.status != _|_ && claim.status.conditions != _|_ {
              failedConditions: [for cond in claim.status.conditions 
                               if cond.type == "Ready" && cond.status == "False" 
                               { cond }]
              if len(failedConditions) > 0 {
                "delete-failed-vcluster-claim-\(i)": op.#Delete & {
                  value: {
                    apiVersion: "platform.example.org/v1alpha1"
                    kind: "VClusterEnvironmentClaim"
                    metadata: {
                      name: claim.metadata.name
                      namespace: claim.metadata.namespace
                    }
                  }
                }
              }
            }
          }
        }
        
        // Delete failed AppContainerClaims
        if appContainerClaims.list != _|_ && len(appContainerClaims.list.items) > 0 {
          for i, claim in appContainerClaims.list.items {
            if claim.status != _|_ && claim.status.conditions != _|_ {
              failedConditions: [for cond in claim.status.conditions 
                               if cond.type == "Ready" && cond.status == "False" 
                               { cond }]
              if len(failedConditions) > 0 {
                "delete-failed-app-container-claim-\(i)": op.#Delete & {
                  value: {
                    apiVersion: "platform.example.org/v1alpha1"
                    kind: "AppContainerClaim"
                    metadata: {
                      name: claim.metadata.name
                      namespace: claim.metadata.namespace
                    }
                  }
                }
              }
            }
          }
        }
        
        // Optional: Clean up all claims regardless of status if forced
        if parameter.forceCleanup {
          for i, claim in applicationClaims.list.items {
            "force-delete-application-claim-\(i)": op.#Delete & {
              value: {
                apiVersion: "platform.example.org/v1alpha1"
                kind: "ApplicationClaim"
                metadata: {
                  name: claim.metadata.name
                  namespace: claim.metadata.namespace
                }
              }
            }
          }
          
          for i, claim in vclusterClaims.list.items {
            "force-delete-vcluster-claim-\(i)": op.#Delete & {
              value: {
                apiVersion: "platform.example.org/v1alpha1"
                kind: "VClusterEnvironmentClaim"
                metadata: {
                  name: claim.metadata.name
                  namespace: claim.metadata.namespace
                }
              }
            }
          }
          
          for i, claim in appContainerClaims.list.items {
            "force-delete-app-container-claim-\(i)": op.#Delete & {
              value: {
                apiVersion: "platform.example.org/v1alpha1"
                kind: "AppContainerClaim"
                metadata: {
                  name: claim.metadata.name
                  namespace: claim.metadata.namespace
                }
              }
            }
          }
        }
        
        message: "Cleanup completed for failed Claims"
        
        parameter: {
          // Force cleanup of all claims regardless of status
          forceCleanup?: *false | bool
          // Grace period for deletion
          gracePeriodSeconds?: *30 | int
        }