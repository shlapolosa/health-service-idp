# OAM ComponentDefinitions for Application Components
# These define workload components that deploy to existing vCluster environments

---
# 1. WebService Component Definition
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: webservice
  annotations:
    definition.oam.dev/description: "Web service application with optional database and cache"
spec:
  workload:
    definition:
      apiVersion: platform.example.org/v1alpha1
      kind: ApplicationClaim
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "platform.example.org/v1alpha1"
          kind: "ApplicationClaim"
          metadata: {
            name: parameter.name + "-app"
          }
          spec: {
            name: parameter.name
            language: parameter.language
            framework: parameter.framework
            if parameter.hasFrontend {
              hasFrontend: parameter.hasFrontend
            }
            if parameter.database != _|_ {
              database: parameter.database
            }
            if parameter.cache != _|_ {
              cache: parameter.cache
            }
            if parameter.exposeApi {
              exposeApi: parameter.exposeApi
            }
            if parameter.image != _|_ {
              image: parameter.image
            }
            if parameter.port != _|_ {
              port: parameter.port
            }
            resources: {
              if parameter.resources.cpu != _|_ {
                cpu: parameter.resources.cpu
              }
              if parameter.resources.memory != _|_ {
                memory: parameter.resources.memory
              }
            }
            environment: parameter.environment
          }
        }
        
        parameter: {
          // Required
          name: string
          language: "python" | "java" | "javascript" | "go"
          framework: string
          
          // Optional
          image?: string
          port?: int
          database?: "postgres" | "mysql" | "mongodb"
          cache?: "redis" | "memcached"
          hasFrontend: *false | bool
          exposeApi: *true | bool
          environment: *{} | {...}
          resources: *{
            cpu: "500m"
            memory: "512Mi"
          } | {
            cpu?: string
            memory?: string
          }
        }

---
# 2. Kafka Component Definition
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: kafka
  annotations:
    definition.oam.dev/description: "Apache Kafka event streaming platform"
spec:
  workload:
    definition:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "helm.crossplane.io/v1beta1"
          kind: "Release"
          metadata: {
            name: parameter.name + "-kafka"
          }
          spec: {
            forProvider: {
              chart: {
                name: "kafka"
                repository: "https://charts.bitnami.com/bitnami"
                version: "26.8.5"
              }
              namespace: parameter.namespace
              skipCreateNamespace: false
              values: {
                replicaCount: parameter.replicas
                persistence: {
                  enabled: true
                  size: parameter.storage
                }
                service: {
                  type: "ClusterIP"
                }
                auth: {
                  clientProtocol: "plaintext"
                  interBrokerProtocol: "plaintext"
                }
                metrics: {
                  kafka: {
                    enabled: true
                  }
                  jmx: {
                    enabled: true
                  }
                }
                if parameter.zookeeper.enabled {
                  zookeeper: {
                    enabled: true
                    replicaCount: parameter.zookeeper.replicas
                    persistence: {
                      enabled: true
                      size: parameter.zookeeper.storage
                    }
                  }
                }
              }
            }
            providerConfigRef: {
              name: "default"
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          namespace: string
          
          // Optional
          replicas: *3 | int
          storage: *"10Gi" | string
          zookeeper: *{
            enabled: true
            replicas: 3
            storage: "8Gi"
          } | {
            enabled: bool
            replicas?: int
            storage?: string
          }
        }

---
# 3. TensorFlow Job Component Definition
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: tfjob
  annotations:
    definition.oam.dev/description: "TensorFlow training job for machine learning workloads"
spec:
  workload:
    definition:
      apiVersion: kubeflow.org/v1
      kind: TFJob
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "kubeflow.org/v1"
          kind: "TFJob"
          metadata: {
            name: parameter.name + "-tfjob"
            namespace: parameter.namespace
          }
          spec: {
            tfReplicaSpecs: {
              if parameter.distributed {
                Chief: {
                  replicas: 1
                  restartPolicy: "OnFailure"
                  template: {
                    spec: {
                      containers: [{
                        name: "tensorflow"
                        image: parameter.image
                        if parameter.command != _|_ {
                          command: parameter.command
                        }
                        if parameter.args != _|_ {
                          args: parameter.args
                        }
                        resources: {
                          requests: {
                            cpu: parameter.resources.cpu
                            memory: parameter.resources.memory
                          }
                          limits: {
                            cpu: parameter.resources.cpu
                            memory: parameter.resources.memory
                            if parameter.resources.gpu != _|_ {
                              "nvidia.com/gpu": parameter.resources.gpu
                            }
                          }
                        }
                        if parameter.env != _|_ {
                          env: [ for k, v in parameter.env {
                            name: k
                            value: v
                          }]
                        }
                        if parameter.volumeMounts != _|_ {
                          volumeMounts: parameter.volumeMounts
                        }
                      }]
                      if parameter.volumes != _|_ {
                        volumes: parameter.volumes
                      }
                    }
                  }
                }
                Worker: {
                  replicas: parameter.replicas - 1
                  restartPolicy: "OnFailure"
                  template: {
                    spec: {
                      containers: [{
                        name: "tensorflow"
                        image: parameter.image
                        if parameter.command != _|_ {
                          command: parameter.command
                        }
                        if parameter.args != _|_ {
                          args: parameter.args
                        }
                        resources: {
                          requests: {
                            cpu: parameter.resources.cpu
                            memory: parameter.resources.memory
                          }
                          limits: {
                            cpu: parameter.resources.cpu
                            memory: parameter.resources.memory
                            if parameter.resources.gpu != _|_ {
                              "nvidia.com/gpu": parameter.resources.gpu
                            }
                          }
                        }
                        if parameter.env != _|_ {
                          env: [ for k, v in parameter.env {
                            name: k
                            value: v
                          }]
                        }
                        if parameter.volumeMounts != _|_ {
                          volumeMounts: parameter.volumeMounts
                        }
                      }]
                      if parameter.volumes != _|_ {
                        volumes: parameter.volumes
                      }
                    }
                  }
                }
              }
              if !parameter.distributed {
                Worker: {
                  replicas: parameter.replicas
                  restartPolicy: "OnFailure"
                  template: {
                    spec: {
                      containers: [{
                        name: "tensorflow"
                        image: parameter.image
                        if parameter.command != _|_ {
                          command: parameter.command
                        }
                        if parameter.args != _|_ {
                          args: parameter.args
                        }
                        resources: {
                          requests: {
                            cpu: parameter.resources.cpu
                            memory: parameter.resources.memory
                          }
                          limits: {
                            cpu: parameter.resources.cpu
                            memory: parameter.resources.memory
                            if parameter.resources.gpu != _|_ {
                              "nvidia.com/gpu": parameter.resources.gpu
                            }
                          }
                        }
                        if parameter.env != _|_ {
                          env: [ for k, v in parameter.env {
                            name: k
                            value: v
                          }]
                        }
                        if parameter.volumeMounts != _|_ {
                          volumeMounts: parameter.volumeMounts
                        }
                      }]
                      if parameter.volumes != _|_ {
                        volumes: parameter.volumes
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          namespace: string
          image: string
          
          // Optional
          replicas: *1 | int
          distributed: *false | bool
          command?: [...string]
          args?: [...string]
          env?: [string]: string
          resources: *{
            cpu: "1000m"
            memory: "2Gi"
          } | {
            cpu: string
            memory: string
            gpu?: string
          }
          volumes?: [...]
          volumeMounts?: [...]
        }

---
# 4. Redis Component Definition
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: redis
  annotations:
    definition.oam.dev/description: "Redis in-memory data store"
spec:
  workload:
    definition:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "helm.crossplane.io/v1beta1"
          kind: "Release"
          metadata: {
            name: parameter.name + "-redis"
          }
          spec: {
            forProvider: {
              chart: {
                name: "redis"
                repository: "https://charts.bitnami.com/bitnami"
                version: "18.19.4"
              }
              namespace: parameter.namespace
              skipCreateNamespace: false
              values: {
                architecture: parameter.architecture
                auth: {
                  enabled: parameter.auth.enabled
                  if parameter.auth.enabled {
                    password: parameter.auth.password
                  }
                }
                master: {
                  persistence: {
                    enabled: true
                    size: parameter.storage
                  }
                  resources: {
                    requests: {
                      cpu: parameter.resources.cpu
                      memory: parameter.resources.memory
                    }
                    limits: {
                      cpu: parameter.resources.cpu
                      memory: parameter.resources.memory
                    }
                  }
                }
                if parameter.architecture == "replication" {
                  replica: {
                    replicaCount: parameter.replicas
                    persistence: {
                      enabled: true
                      size: parameter.storage
                    }
                    resources: {
                      requests: {
                        cpu: parameter.resources.cpu
                        memory: parameter.resources.memory
                      }
                      limits: {
                        cpu: parameter.resources.cpu
                        memory: parameter.resources.memory
                      }
                    }
                  }
                }
                metrics: {
                  enabled: true
                  serviceMonitor: {
                    enabled: true
                  }
                }
              }
            }
            providerConfigRef: {
              name: "default"
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          namespace: string
          
          // Optional
          architecture: *"standalone" | "replication"
          replicas: *2 | int
          storage: *"8Gi" | string
          auth: *{
            enabled: false
          } | {
            enabled: bool
            password?: string
          }
          resources: *{
            cpu: "100m"
            memory: "128Mi"
          } | {
            cpu: string
            memory: string
          }
        }

---
# 5. MongoDB Component Definition
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: mongodb
  annotations:
    definition.oam.dev/description: "MongoDB document database"
spec:
  workload:
    definition:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "helm.crossplane.io/v1beta1"
          kind: "Release"
          metadata: {
            name: parameter.name + "-mongodb"
          }
          spec: {
            forProvider: {
              chart: {
                name: "mongodb"
                repository: "https://charts.bitnami.com/bitnami"
                version: "15.6.13"
              }
              namespace: parameter.namespace
              skipCreateNamespace: false
              values: {
                architecture: parameter.architecture
                auth: {
                  enabled: parameter.auth.enabled
                  if parameter.auth.enabled {
                    rootPassword: parameter.auth.rootPassword
                    username: parameter.auth.username
                    password: parameter.auth.password
                    database: parameter.auth.database
                  }
                }
                persistence: {
                  enabled: true
                  size: parameter.storage
                }
                resources: {
                  requests: {
                    cpu: parameter.resources.cpu
                    memory: parameter.resources.memory
                  }
                  limits: {
                    cpu: parameter.resources.cpu
                    memory: parameter.resources.memory
                  }
                }
                if parameter.architecture == "replicaset" {
                  replicaCount: parameter.replicas
                  replicaSetName: parameter.name + "-rs"
                }
                metrics: {
                  enabled: true
                  serviceMonitor: {
                    enabled: true
                  }
                }
              }
            }
            providerConfigRef: {
              name: "default"
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          namespace: string
          
          // Optional
          architecture: *"standalone" | "replicaset"
          replicas: *3 | int
          storage: *"8Gi" | string
          auth: *{
            enabled: true
            rootPassword: "mongopass"
            username: "mongodb"
            password: "mongodb"
            database: "mydb"
          } | {
            enabled: bool
            rootPassword?: string
            username?: string
            password?: string
            database?: string
          }
          resources: *{
            cpu: "500m"
            memory: "512Mi"
          } | {
            cpu: string
            memory: string
          }
        }