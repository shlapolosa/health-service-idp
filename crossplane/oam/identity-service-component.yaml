# Identity Service ComponentDefinition
# Generates domain-specific Spring Boot identity services via Argo Workflows
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: identity-service
  annotations:
    definition.oam.dev/description: "Domain-specific identity and access management service generator using Spring Boot templates"
spec:
  workload:
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Workflow
    type: workflows.argoproj.io
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "argoproj.io/v1alpha1"
          kind: "Workflow"
          metadata: {
            generateName: context.name + "-identity-gen-"
            namespace: context.namespace
            labels: {
              "app.kubernetes.io/name": context.name
              "app.kubernetes.io/component": "identity-service"
              "app.kubernetes.io/managed-by": "oam"
              "identity.platform/domain": parameter.domain
            }
          }
          spec: {
            serviceAccountName: "argo-workflow"
            workflowTemplateRef: {
              name: "identity-service-generator"
            }
            arguments: {
              parameters: [
                {name: "domain", value: parameter.domain},
                {name: "repo-name", value: context.name + "-identity-service"},
                {name: "app-name", value: context.name},
                {name: "github-owner", value: parameter.githubOwner}
              ]
            }
          }
        }
        
        outputs: {
          "service-metadata": {
            apiVersion: "v1"
            kind: "ConfigMap"
            metadata: {
              name: context.name + "-identity-metadata"
              namespace: context.namespace
              labels: {
                "app.kubernetes.io/name": context.name
                "app.kubernetes.io/component": "identity-service"
                "identity.platform/domain": parameter.domain
              }
            }
            data: {
              "domain": parameter.domain
              "repository": parameter.githubOwner + "/" + context.name + "-identity-service"
              "language": "java"
              "framework": "spring-boot"
              "profiles": "Patient,Physician,Nurse,Administrator,Customer,Banker,Student,Teacher"
              "compliance": "HIPAA,HITECH,GDPR,PCI-DSS,SOX,FERPA"
              "integrations": "fhir,hl7,kafka,kyc,lms,sis"
            }
          }
          "service-placeholder": {
            apiVersion: "v1"
            kind: "Service"
            metadata: {
              name: context.name + "-identity"
              namespace: context.namespace
              labels: {
                "app.kubernetes.io/name": context.name
                "app.kubernetes.io/component": "identity-service"
                "identity.platform/domain": parameter.domain
              }
              annotations: {
                "identity.platform/repository": parameter.githubOwner + "/" + context.name + "-identity-service"
                "identity.platform/status": "pending-generation"
              }
            }
            spec: {
              type: "ClusterIP"
              selector: {
                "app.kubernetes.io/name": context.name + "-identity"
              }
              ports: [{
                name: "http"
                port: 8080
                targetPort: 8080
                protocol: "TCP"
              }]
            }
          }
        }
        
        parameter: {
          domain: *"healthcare" | "healthcare" | "financial" | "education"
          githubOwner: *"shlapolosa" | string
          customProfiles?: [...string]
          additionalIntegrations?: [...string]
          javaVersion?: *"21" | string
          springBootVersion?: *"3.2.0" | string
          database?: *{
            type: "postgresql"
            provision: true
          } | {
            type: string
            provision: bool
          }
          redis?: *{
            enabled: true
            provision: true
          } | {
            enabled: bool
            provision: bool
          }
        }