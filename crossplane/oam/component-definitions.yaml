# OAM ComponentDefinitions for Infrastructure Components
# These define the interface for infrastructure components that will be provisioned via Crossplane

---
# 1. VCluster Component Definition
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: vcluster
  annotations:
    definition.oam.dev/description: "Virtual Kubernetes cluster with optional components"
spec:
  workload:
    definition:
      apiVersion: platform.example.org/v1alpha1
      kind: VClusterEnvironmentClaim
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "platform.example.org/v1alpha1"
          kind: "VClusterEnvironmentClaim"
          metadata: {
            name: parameter.name
          }
          spec: {
            name: parameter.name
            if parameter.domain != _|_ {
              domain: parameter.domain
            }
            components: {
              istio: parameter.istio
              knativeServing: parameter.knativeServing
              argoCD: parameter.argoCD
              if parameter.observability {
                grafana: true
                prometheus: true
                jaeger: true
                kiali: true
              }
              if parameter.apiGateway {
                apiGateway: true
              }
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          domain?: string
          istio: *true | bool
          knativeServing: *true | bool
          argoCD: *true | bool
          observability: *true | bool
          apiGateway: *false | bool
        }

---
# 2. AWS API Gateway Component Definition  
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: aws-apigateway
  annotations:
    definition.oam.dev/description: "AWS API Gateway for external service access"
spec:
  workload:
    definition:
      apiVersion: apigatewayv2.aws.upbound.io/v1beta1
      kind: API
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "kubernetes.crossplane.io/v1alpha1"
          kind: "Object"
          metadata: {
            name: parameter.name + "-api-gateway"
          }
          spec: {
            forProvider: {
              manifest: {
                apiVersion: "apigatewayv2.aws.upbound.io/v1beta1"
                kind: "API"
                metadata: {
                  name: parameter.name + "-api"
                }
                spec: {
                  forProvider: {
                    name: parameter.name + "-api"
                    protocolType: "HTTP"
                    description: parameter.description
                    if parameter.cors {
                      corsConfiguration: [{
                        allowCredentials: false
                        allowHeaders: ["*"]
                        allowMethods: ["*"]
                        allowOrigins: parameter.corsOrigins
                        maxAge: 86400
                      }]
                    }
                    tags: {
                      Environment: parameter.environment
                      ManagedBy: "crossplane-oam"
                      Application: parameter.name
                    }
                  }
                  providerConfigRef: {
                    name: "default"
                  }
                }
              }
            }
            providerConfigRef: {
              name: "default"
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          
          // Optional
          description: *"OAM-managed API Gateway" | string
          environment: *"development" | string
          cors: *true | bool
          corsOrigins: *["*"] | [...string]
        }

---
# 3. Neon Postgres Component Definition
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: neon-postgres
  annotations:
    definition.oam.dev/description: "Neon PostgreSQL managed database"
spec:
  workload:
    definition:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "external-secrets.io/v1beta1"
          kind: "ExternalSecret"
          metadata: {
            name: parameter.name + "-neon-sync"
            namespace: parameter.namespace
          }
          spec: {
            refreshInterval: "1h"
            secretStoreRef: {
              kind: "ClusterSecretStore"
              name: "aws-secretsmanager"
            }
            target: {
              name: parameter.name + "-db-credentials"
              creationPolicy: "Owner"
            }
            data: [
              {
                secretKey: "PGHOST"
                remoteRef: {
                  key: "neon-postgres/credentials"
                  property: "PGHOST"
                }
              },
              {
                secretKey: "PGUSER"  
                remoteRef: {
                  key: "neon-postgres/credentials"
                  property: "PGUSER"
                }
              },
              {
                secretKey: "PGPASSWORD"
                remoteRef: {
                  key: "neon-postgres/credentials"
                  property: "PGPASSWORD"
                }
              },
              {
                secretKey: "PGDATABASE"
                value: parameter.database
              },
              {
                secretKey: "PGPORT"
                value: "5432"
              },
              {
                secretKey: "DATABASE_URL"
                remoteRef: {
                  key: "neon-postgres/credentials"
                  property: "DATABASE_URL"
                }
              }
            ]
          }
        }
        
        parameter: {
          // Required
          name: string
          namespace: string
          
          // Optional
          database: *"postgres" | string
        }

---
# 4. Auth0 Identity Provider Component Definition
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: auth0-idp
  annotations:
    definition.oam.dev/description: "Auth0 identity provider integration"
spec:
  workload:
    definition:
      apiVersion: external-secrets.io/v1beta1
      kind: ExternalSecret
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "external-secrets.io/v1beta1"
          kind: "ExternalSecret"
          metadata: {
            name: parameter.name + "-auth0-credentials"
            namespace: parameter.namespace
          }
          spec: {
            refreshInterval: "1h"
            secretStoreRef: {
              kind: "ClusterSecretStore"
              name: "aws-secretsmanager"
            }
            target: {
              name: parameter.name + "-auth0-credentials"
              creationPolicy: "Owner"
            }
            data: [
              {
                secretKey: "clientId"
                remoteRef: {
                  key: "auth0/credentials"
                  property: "clientId"
                }
              },
              {
                secretKey: "clientSecret"
                remoteRef: {
                  key: "auth0/credentials"
                  property: "clientSecret"
                }
              },
              {
                secretKey: "domain"
                remoteRef: {
                  key: "auth0/credentials"
                  property: "domain"
                }
              },
              {
                secretKey: "audience"
                remoteRef: {
                  key: "auth0/credentials"  
                  property: "audience"
                }
              }
            ]
          }
        }
        
        parameter: {
          // Required
          name: string
          namespace: string
        }

---
# 5. Karpenter NodePool Component Definition
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: karpenter-nodepool
  annotations:
    definition.oam.dev/description: "Karpenter NodePool for dynamic compute provisioning"
spec:
  workload:
    definition:
      apiVersion: karpenter.sh/v1beta1
      kind: NodePool
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "karpenter.sh/v1beta1"
          kind: "NodePool"
          metadata: {
            name: parameter.name + "-nodepool"
          }
          spec: {
            template: {
              metadata: {
                labels: {
                  "workload-type": parameter.workloadType
                  "managed-by": "crossplane-oam"
                }
                if parameter.workloadType == "vcluster" {
                  annotations: {
                    "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
                  }
                }
              }
              spec: {
                requirements: [
                  {
                    key: "kubernetes.io/arch"
                    operator: "In"
                    values: ["amd64"]
                  },
                  {
                    key: "karpenter.sh/capacity-type"
                    operator: "In"
                    values: parameter.capacityTypes
                  },
                  {
                    key: "node.kubernetes.io/instance-type"
                    operator: "In"
                    values: parameter.instanceTypes
                  }
                ]
                if parameter.workloadType == "vcluster" {
                  taints: [
                    {
                      key: "workload-type"
                      value: "vcluster"
                      effect: "NoSchedule"
                    }
                  ]
                }
                nodeClassRef: {
                  apiVersion: "karpenter.k8s.aws/v1beta1"
                  kind: "EC2NodeClass"
                  name: parameter.nodeClass
                }
              }
            }
            disruption: {
              consolidationPolicy: parameter.consolidationPolicy
              consolidateAfter: parameter.consolidateAfter
            }
            limits: {
              cpu: parameter.maxCPU
              memory: parameter.maxMemory
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          workloadType: "vcluster" | "application" | "ml"
          
          // Optional
          capacityTypes: *["spot", "on-demand"] | [...string]
          instanceTypes: *["t3.medium", "t3.large", "m5.large"] | [...string]
          nodeClass: *"default" | string
          consolidationPolicy: *"WhenUnderutilized" | "WhenEmpty"
          consolidateAfter: *"30s" | string
          maxCPU: *"1000" | string
          maxMemory: *"1000Gi" | string
        }

---
# 6. Snowflake Data Warehouse Component Definition
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: snowflake-datawarehouse
  annotations:
    definition.oam.dev/description: "Snowflake data warehouse integration"
spec:
  workload:
    definition:
      apiVersion: tf.crossplane.io/v1alpha1
      kind: Workspace
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "tf.crossplane.io/v1alpha1"
          kind: "Workspace"
          metadata: {
            name: parameter.name + "-snowflake"
          }
          spec: {
            forProvider: {
              source: "Inline"
              module: """
                terraform {
                  required_providers {
                    snowflake = {
                      source = "Snowflake-Labs/snowflake"
                      version = "~> 0.87"
                    }
                  }
                }
                
                variable "warehouse_name" {
                  description = "Name of the Snowflake warehouse"
                  type        = string
                }
                
                variable "database_name" {
                  description = "Name of the Snowflake database"
                  type        = string
                }
                
                variable "warehouse_size" {
                  description = "Size of the Snowflake warehouse"
                  type        = string
                  default     = "X-SMALL"
                }
                
                resource "snowflake_warehouse" "warehouse" {
                  name           = var.warehouse_name
                  warehouse_size = var.warehouse_size
                  auto_suspend   = 60
                  auto_resume    = true
                  initially_suspended = true
                }
                
                resource "snowflake_database" "database" {
                  name = var.database_name
                }
                
                resource "snowflake_schema" "schema" {
                  database = snowflake_database.database.name
                  name     = "PUBLIC"
                }
                
                output "warehouse_name" {
                  value = snowflake_warehouse.warehouse.name
                }
                
                output "database_name" {
                  value = snowflake_database.database.name
                }
                
                output "account_url" {
                  value = "https://${var.account_identifier}.snowflakecomputing.com"
                }
                """
              vars: [
                {
                  key: "warehouse_name"
                  value: parameter.name + "_WAREHOUSE"
                },
                {
                  key: "database_name"
                  value: parameter.name + "_DB"
                },
                {
                  key: "warehouse_size"
                  value: parameter.warehouseSize
                },
                {
                  key: "account_identifier"
                  value: parameter.accountIdentifier
                }
              ]
            }
            writeConnectionSecretsToNamespace: parameter.namespace
            providerConfigRef: {
              name: "terraform-snowflake"
            }
          }
        }
        
        parameter: {
          // Required
          name: string
          namespace: string
          accountIdentifier: string
          
          // Optional
          warehouseSize: *"X-SMALL" | "SMALL" | "MEDIUM" | "LARGE" | "X-LARGE"
        }