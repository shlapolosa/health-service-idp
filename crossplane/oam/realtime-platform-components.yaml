# Realtime Platform ComponentDefinition
# Provides an ultra-minimal developer interface for the complete realtime streaming stack

---
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: realtime-platform
  namespace: vela-system
  annotations:
    definition.oam.dev/description: "Ultra-minimal developer interface for real-time streaming platform (Kafka + MQTT + Lenses + Metabase)"
spec:
  workload:
    definition:
      apiVersion: platform.example.org/v1alpha1
      kind: ApplicationClaim
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "platform.example.org/v1alpha1"
          kind: "ApplicationClaim"
          metadata: {
            name: parameter.name + "-realtime-platform"
            labels: {
              "app.oam.dev/component": "realtime-platform"
              "app.oam.dev/name": parameter.name
            }
          }
          spec: {
            name: parameter.name + "-platform"
            language: "python"
            framework: "fastapi"
            
            // Enable realtime capabilities via the existing composition
            realtime: parameter.name
            
            // Platform configuration
            environment: {
              REALTIME_PLATFORM_NAME: parameter.name
              DATABASE_TYPE: parameter.database
              VISUALIZATION_TYPE: parameter.visualization
              IOT_ENABLED: "\(parameter.iot)"
              PLATFORM_MODE: "infrastructure"
              
              // Lenses configuration
              if parameter.lensesConfig != _|_ {
                LENSES_LICENSE_KEY: parameter.lensesConfig.licenseKey
                LENSES_HEAP_SIZE: parameter.lensesConfig.heapSize
              }
              
              // MQTT configuration
              if parameter.mqttConfig != _|_ {
                MQTT_USERS: "\(parameter.mqttConfig.users)"
                MQTT_PERSISTENCE_SIZE: parameter.mqttConfig.persistenceSize
              }
              
              // Kafka configuration
              if parameter.kafkaConfig != _|_ {
                KAFKA_TOPICS: "\(parameter.kafkaConfig.topics)"
                KAFKA_RETENTION: parameter.kafkaConfig.retention
              }
            }
            
            // Resource allocation for platform components
            resources: {
              if parameter.resources != _|_ {
                cpu: parameter.resources.cpu
                memory: parameter.resources.memory
              }
              if parameter.resources == _|_ {
                cpu: "2000m"
                memory: "4Gi"
              }
            }
          }
        }
        
        parameter: {
          // Required parameters
          name: string & =~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$" & len(<=63)
          
          // Optional parameters with sensible defaults
          database: *"postgres" | "postgres" | "mysql"
          visualization: *"metabase" | "metabase" | "grafana"
          iot: *true | bool
          
          // Advanced configuration (optional)
          lensesConfig?: {
            licenseKey?: string
            heapSize: *"1536m" | string
            enableUI: *true | bool
          }
          
          mqttConfig?: {
            users?: [...{
              username: string
              password: string
            }]
            persistenceSize: *"5Gi" | string
            enableWebSockets: *true | bool
            qosLevel: *1 | 0 | 1 | 2
          }
          
          kafkaConfig?: {
            topics?: [...string]
            retention: *"24h" | string
            partitions: *3 | int
            replicationFactor: *1 | int
          }
          
          snowflakeConfig?: {
            enabled: *false | bool
            credentialsSecret?: string
            database?: string
            schema?: string
          }
          
          resources?: {
            cpu?: string
            memory?: string
          }
          
          scaling?: {
            minReplicas: *1 | int
            maxReplicas: *3 | int
            targetCPU: *70 | int
          }
        }

---
# IoT Broker ComponentDefinition
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: iot-broker
  namespace: vela-system
  annotations:
    definition.oam.dev/description: "MQTT broker for IoT device connectivity with automatic Kafka integration"
spec:
  workload:
    definition:
      apiVersion: platform.example.org/v1alpha1
      kind: ApplicationClaim
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "platform.example.org/v1alpha1"
          kind: "ApplicationClaim"
          metadata: {
            name: parameter.name + "-iot-broker"
            labels: {
              "app.oam.dev/component": "iot-broker"
              "app.oam.dev/name": parameter.name
            }
          }
          spec: {
            name: parameter.name + "-mqtt"
            language: "python"
            framework: "fastapi"
            
            // IoT broker specific configuration
            environment: {
              IOT_BROKER_NAME: parameter.name
              MQTT_PORT: "\(parameter.mqttPort)"
              WEBSOCKET_PORT: "\(parameter.websocketPort)"
              AUTHENTICATION_ENABLED: "\(parameter.authentication.enabled)"
              
              if parameter.authentication.enabled {
                MQTT_USERS: "\(parameter.authentication.users)"
              }
              
              if parameter.topics != _|_ {
                MQTT_TOPICS: "\(parameter.topics)"
              }
              
              if parameter.connector != _|_ {
                KAFKA_INTEGRATION: "\(parameter.connector.enabled)"
                KAFKA_TOPIC: parameter.connector.kafkaTopic
                SOURCE_TOPIC: parameter.connector.mqttTopic
              }
            }
            
            resources: {
              cpu: "500m"
              memory: "512Mi"
            }
          }
        }
        
        parameter: {
          // Required parameters
          name: string & =~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          
          // MQTT Configuration
          mqttPort: *1883 | int
          websocketPort: *9001 | int
          
          // Authentication
          authentication: {
            enabled: *true | bool
            users?: [...{
              username: string
              password: string
            }]
          }
          
          // Topic configuration
          topics?: [...string]
          
          // Kafka connector configuration
          connector?: {
            enabled: *true | bool
            kafkaTopic: string
            mqttTopic: string
            keyField: *"deviceId" | string
            qos: *1 | int
            errorPolicy: *"RETRY" | "RETRY" | "IGNORE" | "FAIL"
          }
          
          // Persistence
          persistence?: {
            enabled: *true | bool
            size: *"5Gi" | string
          }
        }

---
# Stream Processing ComponentDefinition
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: stream-processor
  namespace: vela-system
  annotations:
    definition.oam.dev/description: "Lenses-based stream processing component for real-time data transformation"
spec:
  workload:
    definition:
      apiVersion: platform.example.org/v1alpha1
      kind: ApplicationClaim
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "platform.example.org/v1alpha1"
          kind: "ApplicationClaim"
          metadata: {
            name: parameter.name + "-stream-processor"
            labels: {
              "app.oam.dev/component": "stream-processor"
              "app.oam.dev/name": parameter.name
            }
          }
          spec: {
            name: parameter.name + "-processor"
            language: "python"
            framework: "fastapi"
            
            // Stream processing configuration
            environment: {
              PROCESSOR_NAME: parameter.name
              LENSES_MODE: "processor"
              
              if parameter.queries != _|_ {
                STREAM_QUERIES: "\(parameter.queries)"
              }
              
              if parameter.topics != _|_ {
                INPUT_TOPICS: "\(parameter.topics.input)"
                OUTPUT_TOPICS: "\(parameter.topics.output)"
              }
              
              if parameter.errorHandling != _|_ {
                ERROR_POLICY: parameter.errorHandling.policy
                RETRY_ATTEMPTS: "\(parameter.errorHandling.retries)"
              }
            }
            
            resources: {
              cpu: "1000m"
              memory: "2Gi"
            }
          }
        }
        
        parameter: {
          // Required parameters
          name: string & =~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          
          // Stream processing queries
          queries?: [...{
            name: string
            sql: string
            enabled: *true | bool
          }]
          
          // Topic configuration
          topics?: {
            input: [...string]
            output: [...string]
          }
          
          // Error handling
          errorHandling?: {
            policy: *"RETRY" | "RETRY" | "IGNORE" | "DEAD_LETTER"
            retries: *3 | int
            deadLetterTopic?: string
          }
          
          // Processing configuration
          processing?: {
            parallelism: *1 | int
            checkpointInterval: *"30s" | string
            stateBackend: *"memory" | "memory" | "rocksdb"
          }
        }

---
# Analytics Dashboard ComponentDefinition
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: analytics-dashboard
  namespace: vela-system
  annotations:
    definition.oam.dev/description: "Analytics dashboard component (Metabase/Grafana) for real-time data visualization"
spec:
  workload:
    definition:
      apiVersion: platform.example.org/v1alpha1
      kind: ApplicationClaim
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "platform.example.org/v1alpha1"
          kind: "ApplicationClaim"
          metadata: {
            name: parameter.name + "-analytics"
            labels: {
              "app.oam.dev/component": "analytics-dashboard"
              "app.oam.dev/name": parameter.name
            }
          }
          spec: {
            name: parameter.name + "-analytics"
            language: "python"
            framework: "fastapi"
            
            // Analytics configuration
            environment: {
              ANALYTICS_NAME: parameter.name
              DASHBOARD_TYPE: parameter.dashboardType
              
              if parameter.dataSources != _|_ {
                DATA_SOURCES: "\(parameter.dataSources)"
              }
              
              if parameter.dashboards != _|_ {
                DEFAULT_DASHBOARDS: "\(parameter.dashboards)"
              }
              
              if parameter.alerts != _|_ {
                ALERTING_ENABLED: "\(parameter.alerts.enabled)"
                ALERT_CHANNELS: "\(parameter.alerts.channels)"
              }
            }
            
            resources: {
              cpu: "500m"
              memory: "1Gi"
            }
          }
        }
        
        parameter: {
          // Required parameters
          name: string & =~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
          
          // Dashboard type
          dashboardType: *"metabase" | "metabase" | "grafana"
          
          // Data source configuration
          dataSources?: [...{
            name: string
            type: "kafka" | "postgres" | "snowflake"
            connectionString?: string
            secretRef?: string
          }]
          
          // Dashboard configuration
          dashboards?: [...{
            name: string
            template?: string
            autoCreate: *true | bool
          }]
          
          // Alerting configuration
          alerts?: {
            enabled: *false | bool
            channels?: [...{
              type: "email" | "slack" | "webhook"
              config: {...}
            }]
          }
          
          // Authentication
          authentication?: {
            enabled: *true | bool
            provider: *"internal" | "internal" | "oauth" | "ldap"
            config?: {...}
          }
        }