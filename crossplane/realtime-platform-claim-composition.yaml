# RealtimePlatformClaim Composition
# Creates complete real-time streaming platform infrastructure
# Includes: Postgres, MQTT, Kafka, Lenses HQ/Agent, Metabase, Secrets

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: realtime-platform-claim
  labels:
    crossplane.io/xrd: realtimeplatformclaims.platform.example.org
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: platform.example.org/v1alpha1
    kind: XRealtimePlatformClaim
  resources:

  # Realtime Platform Namespace
  - name: realtime-namespace
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: placeholder-realtime
              labels:
                app.kubernetes.io/part-of: realtime-platform
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-namespace"

  # PostgreSQL Storage PVC
  - name: realtime-postgres-storage
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: PersistentVolumeClaim
            metadata:
              name: postgres-storage
              namespace: placeholder-realtime
            spec:
              accessModes:
              - ReadWriteOnce
              storageClassName: gp3
              resources:
                requests:
                  storage: 10Gi
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-postgres-storage"

  # PostgreSQL Secret
  - name: realtime-postgres-secret
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Secret
            metadata:
              name: postgres-secret
              namespace: placeholder-realtime
            type: Opaque
            data:
              POSTGRES_DB: bGVuc2Vz  # 'lenses' base64
              POSTGRES_USER: bGVuc2Vz  # 'lenses' base64
              POSTGRES_PASSWORD: bGVuc2Vz  # 'lenses' base64
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-postgres-secret"

  # PostgreSQL Deployment
  - name: realtime-postgres
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: postgres
              namespace: placeholder-realtime
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app.kubernetes.io/name: postgres
              template:
                metadata:
                  labels:
                    app.kubernetes.io/name: postgres
                spec:
                  containers:
                  - name: postgres
                    image: postgres:13
                    ports:
                    - containerPort: 5432
                      name: postgres
                    env:
                    - name: POSTGRES_DB
                      value: lenses
                    - name: POSTGRES_USER
                      value: lenses
                    - name: POSTGRES_PASSWORD
                      value: lenses
                    - name: PGDATA
                      value: /var/lib/postgresql/data/pgdata
                    volumeMounts:
                    - name: postgres-storage
                      mountPath: /var/lib/postgresql/data
                  volumes:
                  - name: postgres-storage
                    persistentVolumeClaim:
                      claimName: postgres-storage
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-postgres"

  # PostgreSQL Service
  - name: realtime-postgres-service
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Service
            metadata:
              name: postgres
              namespace: placeholder-realtime
            spec:
              selector:
                app.kubernetes.io/name: postgres
              ports:
              - port: 5432
                targetPort: 5432
                name: postgres
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-postgres-service"

  # MQTT Broker Deployment
  - name: realtime-mqtt
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: mqtt-broker
              namespace: placeholder-realtime
              labels:
                app.kubernetes.io/name: mqtt-broker
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app.kubernetes.io/name: mqtt-broker
              template:
                metadata:
                  labels:
                    app.kubernetes.io/name: mqtt-broker
                spec:
                  containers:
                  - name: mqtt
                    image: eclipse-mosquitto
                    ports:
                    - containerPort: 1883
                      name: mqtt
                    - containerPort: 9001
                      name: websocket
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-mqtt"

  # MQTT Service
  - name: realtime-mqtt-service
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Service
            metadata:
              name: mqtt-broker
              namespace: placeholder-realtime
              labels:
                app.kubernetes.io/name: mqtt-broker
            spec:
              selector:
                app.kubernetes.io/name: mqtt-broker
              ports:
              - port: 1883
                targetPort: 1883
                name: mqtt
              - port: 9001
                targetPort: 9001
                name: websocket
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-mqtt-service"

  # Kafka Deployment (using lensesio/fast-data-dev)
  - name: realtime-kafka
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: demo-kafka
              namespace: placeholder-realtime
              labels:
                app.kubernetes.io/name: kafka
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app.kubernetes.io/name: kafka
              template:
                metadata:
                  labels:
                    app.kubernetes.io/name: kafka
                spec:
                  hostname: demo-kafka
                  containers:
                  - name: kafka
                    image: lensesio/fast-data-dev:3.9.0
                    ports:
                    - containerPort: 9092
                      name: kafka
                    - containerPort: 8083
                      name: kafka-connect
                    - containerPort: 8081
                      name: schema-registry
                    env:
                    - name: ADV_HOST
                      value: "demo-kafka"
                    - name: RUNNING_SAMPLEDATA
                      value: "1"
                    - name: RUNTESTS
                      value: "0"
                    - name: KAFKA_LISTENERS
                      value: "PLAINTEXT://:9092,DOCKERCOMPOSE://:19092,CONTROLLER://:16062"
                    - name: KAFKA_ADVERTISED_LISTENERS
                      value: "PLAINTEXT://demo-kafka:9092,DOCKERCOMPOSE://demo-kafka:19092"
                    - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
                      value: "DOCKERCOMPOSE:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL"
                    - name: DISABLE
                      value: "debezium-mongodb,debezium-mysql,debezium-sqlserver,debezium-jdbc"
                    - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
                      value: "true"
                    - name: CONNECT_BOOTSTRAP_SERVERS
                      value: "demo-kafka:9092"
                    - name: CONNECT_REST_PORT
                      value: "8083"
                    - name: CONNECT_GROUP_ID
                      value: "compose-connect-group"
                    - name: CONNECT_CONFIG_STORAGE_TOPIC
                      value: "docker-connect-configs"
                    - name: CONNECT_OFFSET_STORAGE_TOPIC
                      value: "docker-connect-offsets"
                    - name: CONNECT_STATUS_STORAGE_TOPIC
                      value: "docker-connect-status"
                    - name: CONNECT_KEY_CONVERTER
                      value: "org.apache.kafka.connect.json.JsonConverter"
                    - name: CONNECT_VALUE_CONVERTER
                      value: "org.apache.kafka.connect.json.JsonConverter"
                    - name: CONNECT_INTERNAL_KEY_CONVERTER
                      value: "org.apache.kafka.connect.json.JsonConverter"
                    - name: CONNECT_INTERNAL_VALUE_CONVERTER
                      value: "org.apache.kafka.connect.json.JsonConverter"
                    - name: CONNECT_REST_ADVERTISED_HOST_NAME
                      value: "demo-kafka"
                    - name: CONNECT_LOG4J_ROOT_LOGLEVEL
                      value: "WARN"
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-kafka"

  # Kafka Service
  - name: realtime-kafka-service
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Service
            metadata:
              name: demo-kafka
              namespace: placeholder-realtime
              labels:
                app.kubernetes.io/name: kafka
            spec:
              selector:
                app.kubernetes.io/name: kafka
              ports:
              - port: 9092
                targetPort: 9092
                name: kafka
              - port: 8083
                targetPort: 8083
                name: kafka-connect
              - port: 8081
                targetPort: 8081
                name: schema-registry
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-kafka-service"

  # Lenses HQ ConfigMap
  - name: realtime-lenses-hq-config
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: lenses-hq-config
              namespace: placeholder-realtime
              labels:
                app.kubernetes.io/name: lenses-hq
            data:
              config.yaml: |
                http:
                  address: :9991
                  secureSessionCookies: false
                auth:
                  administrators:
                    - admin
                  users:
                    - username: admin
                      password: $2a$10$DPQYpxj4Y2iTWeuF1n.ItewXnbYXh5/E9lQwDJ/cI/.gBboW2Hodm
                agents:
                  address: :10000
                database:
                  host: postgres:5432
                  username: lenses
                  password: lenses
                  database: hq
                logger:
                  mode: text
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-lenses-hq-config"

  # Lenses HQ Deployment
  - name: realtime-lenses-hq
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: lenses-hq
              namespace: placeholder-realtime
              labels:
                app.kubernetes.io/name: lenses-hq
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app.kubernetes.io/name: lenses-hq
              template:
                metadata:
                  labels:
                    app.kubernetes.io/name: lenses-hq
                spec:
                  initContainers:
                  - name: create-config
                    image: busybox
                    envFrom:
                    - secretRef:
                        name: lenses-credentials
                    command:
                    - sh
                    - -c
                    - |
                      # Create config using standard shell variables
                      cat > /shared/config.yaml << EOF
                      http:
                        address: :9991
                        secureSessionCookies: false
                      auth:
                        administrators:
                          - $HQ_USER
                        users:
                          - username: $HQ_USER
                            password: \$2a\$10\$DPQYpxj4Y2iTWeuF1n.ItewXnbYXh5/E9lQwDJ/cI/.gBboW2Hodm
                      agents:
                        address: :10000
                      database:
                        host: postgres:5432
                        username: $DB_USERNAME
                        password: $DB_PASSWORD
                        database: hq
                      logger:
                        mode: text
                      license:
                        key: $LICENSE_KEY
                        acceptEULA: $ACCEPT_EULA
                      EOF
                    volumeMounts:
                    - name: shared-config
                      mountPath: /shared
                  - name: wait-for-postgres
                    image: postgres:13
                    command:
                    - sh
                    - -c
                    - |
                      until pg_isready -h postgres -U lenses; do
                        echo "Waiting for PostgreSQL..."
                        sleep 2
                      done
                      echo "PostgreSQL is ready"
                      export PGPASSWORD=lenses
                      psql -h postgres -U lenses -tc "SELECT 1 FROM pg_database WHERE datname = 'hq'" | grep -q 1 || \
                        psql -h postgres -U lenses -c "CREATE DATABASE hq;"
                      psql -h postgres -U lenses -tc "SELECT 1 FROM pg_database WHERE datname = 'agent1'" | grep -q 1 || \
                        psql -h postgres -U lenses -c "CREATE DATABASE agent1;"
                      psql -h postgres -U lenses -tc "SELECT 1 FROM pg_database WHERE datname = 'metabaseappdb'" | grep -q 1 || \
                        psql -h postgres -U lenses -c "CREATE DATABASE metabaseappdb;"
                  containers:
                  - name: lenses-hq
                    image: lensting/lenses-hq:6-preview
                    command: ["lenses-hq"]
                    args: ["/app/config.yaml"]
                    ports:
                    - containerPort: 9991
                      name: http
                    - containerPort: 10000
                      name: agent-reg
                    envFrom:
                    - secretRef:
                        name: lenses-credentials
                    volumeMounts:
                    - name: shared-config
                      mountPath: /app/config.yaml
                      subPath: config.yaml
                    livenessProbe:
                      httpGet:
                        path: /
                        port: 9991
                      initialDelaySeconds: 60
                      periodSeconds: 30
                    readinessProbe:
                      httpGet:
                        path: /
                        port: 9991
                      initialDelaySeconds: 30
                      periodSeconds: 10
                  volumes:
                  - name: shared-config
                    emptyDir: {}
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-lenses-hq"

  # Lenses HQ Service
  - name: realtime-lenses-hq-service
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Service
            metadata:
              name: lenses-hq
              namespace: placeholder-realtime
              labels:
                app.kubernetes.io/name: lenses-hq
            spec:
              selector:
                app.kubernetes.io/name: lenses-hq
              ports:
              - port: 9991
                targetPort: 9991
                name: http
              - port: 10000
                targetPort: 10000
                name: agent-reg
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-lenses-hq-service"

  # Lenses Agent Deployment
  - name: realtime-lenses-agent
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: lenses-agent
              namespace: placeholder-realtime
              labels:
                app.kubernetes.io/name: lenses-agent
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app.kubernetes.io/name: lenses-agent
              template:
                metadata:
                  labels:
                    app.kubernetes.io/name: lenses-agent
                spec:
                  initContainers:
                  - name: wait-for-lenses-hq
                    image: curlimages/curl:8.5.0
                    command:
                    - sh
                    - -c
                    - |
                      until curl -f http://lenses-hq:9991/; do
                        echo "Waiting for Lenses HQ..."
                        sleep 5
                      done
                      echo "Lenses HQ is ready"
                  - name: create-agent-config
                    image: busybox
                    envFrom:
                    - secretRef:
                        name: lenses-credentials
                    env:
                    - name: NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
                    - name: KAFKA_SERVICE
                      value: "demo-kafka"
                    - name: LENSES_HQ_SERVICE
                      value: "lenses-hq"
                    command:
                    - sh
                    - -c
                    - |
                      # Create agent key
                      echo "$AGENT_KEY" > /mnt/settings/DEMO_AGENTKEY
                      
                      # Create lenses.conf
                      cat > /mnt/settings/lenses.conf << EOF
                      lenses {
                        storage.postgres.host = "postgres"
                        storage.postgres.port = 5432
                        storage.postgres.database = "agent1"
                        storage.postgres.username = "lenses"
                        storage.postgres.password = "lenses"
                        provisioning.path = "/mnt/settings"
                        sql.state.dir = "/data/lsql-state-dir"
                        secret.file = "/data/security.conf"
                        storage.directory = "/data/lenses"
                        
                        connectors.info = [
                          {       
                            class.name    = "com.snowflake.kafka.connector.SnowflakeSinkConnector"
                            name          = "Snowflake Kafka Connector"
                            sink          = true
                            description   = "Writes Kafka data into Snowflake for analytics."
                            docs          = "https://docs.snowflake.com/en/user-guide/kafka-connector.html"
                            author        = "Snowflake"
                          }
                        ]
                      }
                      EOF
                      
                      # Create provisioning.yaml with parameterized service names
                      cat > /mnt/settings/provisioning.yaml << EOF
                      lensesHq:
                        - configuration:
                            agentKey:
                              value: $AGENT_KEY
                            port:
                              value: 10000
                            server:
                              value: lenses-hq
                          name: lenses-hq
                          tags: ['hq']
                          version: 1
                      kafka:
                        - name: kafka
                          version: 1
                          tags: ['kafka', 'dev']
                          configuration:
                            kafkaBootstrapServers:
                              value: [PLAINTEXT://$KAFKA_SERVICE.$NAMESPACE.svc.cluster.local:9092]
                            protocol:
                              value: PLAINTEXT
                      confluentSchemaRegistry:
                        - name: schema-registry
                          version: 1
                          tags: ['dev']
                          configuration:
                            schemaRegistryUrls:
                              value: [http://$KAFKA_SERVICE.$NAMESPACE.svc.cluster.local:8081]
                      connect:
                        - name: dev
                          version: 1
                          tags: ['dev']
                          configuration:
                            workers:
                              value: [http://$KAFKA_SERVICE.$NAMESPACE.svc.cluster.local:8083]
                            aes256Key:
                              value: 0123456789abcdef0123456789abcdef
                      EOF
                    volumeMounts:
                    - name: agent-settings
                      mountPath: /mnt/settings
                  containers:
                  - name: lenses-agent
                    image: lensting/lenses-agent:6-preview
                    envFrom:
                    - secretRef:
                        name: lenses-credentials
                    env:
                    - name: DEMO_HQ_URL
                      value: "http://lenses-hq:9991"
                    - name: DEMO_HQ_USER
                      valueFrom:
                        secretKeyRef:
                          name: lenses-credentials
                          key: HQ_USER
                    - name: DEMO_HQ_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: lenses-credentials
                          key: HQ_PASSWORD
                    - name: DEMO_AGENTKEY_PATH
                      value: "/mnt/settings/DEMO_AGENTKEY"
                    - name: LENSES_HEAP_OPTS
                      value: "-Xmx1536m -Xms512m"
                    volumeMounts:
                    - name: agent-settings
                      mountPath: /mnt/settings
                    resources:
                      limits:
                        memory: "2Gi"
                        cpu: "1000m"
                      requests:
                        memory: "1Gi"
                        cpu: "500m"
                  volumes:
                  - name: agent-settings
                    emptyDir: {}
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-lenses-agent"

  # Lenses Agent Service
  - name: realtime-lenses-agent-service
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Service
            metadata:
              name: lenses-agent
              namespace: placeholder-realtime
              labels:
                app.kubernetes.io/name: lenses-agent
            spec:
              selector:
                app.kubernetes.io/name: lenses-agent
              ports:
              - port: 9991
                targetPort: 9991
                name: http
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-lenses-agent-service"

  # Metabase Deployment
  - name: realtime-metabase
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: metabase
              namespace: placeholder-realtime
              labels:
                app.kubernetes.io/name: metabase
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app.kubernetes.io/name: metabase
              template:
                metadata:
                  labels:
                    app.kubernetes.io/name: metabase
                spec:
                  initContainers:
                  - name: wait-for-postgres
                    image: postgres:13
                    command:
                    - sh
                    - -c
                    - |
                      until pg_isready -h postgres -U lenses; do
                        echo "Waiting for PostgreSQL..."
                        sleep 2
                      done
                  containers:
                  - name: metabase
                    image: metabase/metabase:latest
                    ports:
                    - containerPort: 3000
                      name: http
                    env:
                    - name: MB_DB_TYPE
                      value: "postgres"
                    - name: MB_DB_DBNAME
                      value: "metabaseappdb"
                    - name: MB_DB_PORT
                      value: "5432"
                    - name: MB_DB_USER
                      value: "lenses"
                    - name: MB_DB_PASS
                      value: "lenses"
                    - name: MB_DB_HOST
                      value: "postgres"
                    resources:
                      limits:
                        memory: "2Gi"
                        cpu: "1000m"
                      requests:
                        memory: "1Gi"
                        cpu: "500m"
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-metabase"

  # Metabase Service
  - name: realtime-metabase-service
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Service
            metadata:
              name: metabase
              namespace: placeholder-realtime
              labels:
                app.kubernetes.io/name: metabase
            spec:
              selector:
                app.kubernetes.io/name: metabase
              ports:
              - port: 3000
                targetPort: 3000
                name: http
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-metabase-service"

  # Lenses Credentials Secret (reference from default namespace)
  - name: realtime-lenses-credentials
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Secret
            metadata:
              name: lenses-credentials
              namespace: placeholder-realtime
            type: Opaque
            data:
              license-key: ""
              accept-eula: ""
              hq-user: ""
              hq-password: ""
              db-username: ""
              db-password: ""
              agent-key: ""
        providerConfigRef:
          name: kubernetes-provider
        references:
        - patchesFrom:
            apiVersion: v1
            kind: Secret
            name: lenses-credentials
            namespace: default
            fieldPath: data
          toFieldPath: spec.forProvider.manifest.data
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-lenses-credentials"


  # ServiceAccount for secret copying
  - name: realtime-secret-copier-sa
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: secret-copier
              namespace: placeholder-realtime
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-secret-copier-sa"

  # ClusterRole for secret reading
  - name: realtime-secret-reader-role
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              name: secret-reader
            rules:
            - apiGroups: [""]
              resources: ["secrets"]
              verbs: ["get", "list"]
            - apiGroups: [""]
              resources: ["secrets"]
              verbs: ["create", "update", "patch"]
              resourceNames: ["lenses-credentials"]
            - apiGroups: ["apps"]
              resources: ["deployments"]
              verbs: ["get", "list"]
            - apiGroups: [""]
              resources: ["pods"]
              verbs: ["get", "list"]
            - apiGroups: [""]
              resources: ["pods/exec"]
              verbs: ["create"]
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-secret-reader-role"

  # ClusterRoleBinding
  - name: realtime-secret-copier-binding
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: secret-copier-binding
            subjects:
            - kind: ServiceAccount
              name: secret-copier
              namespace: placeholder-realtime
            roleRef:
              kind: ClusterRole
              name: secret-reader
              apiGroup: rbac.authorization.k8s.io
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-secret-copier-binding"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.subjects[0].namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-secret-copier-binding"

  # Secret copying Job
  - name: realtime-secret-copier-job
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: batch/v1
            kind: Job
            metadata:
              name: copy-lenses-credentials
              namespace: placeholder-realtime
            spec:
              template:
                spec:
                  serviceAccountName: secret-copier
                  restartPolicy: OnFailure
                  containers:
                  - name: copy-secret
                    image: bitnami/kubectl:latest
                    command:
                    - sh
                    - -c
                    - |
                      # Copy lenses-credentials secret from default to current namespace
                      kubectl get secret lenses-credentials -n default -o yaml | \
                        sed "s/namespace: default/namespace: $TARGET_NAMESPACE/" | \
                        sed '/resourceVersion:/d' | \
                        sed '/uid:/d' | \
                        sed '/creationTimestamp:/d' | \
                        kubectl apply -f -
                      echo "Secret copied successfully"
                    env:
                    - name: TARGET_NAMESPACE
                      value: placeholder-realtime
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].env[0].value
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-secret-copier-job"

  # Istio Gateway for Lenses HQ
  - name: realtime-lenses-gateway
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: networking.istio.io/v1beta1
            kind: Gateway
            metadata:
              name: lenses-hq-gateway
              namespace: placeholder-realtime
            spec:
              selector:
                istio: ingressgateway
              servers:
              - port:
                  number: 80
                  name: http
                  protocol: HTTP
                hosts:
                - "lenses-hq.placeholder-realtime.local"
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.spec.servers[0].hosts[0]
      transforms:
      - type: string
        string:
          fmt: "lenses-hq.%s-realtime.local"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-lenses-gateway"

  # Istio VirtualService for Lenses HQ
  - name: realtime-lenses-virtualservice
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: networking.istio.io/v1beta1
            kind: VirtualService
            metadata:
              name: lenses-hq-vs
              namespace: placeholder-realtime
            spec:
              hosts:
              - "lenses-hq.placeholder-realtime.local"
              gateways:
              - lenses-hq-gateway
              http:
              - match:
                - uri:
                    prefix: /
                route:
                - destination:
                    host: lenses-hq
                    port:
                      number: 9991
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.spec.hosts[0]
      transforms:
      - type: string
        string:
          fmt: "lenses-hq.%s-realtime.local"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-lenses-virtualservice"

  # Application Secrets for Real-time Platform
  - name: realtime-mqtt-secret
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Secret
            metadata:
              name: placeholder-mqtt-secret
              namespace: default
            type: Opaque
            stringData:
              MQTT_HOST: "placeholder-mqtt.placeholder-realtime.svc.cluster.local"
              MQTT_PORT: "1883"
              MQTT_USER: "realtime-user"
              MQTT_PASSWORD: "realtime-pass"
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-mqtt-secret"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-mqtt-secret"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.stringData.MQTT_HOST
      transforms:
      - type: string
        string:
          fmt: "%s-mqtt.%s-realtime.svc.cluster.local"

  - name: realtime-kafka-secret
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Secret
            metadata:
              name: placeholder-kafka-secret
              namespace: default
            type: Opaque
            stringData:
              KAFKA_BOOTSTRAP_SERVERS: "placeholder-kafka.placeholder-realtime.svc.cluster.local:9092"
              KAFKA_SCHEMA_REGISTRY_URL: "http://placeholder-kafka.placeholder-realtime.svc.cluster.local:8081"
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-kafka-secret"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-kafka-secret"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.stringData.KAFKA_BOOTSTRAP_SERVERS
      transforms:
      - type: string
        string:
          fmt: "%s-kafka.%s-realtime.svc.cluster.local:9092"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.stringData.KAFKA_SCHEMA_REGISTRY_URL
      transforms:
      - type: string
        string:
          fmt: "http://%s-kafka.%s-realtime.svc.cluster.local:8081"

  - name: realtime-lenses-secret
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Secret
            metadata:
              name: placeholder-lenses-secret
              namespace: default
            type: Opaque
            stringData:
              LENSES_URL: "http://placeholder-lenses-hq.placeholder-realtime.svc.cluster.local:9991"
              LENSES_USER: "lenses"
              LENSES_PASSWORD: "lenses"
              LENSES_HQ_URL: "http://placeholder-lenses-hq.placeholder-realtime.svc.cluster.local:9991"
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-lenses-secret"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-lenses-secret"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.stringData.LENSES_URL
      transforms:
      - type: string
        string:
          fmt: "http://%s-lenses-hq.%s-realtime.svc.cluster.local:9991"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.stringData.LENSES_HQ_URL
      transforms:
      - type: string
        string:
          fmt: "http://%s-lenses-hq.%s-realtime.svc.cluster.local:9991"

  - name: realtime-metabase-secret
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Secret
            metadata:
              name: placeholder-metabase-secret
              namespace: default
            type: Opaque
            stringData:
              METABASE_URL: "http://placeholder-metabase.placeholder-realtime.svc.cluster.local:3000"
              METABASE_USER: "admin@metabase.local"
              METABASE_PASSWORD: "metabase123"
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-metabase-secret"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-metabase-secret"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.stringData.METABASE_URL
      transforms:
      - type: string
        string:
          fmt: "http://%s-metabase.%s-realtime.svc.cluster.local:3000"

  # Kafka Configuration Job
  - name: realtime-kafka-config-job
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: batch/v1
            kind: Job
            metadata:
              name: kafka-config-job
              namespace: placeholder-realtime
              labels:
                app.kubernetes.io/name: kafka-config
            spec:
              template:
                spec:
                  restartPolicy: OnFailure
                  serviceAccountName: secret-copier
                  containers:
                  - name: kafka-config
                    image: bitnami/kubectl:latest
                    command:
                    - sh
                    - -c
                    - |
                      # Wait for Kafka to be ready
                      echo "Waiting for Kafka to be ready..."
                      until kubectl exec -n $NAMESPACE deployment/demo-kafka -- curl -f http://localhost:9092 >/dev/null 2>&1 || kubectl exec -n $NAMESPACE deployment/demo-kafka -- supervisorctl status broker | grep RUNNING >/dev/null; do
                        echo "Waiting for Kafka..."
                        sleep 5
                      done
                      
                      # Wait for Schema Registry to be ready
                      echo "Waiting for Schema Registry to be ready..."
                      until kubectl exec -n $NAMESPACE deployment/demo-kafka -- curl -f http://localhost:8081/subjects >/dev/null 2>&1; do
                        echo "Waiting for Schema Registry..."
                        sleep 5
                      done
                      
                      # Wait for Kafka Connect to be ready
                      echo "Waiting for Kafka Connect to be ready..."
                      until kubectl exec -n $NAMESPACE deployment/demo-kafka -- curl -f http://localhost:8083/connectors >/dev/null 2>&1; do
                        echo "Waiting for Kafka Connect..."
                        sleep 5
                      done
                      
                      echo "All Kafka services are ready! Installing Snowflake connector..."
                      
                      # Install Snowflake connector in Kafka container
                      echo "📦 Installing Snowflake Kafka Connector..."
                      kubectl exec -n $NAMESPACE deployment/demo-kafka -- bash -c "
                        # Update package list and install wget if not present
                        apt-get update && apt-get install -y wget || echo 'wget already installed'
                        
                        # Download Snowflake Kafka Connector if not exists
                        if [ ! -f /connectors/snowflake-kafka-connector-3.1.0.jar ]; then
                          cd /connectors
                          echo 'Downloading Snowflake Kafka Connector...'
                          wget -O snowflake-kafka-connector-3.1.0.jar https://repo1.maven.org/maven2/com/snowflake/snowflake-kafka-connector/3.1.0/snowflake-kafka-connector-3.1.0.jar
                          echo 'Snowflake connector downloaded successfully'
                        else
                          echo 'Snowflake connector already exists'
                        fi
                        
                        # Restart Kafka Connect to load new connector
                        echo 'Restarting Kafka Connect to load connector...'
                        if supervisorctl status connect-distributed | grep -q RUNNING; then
                          supervisorctl restart connect-distributed
                          echo 'Kafka Connect restarted successfully'
                        else
                          echo 'Kafka Connect not running, starting...'
                          supervisorctl start connect-distributed
                        fi
                      "
                      
                      # Wait for Kafka Connect to restart and be ready
                      echo "⏳ Waiting for Kafka Connect to restart..."
                      sleep 10
                      until kubectl exec -n $NAMESPACE deployment/demo-kafka -- curl -f http://localhost:8083/connectors >/dev/null 2>&1; do
                        echo "Waiting for Kafka Connect to be ready after restart..."
                        sleep 5
                      done
                      
                      # Verify Snowflake connector is available
                      echo "🔍 Verifying Snowflake connector installation..."
                      RETRIES=0
                      MAX_RETRIES=10
                      while [ $RETRIES -lt $MAX_RETRIES ]; do
                        if kubectl exec -n $NAMESPACE deployment/demo-kafka -- curl -s http://demo-kafka:8083/connector-plugins | grep -q "SnowflakeSinkConnector"; then
                          echo "✅ Snowflake connector installed and available!"
                          break
                        else
                          echo "Waiting for connector to be available... (attempt $((RETRIES + 1))/$MAX_RETRIES)"
                          sleep 10
                          RETRIES=$((RETRIES + 1))
                        fi
                      done
                      
                      if [ $RETRIES -eq $MAX_RETRIES ]; then
                        echo "⚠️  Snowflake connector installation may have failed"
                      fi
                      
                      echo "🎉 Kafka configuration job completed successfully!"
                    env:
                    - name: NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      transforms:
      - type: string
        string:
          fmt: "%s-realtime"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-realtime-kafka-config-job"

  # Multi-Environment Secret Sync CronJob (deployed once in default namespace)
  - name: multi-env-secret-sync-cronjob
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: batch/v1
            kind: CronJob
            metadata:
              name: multi-env-secret-sync
              namespace: default
            spec:
              schedule: "*/2 * * * *"
              concurrencyPolicy: Replace
              jobTemplate:
                spec:
                  template:
                    spec:
                      serviceAccountName: secret-copier
                      containers:
                      - name: sync-secrets
                        image: bitnami/kubectl:latest
                        command:
                        - sh
                        - -c
                        - |
                          echo "Starting multi-environment secret sync..."
                          
                          # Get all realtime namespaces
                          NAMESPACES=$(kubectl get ns -l app.kubernetes.io/part-of=realtime-platform -o jsonpath='{.items[*].metadata.name}')
                          
                          if [ -z "$NAMESPACES" ]; then
                            echo "No realtime-platform namespaces found"
                            exit 0
                          fi
                          
                          for ns in $NAMESPACES; do
                            echo "Processing namespace: $ns"
                            
                            # Check if namespace still exists (it might have been deleted)
                            if ! kubectl get namespace "$ns" >/dev/null 2>&1; then
                              echo "⚠️  Namespace $ns no longer exists, skipping..."
                              continue
                            fi
                            
                            # Get the base secret from default namespace
                            BASE_SECRET=$(kubectl get secret lenses-credentials -n default -o yaml 2>/dev/null)
                            if [ $? -ne 0 ]; then
                              echo "ERROR: lenses-credentials secret not found in default namespace"
                              continue
                            fi
                            
                            # Look for namespace-specific agent key
                            AGENT_KEY_VAR="${ns}-agent-key"
                            AGENT_KEY=$(kubectl get configmap env-agent-keys -n default -o jsonpath="{.data.${AGENT_KEY_VAR}}" 2>/dev/null || echo "")
                            
                            if [ -z "$AGENT_KEY" ]; then
                              echo "WARNING: No agent key found for namespace $ns"
                              continue
                            fi
                            
                            echo "Found agent key for $ns"
                            
                            # Create the secret with namespace-specific agent key
                            echo "$BASE_SECRET" | \
                              sed "s/namespace: default/namespace: $ns/" | \
                              sed '/resourceVersion:/d' | \
                              sed '/uid:/d' | \
                              sed '/creationTimestamp:/d' | \
                              sed "/# Agent keys will be added per-namespace by the CronJob/a\\  AGENT_KEY: \"$AGENT_KEY\"" | \
                              kubectl apply -f -
                            
                            if [ $? -eq 0 ]; then
                              echo "✅ Secret synced successfully to $ns"
                              
                              # Check if lenses-agent deployment exists before restarting
                              if kubectl get deployment lenses-agent -n $ns >/dev/null 2>&1; then
                                echo "🔄 Restarting lenses-agent in $ns..."
                                kubectl rollout restart deployment/lenses-agent -n $ns
                              else
                                echo "ℹ️  No lenses-agent deployment found in $ns (may not be deployed yet)"
                              fi
                              
                            else
                              echo "❌ Failed to sync secret to $ns"
                            fi
                          done
                          
                          echo "Multi-environment secret sync completed"
                      restartPolicy: OnFailure
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-multi-env-secret-sync"