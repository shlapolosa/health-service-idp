---
# GraphQLPlatformClaim Composition
# Handles infrastructure provisioning for GraphQL Gateway applications
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: graphql-platform-composition
  labels:
    provider: platform
    service: graphql-gateway
    version: v1alpha1
    app.kubernetes.io/name: graphql-platform
    app.kubernetes.io/component: composition
    app.kubernetes.io/part-of: graphql-platform
    app.kubernetes.io/managed-by: crossplane
spec:
  # Define the composite resource type this composition satisfies
  compositeTypeRef:
    apiVersion: platform.example.org/v1alpha1
    kind: XGraphQLPlatform
  
  # Define the resources this composition creates
  resources:
  
  # 1. ConfigMap for Gateway Configuration
  - name: gateway-config
    base:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        labels:
          app.kubernetes.io/name: graphql-gateway
          app.kubernetes.io/component: configuration
          app.kubernetes.io/part-of: graphql-platform
      data:
        # Gateway configuration
        gateway.yaml: |
          server:
            port: 8080
            host: "0.0.0.0"
            cors:
              enabled: true
              origin: "*"
              methods: ["GET", "POST", "OPTIONS"]
              headers: ["Content-Type", "Authorization", "X-API-Key"]
          
          discovery:
            namespace: "default"
            labelSelector: "graphql.federation/enabled=true"
            interval: "5m"
            autoDiscovery: true
            retryDelay: "30s"
            maxRetries: 3
            federationAnnotation: "graphql.federation/enabled"
          
          graphql:
            playground: true
            introspection: false
            endpoint: "/graphql"
            
          security:
            rateLimit:
              windowMs: 900000  # 15 minutes
              max: 1000
            helmet:
              enabled: true
            
          logging:
            level: "info"
            format: "json"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-config"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: metadata.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: spec.serviceSelector
      toFieldPath: data["gateway.yaml"]
      transforms:
      - type: string
        string:
          fmt: |
            server:
              port: 8080
              host: "0.0.0.0"
              cors:
                enabled: true
                origin: "*"
                methods: ["GET", "POST", "OPTIONS"]
                headers: ["Content-Type", "Authorization", "X-API-Key"]
            
            discovery:
              namespace: "%s"
              labelSelector: "%s"
              interval: "%s"
              autoDiscovery: %s
              retryDelay: "30s"
              maxRetries: 3
            
            graphql:
              playground: %s
              introspection: %s
              endpoint: "/graphql"
              
            security:
              rateLimit:
                windowMs: 900000
                max: 1000
              helmet:
                enabled: true
              
            logging:
              level: "info"
              format: "json"
  
  # 2. ServiceMonitor for Prometheus monitoring (if available)
  - name: service-monitor
    base:
      apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        labels:
          app.kubernetes.io/name: graphql-gateway
          app.kubernetes.io/component: monitoring
          app.kubernetes.io/part-of: graphql-platform
      spec:
        selector:
          matchLabels:
            app.kubernetes.io/name: graphql-gateway
            app.kubernetes.io/component: graphql-gateway
        endpoints:
        - port: http
          path: /metrics
          interval: 30s
          scrapeTimeout: 10s
          honorLabels: true
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-monitor"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: metadata.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.selector.matchLabels["app.kubernetes.io/instance"]
  
  # 3. NetworkPolicy for security (if enabled)
  - name: network-policy
    base:
      apiVersion: networking.k8s.io/v1
      kind: NetworkPolicy
      metadata:
        labels:
          app.kubernetes.io/name: graphql-gateway
          app.kubernetes.io/component: security
          app.kubernetes.io/part-of: graphql-platform
      spec:
        podSelector:
          matchLabels:
            app.kubernetes.io/name: graphql-gateway
        policyTypes:
        - Ingress
        - Egress
        ingress:
        - from:
          - namespaceSelector: {}
          ports:
          - protocol: TCP
            port: 8080
        egress:
        # Allow DNS resolution
        - to: []
          ports:
          - protocol: UDP
            port: 53
        # Allow Kubernetes API access
        - to:
          - namespaceSelector:
              matchLabels:
                name: kube-system
          ports:
          - protocol: TCP
            port: 443
        # Allow access to discovered services
        - to:
          - namespaceSelector: {}
          ports:
          - protocol: TCP
            port: 8080
          - protocol: TCP
            port: 80
          - protocol: TCP
            port: 443
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-netpol"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: metadata.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.podSelector.matchLabels["app.kubernetes.io/instance"]
  
  # 4. HorizontalPodAutoscaler for scaling
  - name: hpa
    base:
      apiVersion: autoscaling/v2
      kind: HorizontalPodAutoscaler
      metadata:
        labels:
          app.kubernetes.io/name: graphql-gateway
          app.kubernetes.io/component: autoscaling
          app.kubernetes.io/part-of: graphql-platform
      spec:
        scaleTargetRef:
          apiVersion: serving.knative.dev/v1
          kind: Service
        minReplicas: 1
        maxReplicas: 10
        metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 70
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 80
        behavior:
          scaleDown:
            stabilizationWindowSeconds: 300
            policies:
            - type: Percent
              value: 50
              periodSeconds: 60
          scaleUp:
            stabilizationWindowSeconds: 60
            policies:
            - type: Percent
              value: 100
              periodSeconds: 30
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-hpa"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: metadata.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.scaleTargetRef.name
      transforms:
      - type: string
        string:
          fmt: "%s-gateway"
  
  # 5. PodDisruptionBudget for high availability
  - name: pdb
    base:
      apiVersion: policy/v1
      kind: PodDisruptionBudget
      metadata:
        labels:
          app.kubernetes.io/name: graphql-gateway
          app.kubernetes.io/component: availability
          app.kubernetes.io/part-of: graphql-platform
      spec:
        minAvailable: 1
        selector:
          matchLabels:
            app.kubernetes.io/name: graphql-gateway
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-pdb"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: metadata.namespace
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.selector.matchLabels["app.kubernetes.io/instance"]
  
  # 6. Secret for gateway credentials (if needed)
  - name: gateway-secrets
    base:
      apiVersion: v1
      kind: Secret
      metadata:
        labels:
          app.kubernetes.io/name: graphql-gateway
          app.kubernetes.io/component: security
          app.kubernetes.io/part-of: graphql-platform
      type: Opaque
      data:
        # Base64 encoded empty values - to be populated by external secret management
        api-key: ""
        auth-token: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-secrets"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.claimRef.namespace
      toFieldPath: metadata.namespace

---
# Composite Resource Definition (XRD) for GraphQLPlatform
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xgraphqlplatforms.platform.example.org
  labels:
    app.kubernetes.io/name: graphql-platform
    app.kubernetes.io/component: xrd
    app.kubernetes.io/part-of: graphql-platform
spec:
  group: platform.example.org
  names:
    kind: XGraphQLPlatform
    plural: xgraphqlplatforms
  claimNames:
    kind: GraphQLPlatformClaim
    plural: graphqlplatformclaims
  versions:
  - name: v1alpha1
    served: true
    referenceable: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              # Core Configuration
              name:
                type: string
                description: "Name of the GraphQL gateway instance"
              serviceSelector:
                type: object
                description: "Label selector for discovering services"
                additionalProperties:
                  type: string
              
              # Schema Management
              autoSchema:
                type: boolean
                default: true
                description: "Enable automatic schema generation from discovered services"
              schemaRefreshInterval:
                type: string
                default: "5m"
                description: "Interval for refreshing service discovery and schema"
              
              # Gateway Features
              exposeIntrospection:
                type: boolean
                default: false
                description: "Enable GraphQL introspection in production"
              exposePlayground:
                type: boolean
                default: true
                description: "Enable GraphQL Playground interface"
              enableCors:
                type: boolean
                default: true
                description: "Enable Cross-Origin Resource Sharing"
              
              # Resource Management
              resources:
                type: object
                properties:
                  cpu:
                    type: string
                    default: "500m"
                  memory:
                    type: string
                    default: "512Mi"
                description: "Resource limits for the gateway pod"
              
              # Advanced Configuration
              customResolvers:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    endpoint:
                      type: string
                    headers:
                      type: object
                      additionalProperties:
                        type: string
                description: "Custom resolver configurations"
              
              # Multi-cluster support
              targetEnvironment:
                type: string
                description: "Target environment for deployment"
                
            required:
            - name
            - serviceSelector
          status:
            type: object
            properties:
              # Gateway Status
              gatewayReady:
                type: boolean
                description: "Whether the gateway is ready to serve requests"
              discoveredServices:
                type: integer
                description: "Number of services discovered"
              lastDiscovery:
                type: string
                format: date-time
                description: "Timestamp of last successful service discovery"
              
              # Resource Status
              configMapName:
                type: string
                description: "Name of the created ConfigMap"
              secretName:
                type: string
                description: "Name of the created Secret"
              
              # Health and Monitoring
              healthStatus:
                type: string
                enum: ["healthy", "unhealthy", "unknown"]
                description: "Overall health status of the platform"
              endpoints:
                type: object
                properties:
                  graphql:
                    type: string
                  playground:
                    type: string
                  health:
                    type: string
                  metrics:
                    type: string
                description: "Available endpoints"
    additionalPrinterColumns:
    - name: Ready
      type: boolean
      jsonPath: .status.gatewayReady
    - name: Services
      type: integer
      jsonPath: .status.discoveredServices
    - name: Health
      type: string
      jsonPath: .status.healthStatus
    - name: Age
      type: date
      jsonPath: .metadata.creationTimestamp

