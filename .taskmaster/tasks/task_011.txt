# Task ID: 11
# Title: Implement MQTT Source Connector Configuration
# Status: pending
# Dependencies: 9, 10
# Priority: medium
# Description: Configure the MQTT Source Connector that bridges data from the MQTT broker to Kafka topics.
# Details:
In the realtime-compositions.yaml file, implement the configuration for the MQTT Source Connector using the Lenses Stream Reactor connector. Configure the connector with the appropriate settings for connecting to the MQTT broker (connect_mqtt_hosts: tcp://mqtt5:1883) and mapping MQTT topics to Kafka topics (connect_mqtt_kcql: INSERT INTO device_data SELECT * FROM health/device_data WITHKEY(deviceId)). Set up authentication, quality of service, and error handling. Ensure the connector is deployed and managed by the Lenses Agent.

# Test Strategy:
Deploy the MQTT Source Connector configuration and verify that it is created correctly. Test the connector by publishing messages to the MQTT topic and verifying that they appear in the Kafka topic. Test error handling by simulating connection failures.

# Subtasks:
## 1. Define MQTT Source Connector Basic Configuration [pending]
### Dependencies: None
### Description: Create the initial configuration for the MQTT Source Connector in the realtime-compositions.yaml file, including the connector name, class, and basic settings.
### Details:
Add a new connector configuration section in the realtime-compositions.yaml file under the Lenses Agent component. Define the connector with name 'mqtt-source', class 'com.datamountaineer.streamreactor.connect.mqtt.source.MqttSourceConnector', and set the basic configuration parameters including 'connect.mqtt.hosts: tcp://mqtt5:1883' and 'tasks.max: 1'. Ensure the connector is managed by the Lenses Agent by setting the appropriate deployment settings.

## 2. Configure MQTT Topic to Kafka Topic Mapping [pending]
### Dependencies: 11.1
### Description: Implement the KCQL (Kafka Connect Query Language) configuration to map MQTT topics to Kafka topics with appropriate key extraction.
### Details:
Add the 'connect.mqtt.kcql' parameter to the connector configuration with the value 'INSERT INTO device_data SELECT * FROM health/device_data WITHKEY(deviceId)'. This maps the MQTT topic 'health/device_data' to the Kafka topic 'device_data' and uses the 'deviceId' field as the message key. Ensure the Kafka topic exists or is set to be auto-created.

## 3. Implement MQTT Authentication and Security Settings [pending]
### Dependencies: 11.1
### Description: Configure the authentication credentials and security settings for connecting to the MQTT broker.
### Details:
Add authentication parameters to the connector configuration including 'connect.mqtt.username' and 'connect.mqtt.password' with values matching the credentials configured in the MQTT broker (Task 9). Set the 'connect.mqtt.clean.session' to 'true' and configure 'connect.mqtt.connection.timeout' and 'connect.mqtt.keep.alive.interval' with appropriate values (e.g., 30000ms and 60000ms respectively).

## 4. Configure Quality of Service and Error Handling [pending]
### Dependencies: 11.2, 11.3
### Description: Set up the quality of service level and error handling mechanisms for the MQTT Source Connector.
### Details:
Configure 'connect.mqtt.qos' parameter to an appropriate QoS level (0, 1, or 2, with 1 recommended for balanced reliability). Add error handling parameters including 'connect.mqtt.connection.clean': true, 'connect.mqtt.throw.on.error': false, and 'connect.mqtt.retry.backoff.ms': 3000. Set up 'errors.tolerance' to 'all' and 'errors.log.enable' to 'true' to ensure errors are logged but don't stop the connector.

## 5. Implement Connector Monitoring and Validation [pending]
### Dependencies: 11.4
### Description: Configure monitoring settings and validate the complete MQTT Source Connector configuration.
### Details:
Add monitoring parameters to track connector performance, including 'connect.mqtt.kcql.monitoring.enabled': true and appropriate JMX metrics settings. Review the complete connector configuration to ensure all required parameters are set correctly. Add comments in the YAML file to document the purpose of each configuration section. Ensure the connector is properly integrated with the Lenses Agent component defined in Task 10.

