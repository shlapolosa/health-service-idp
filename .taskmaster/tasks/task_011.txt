# Task ID: 11
# Title: Set up Crossplane with Required Providers
# Status: pending
# Dependencies: None
# Priority: high
# Description: Install and configure Crossplane with necessary providers (Helm, AWS, GitHub, Kubernetes) in the management cluster to enable infrastructure provisioning via CRDs.
# Details:
Install Crossplane v1.14.0+ using Helm chart with the following providers:
1. provider-helm v0.16.0+ for deploying Helm charts
2. provider-aws v0.43.0+ for AWS resources (API Gateway, IAM)
3. provider-github v0.7.0+ for repository operations
4. provider-kubernetes v0.10.0+ for K8s resource management

Implementation steps:
```bash
# Install Crossplane using Helm
helm repo add crossplane-stable https://charts.crossplane.io/stable
helm install crossplane crossplane-stable/crossplane --namespace crossplane-system --create-namespace --version 1.14.0

# Install providers
kubectl apply -f - <<EOF
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-aws
spec:
  package: xpkg.upbound.io/crossplane-contrib/provider-aws:v0.43.0
---
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-helm
spec:
  package: xpkg.upbound.io/crossplane-contrib/provider-helm:v0.16.0
---
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-github
spec:
  package: xpkg.upbound.io/crossplane-contrib/provider-github:v0.7.0
---
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-kubernetes
spec:
  package: xpkg.upbound.io/crossplane-contrib/provider-kubernetes:v0.10.0
EOF
```

Configure provider credentials using ProviderConfig resources for each provider. Set up appropriate IAM roles and service accounts with least privilege principles. For AWS, use IRSA (IAM Roles for Service Accounts) to avoid storing credentials.

# Test Strategy:
1. Verify all providers are installed and in 'Healthy' state using `kubectl get providers`
2. Test each provider with a simple resource creation (e.g., create a test S3 bucket with AWS provider)
3. Validate provider permissions by attempting operations that should succeed and fail
4. Create a simple Composition and XRD to verify Crossplane's core functionality

# Subtasks:
## 1. Install Crossplane Core Using Helm [pending]
### Dependencies: None
### Description: Set up the Crossplane core components in the management cluster using Helm chart version 1.14.0+.
### Details:
1. Add the Crossplane Helm repository
2. Create a dedicated namespace 'crossplane-system'
3. Install Crossplane using Helm with version 1.14.0 or newer
4. Verify the installation by checking that all Crossplane pods are running
5. Ensure the Crossplane CRDs are properly installed

## 2. Install Required Crossplane Providers [pending]
### Dependencies: 11.1
### Description: Install the four required Crossplane providers: AWS, Helm, GitHub, and Kubernetes with their specified versions.
### Details:
Create and apply Provider resources for each required provider with the specified versions:
1. provider-aws v0.43.0+
2. provider-helm v0.16.0+
3. provider-github v0.7.0+
4. provider-kubernetes v0.10.0+

Use the kubectl apply command with the YAML configuration as provided in the task description. Monitor the provider installation status until all providers are healthy.

## 3. Configure AWS Provider with IRSA [pending]
### Dependencies: 11.2
### Description: Set up AWS provider credentials using IAM Roles for Service Accounts (IRSA) to avoid storing credentials directly.
### Details:
1. Create an IAM role with necessary permissions following least privilege principles
2. Configure IRSA for the Crossplane AWS provider:
   - Create a service account in the crossplane-system namespace
   - Annotate the service account with the IAM role ARN
   - Update the AWS provider deployment to use this service account
3. Create and apply an AWS ProviderConfig that references the service account
4. Test the AWS provider configuration with a simple AWS resource creation

## 4. Configure Remaining Providers (Helm, GitHub, Kubernetes) [pending]
### Dependencies: 11.2
### Description: Set up credentials and configurations for the Helm, GitHub, and Kubernetes providers.
### Details:
For each provider:

1. Helm Provider:
   - Create a ProviderConfig that uses in-cluster configuration
   - Configure any necessary release repositories

2. GitHub Provider:
   - Create a GitHub personal access token with appropriate permissions
   - Store the token as a Kubernetes secret
   - Create a ProviderConfig that references this secret

3. Kubernetes Provider:
   - Set up a ProviderConfig using in-cluster configuration for same-cluster resources
   - For multi-cluster management, create kubeconfig secrets and reference them in additional ProviderConfigs

## 5. Implement Least Privilege Security Controls [pending]
### Dependencies: 11.3, 11.4
### Description: Review and refine all provider configurations to ensure they follow least privilege principles and implement proper security controls.
### Details:
1. Audit all provider configurations and associated IAM roles/permissions
2. Restrict AWS IAM role permissions to only what's necessary for the specific resources being managed
3. Limit GitHub token permissions to only required scopes
4. For Kubernetes provider, ensure RBAC is properly configured with minimal permissions
5. Document all security configurations and permissions
6. Implement proper secret management for any credentials
7. Set up monitoring for Crossplane components

