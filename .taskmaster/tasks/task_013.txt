# Task ID: 13
# Title: Implement Metabase Analytics Dashboard
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Implement the Metabase component that provides real-time analytics dashboards for health data.
# Details:
In the realtime-compositions.yaml file, implement the Metabase component using the metabase/metabase:latest image. Configure the deployment with the appropriate environment variables for connecting to the PostgreSQL database. Set up the service to expose port 3000 for the Web UI. Configure health checks and persistence. Set up the component to depend on the PostgreSQL database. Configure Metabase to connect to Snowflake if the snowflake parameter is enabled.

# Test Strategy:
Deploy the Metabase component and verify that it starts correctly. Test the Web UI by accessing it on port 3000. Verify that Metabase can connect to the PostgreSQL database. Test the Snowflake connection if enabled.

# Subtasks:
## 1. Add Metabase Component Definition to YAML [pending]
### Dependencies: None
### Description: Create the basic Metabase component definition in the realtime-compositions.yaml file using the metabase/metabase:latest image with appropriate resource allocations and container settings.
### Details:
Add a new component section in realtime-compositions.yaml with name 'metabase'. Use metabase/metabase:latest as the container image. Configure basic container settings including resource requests and limits (recommend 1-2 CPU, 2-4Gi memory). Set restart policy to 'Always' and add appropriate labels for the component.

## 2. Configure Metabase Environment Variables for PostgreSQL Connection [pending]
### Dependencies: 13.1
### Description: Set up the required environment variables to enable Metabase to connect to the PostgreSQL database component.
### Details:
Add environment variables section to the Metabase component with: MB_DB_TYPE=postgres, MB_DB_DBNAME=metabaseappdb, MB_DB_PORT=5432, MB_DB_USER and MB_DB_PASS referencing PostgreSQL credentials from the PostgreSQL component's secret. Add MB_DB_HOST pointing to the PostgreSQL service name. Include dependency configuration to ensure Metabase starts after PostgreSQL is ready.

## 3. Implement Metabase Service and Port Configuration [pending]
### Dependencies: 13.1
### Description: Configure the Kubernetes service to expose Metabase's web interface on port 3000 and set up any additional required networking configurations.
### Details:
Create a Kubernetes Service definition for Metabase that exposes port 3000 for the web UI. Configure the service type as ClusterIP for internal access or LoadBalancer/NodePort if external access is required. Add appropriate selector labels to match the Metabase pod. Include annotations for any service mesh integration if applicable.

## 4. Set Up Metabase Persistence and Health Checks [pending]
### Dependencies: 13.1, 13.2
### Description: Configure persistent volume claims for Metabase data and implement health checks to ensure proper operation and reliability.
### Details:
Add a persistent volume claim for Metabase data storage (recommend at least 5Gi). Mount the PVC to /metabase-data in the container. Configure both liveness and readiness probes: use an HTTP GET probe on /api/health endpoint at port 3000 with appropriate initial delay (60s), timeout (5s), and period (10s) settings. Add appropriate failure thresholds to prevent premature restarts during initial database setup.

## 5. Implement Conditional Snowflake Connection Configuration [pending]
### Dependencies: 13.2, 13.3, 13.4
### Description: Add configuration to conditionally connect Metabase to Snowflake when the snowflake parameter is enabled in the deployment.
### Details:
Implement conditional logic in the component definition that checks for a 'snowflake.enabled' parameter. When enabled, add additional environment variables for Snowflake connection: MB_SNOWFLAKE_JDBC_URL with the Snowflake connection string, MB_SNOWFLAKE_USER and MB_SNOWFLAKE_PASSWORD referencing credentials from a Kubernetes secret. If using External Secrets Operator, configure the appropriate SecretStore and ExternalSecret resources to fetch Snowflake credentials from the external secret manager.

