# Task ID: 13
# Title: Implement VClusterEnvironmentClaim CRD and Composition
# Status: pending
# Dependencies: 11, 12
# Priority: high
# Description: Create the VClusterEnvironmentClaim CRD and Crossplane Composition to provision isolated vClusters with Istio ingress and optional components (ArgoCD, observability stack).
# Details:
1. Define the VClusterEnvironmentClaim CRD with the schema specified in the PRD
2. Create a Crossplane Composition that provisions:
   - vCluster using Helm chart (v0.15.0+)
   - Istio ingress (v1.18+) with Gateway
   - Optional components based on the 'include' field

```yaml
# VClusterEnvironmentClaim XRD
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xvclusterenvironmentclaims.platform.example.org
spec:
  group: platform.example.org
  names:
    kind: XVClusterEnvironmentClaim
    plural: xvclusterenvironmentclaims
  claimNames:
    kind: VClusterEnvironmentClaim
    plural: vclusterenvironmentclaims
  versions:
    - name: v1alpha1
      served: true
      referenceable: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                name:
                  type: string
                domain:
                  type: string
                  nullable: true
                include:
                  type: array
                  items:
                    type: string
                    enum: [argoCD, grafana, prometheus, jaeger, kiali, apiGatewaySupport]
              required: [name]
```

Implement the Composition to use Helm provider for vCluster and component installation. Use Kubernetes provider for namespace creation and service account setup. Configure Istio Gateway with proper domain settings if provided.

# Test Strategy:
1. Apply the VClusterEnvironmentClaim CRD and verify it's accepted
2. Create a test claim with minimal configuration and verify vCluster is provisioned
3. Test with various 'include' combinations to ensure optional components are correctly installed
4. Verify Istio ingress is properly configured and accessible
5. Test domain configuration if provided
6. Validate that vCluster is running on nodes with appropriate taints/tolerations

# Subtasks:
## 1. Define VClusterEnvironmentClaim XRD [pending]
### Dependencies: None
### Description: Create the CompositeResourceDefinition (XRD) for VClusterEnvironmentClaim with the schema specified in the PRD
### Details:
1. Create a YAML file for the XRD as shown in the PRD
2. Add validation for the 'name' field (must be DNS-1123 compliant)
3. Add description fields to document each property
4. Define status subresource with appropriate fields (ready, clusterEndpoint, adminCredentials)
5. Apply the XRD to the cluster using kubectl

## 2. Create base Composition for vCluster provisioning [pending]
### Dependencies: 13.1
### Description: Implement the core Composition that provisions a vCluster using the Helm provider
### Details:
1. Create a Composition YAML file targeting the XRD
2. Define resources for namespace creation
3. Configure the Helm Release resource for vCluster v0.15.0+
4. Set up proper values for the Helm chart (storage, service type, etc.)
5. Define patches to propagate the name from claim to resources
6. Configure readiness checks for the vCluster deployment

## 3. Add Istio ingress with Gateway configuration [pending]
### Dependencies: 13.2
### Description: Extend the Composition to install Istio ingress and configure Gateway resources
### Details:
1. Add Helm Release resource for Istio installation (v1.18+)
2. Configure Istio Gateway resource with proper domain settings
3. Create patches to use the domain from the claim if provided, or generate a default domain
4. Set up Virtual Service to route traffic to the vCluster
5. Configure TLS settings for secure access
6. Add status patch to expose the ingress endpoint

## 4. Implement optional components installation logic [pending]
### Dependencies: 13.3
### Description: Add support for installing optional components based on the 'include' field
### Details:
1. Create conditional resources for each optional component (argoCD, grafana, prometheus, jaeger, kiali, apiGatewaySupport)
2. Configure Helm Release resources for each component with appropriate versions
3. Implement patches to conditionally include resources based on the 'include' array
4. Set up dependencies between components (e.g., Grafana depends on Prometheus)
5. Configure each component to work within the vCluster environment

## 5. Implement status updates and credential management [pending]
### Dependencies: 13.4
### Description: Configure the Composition to update status fields and manage admin credentials
### Details:
1. Add patches to update the status.ready field based on all resources being ready
2. Configure credential extraction from the vCluster secret
3. Set up patches to populate status.adminCredentials with access information
4. Add status.clusterEndpoint with connection details for both direct and ingress access
5. Implement proper error handling for status updates
6. Add connection instructions in a user-friendly format

