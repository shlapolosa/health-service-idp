# Task ID: 12
# Title: Configure Karpenter for Dynamic Node Provisioning
# Status: pending
# Dependencies: None
# Priority: high
# Description: Set up Karpenter in the management cluster with appropriate provisioners, taints, and tolerations to support dynamic provisioning of nodes for vCluster workloads.
# Details:
Install Karpenter v0.30.0+ with the following configuration:

1. Create dedicated node templates for vCluster workloads with taints
2. Configure provisioners with low scale-up delay (< 10s) to minimize cold start issues
3. Set up appropriate instance types optimized for cost/performance

```yaml
# Karpenter Provisioner for vCluster workloads
apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: vcluster-provisioner
spec:
  requirements:
    - key: karpenter.sh/capacity-type
      operator: In
      values: ["spot", "on-demand"]
    - key: node.kubernetes.io/instance-type
      operator: In
      values: ["t3a.medium", "t3a.large", "m5a.large"]
  taints:
    - key: workload-type
      value: vcluster
      effect: NoSchedule
  limits:
    resources:
      cpu: 1000
      memory: 1000Gi
  providerRef:
    name: default
  ttlSecondsAfterEmpty: 30
  ttlSecondsUntilExpired: 2592000 # 30 days
  startupTaints:
    - key: node.kubernetes.io/not-ready
      effect: NoSchedule
  consolidation:
    enabled: true
```

Implement node template with appropriate security groups, IAM roles, and subnet configuration. Configure Karpenter to use interruption handling for Spot instances to improve reliability.

# Test Strategy:
1. Deploy a test pod with the vCluster taint toleration and verify Karpenter provisions a new node
2. Test scale-down by removing workloads and verifying node termination
3. Measure node provisioning latency to ensure it meets cold-start requirements (<30s)
4. Verify proper instance type selection based on workload requirements
5. Test interruption handling by simulating a spot instance interruption

# Subtasks:
## 1. Install Karpenter v0.30.0+ in the management cluster [pending]
### Dependencies: None
### Description: Install Karpenter v0.30.0+ in the management cluster using Helm and configure the necessary AWS infrastructure components.
### Details:
1. Create necessary IAM roles for Karpenter with appropriate permissions for EC2 instance management
2. Set up IRSA (IAM Roles for Service Accounts) for Karpenter
3. Install Karpenter using Helm chart version 0.30.0 or newer
4. Configure Karpenter controller with appropriate AWS region and cluster name
5. Verify Karpenter installation by checking pods and controller logs

## 2. Create node template with security groups and IAM configuration [pending]
### Dependencies: 12.1
### Description: Create a node template for Karpenter that includes the necessary security groups, IAM roles, and subnet configuration for vCluster workloads.
### Details:
1. Create an EC2 NodeClass or equivalent resource defining the node template
2. Configure security groups that allow necessary network traffic for vCluster workloads
3. Set up IAM instance profile with permissions for node operations
4. Configure subnet selection to use private subnets in multiple availability zones
5. Set up appropriate user data for node bootstrap process
6. Configure instance metadata service (IMDSv2) for security

## 3. Configure vCluster provisioner with taints and instance types [pending]
### Dependencies: 12.2
### Description: Create the Karpenter provisioner for vCluster workloads with appropriate taints, instance types, and capacity settings as specified in the requirements.
### Details:
1. Create the vcluster-provisioner resource as specified in the YAML template
2. Configure the instance types (t3a.medium, t3a.large, m5a.large) optimized for cost/performance
3. Set up taints with key 'workload-type', value 'vcluster', and effect 'NoSchedule'
4. Configure resource limits (CPU: 1000, Memory: 1000Gi)
5. Set ttlSecondsAfterEmpty to 30 and ttlSecondsUntilExpired to 2592000 (30 days)
6. Enable consolidation for cost optimization

## 4. Implement Spot instance interruption handling [pending]
### Dependencies: 12.3
### Description: Configure Karpenter to handle Spot instance interruptions gracefully to improve reliability of vCluster workloads running on Spot instances.
### Details:
1. Enable the AWS Node Termination Handler or Karpenter's built-in interruption handling
2. Configure appropriate draining behavior for Spot instances receiving interruption notices
3. Set up event handling for EC2 Spot Instance Interruption Warning events
4. Implement graceful pod termination with appropriate termination grace periods
5. Configure Karpenter to quickly provision replacement capacity when interruptions occur
6. Set up monitoring and alerting for Spot instance interruptions

## 5. Optimize Karpenter for fast scale-up and minimal cold start [pending]
### Dependencies: 12.3, 12.4
### Description: Fine-tune Karpenter configuration to minimize scale-up delay and cold start issues for vCluster workloads.
### Details:
1. Configure provisioner with low scale-up delay (< 10s) as required
2. Implement appropriate node initialization and readiness settings
3. Configure kubelet startup parameters for faster node registration
4. Set up node warm pools if necessary for critical workloads
5. Implement monitoring for scale-up events and latency
6. Document the configuration and performance characteristics for the team

