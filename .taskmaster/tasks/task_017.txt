# Task ID: 17
# Title: Create REALTIME-OAM-EXAMPLE.yaml
# Status: pending
# Dependencies: 1, 3, 4, 15
# Priority: medium
# Description: Create a comprehensive example OAM application that demonstrates all features of the realtime-platform component.
# Details:
Create a new file at `/Users/socrateshlapolosa/Development/health-service-idp/REALTIME-OAM-EXAMPLE.yaml`. Implement a comprehensive OAM application that uses the realtime-platform component with all available configuration options. Include multiple webservice components that reference the realtime-platform using the realtime parameter. Demonstrate the use of advanced features such as custom MQTT users, data retention settings, scaling configuration, and Snowflake integration. Use the example from the PRD as a reference.

# Test Strategy:
Validate the YAML syntax. Test that the example can be applied to a KubeVela environment. Verify that the realtime-platform and webservice components are created correctly with all the specified configurations. Test the integration between the components and the advanced features.

# Subtasks:
## 1. Define the basic OAM application structure with realtime-platform component [pending]
### Dependencies: None
### Description: Create the initial YAML file structure for the OAM application with the realtime-platform component definition and basic configuration parameters.
### Details:
Create the REALTIME-OAM-EXAMPLE.yaml file with the proper OAM application structure. Define the application metadata (name, description) and include the realtime-platform component with basic configuration such as name, database settings, and visualization settings. Set up the proper resource references and ensure the component follows the OAM specification format. Include comments explaining each section of the configuration.

## 2. Implement multiple webservice components with realtime integration [pending]
### Dependencies: 17.1
### Description: Add multiple webservice components to the OAM application that reference the realtime-platform component using the realtime parameter.
### Details:
Add at least three different webservice components that demonstrate different integration patterns with the realtime-platform. Each webservice should have a unique name, image, and port configuration. Configure the realtime parameter in each webservice to reference the realtime-platform component. Include examples of different access patterns (read-only, read-write, admin). Demonstrate how to configure topic subscriptions and publications for each service.

## 3. Configure advanced MQTT user settings and authentication [pending]
### Dependencies: 17.1
### Description: Implement custom MQTT user configurations with different permission levels and authentication mechanisms.
### Details:
Add a comprehensive mqttUsers section to the realtime-platform component configuration. Define at least three different user types (admin, publisher, subscriber) with appropriate permission patterns. Configure username/password authentication for some users and certificate-based authentication for others. Include ACL patterns that demonstrate topic-level access control. Add comments explaining the security implications of each configuration option.

## 4. Implement data retention and scaling configurations [pending]
### Dependencies: 17.1
### Description: Configure advanced data retention policies and scaling parameters for the realtime-platform component.
### Details:
Add detailed configuration for data retention settings including retention periods for different data types, storage allocation, and cleanup policies. Configure scaling parameters for the Kafka, MQTT, and database components including replica counts, resource requests/limits, and auto-scaling policies. Demonstrate how to configure high-availability settings for production-grade deployments. Include performance tuning parameters for different workload profiles.

## 5. Configure Snowflake integration and advanced analytics features [pending]
### Dependencies: 17.1, 17.4
### Description: Implement Snowflake integration settings and configure advanced analytics features of the realtime-platform.
### Details:
Add Snowflake integration configuration including connection parameters, authentication settings, and data sync policies. Configure data transformation pipelines that demonstrate how to process and enrich data before sending it to Snowflake. Set up advanced analytics features such as real-time dashboards, alerts, and anomaly detection. Include examples of custom metrics and KPIs that can be tracked. Demonstrate how to configure data export schedules and formats.

