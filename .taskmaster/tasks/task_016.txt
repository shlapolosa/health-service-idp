# Task ID: 16
# Title: Create MINIMAL-REALTIME-OAM.yaml Example
# Status: pending
# Dependencies: 1, 3, 4, 15
# Priority: medium
# Description: Create a minimal example OAM application that demonstrates the use of the realtime-platform component with default settings.
# Details:
Create a new file at `/Users/socrateshlapolosa/Development/health-service-idp/MINIMAL-REALTIME-OAM.yaml`. Implement a minimal OAM application that uses the realtime-platform component with default settings. Include a webservice component that references the realtime-platform using the realtime parameter. Use the example from the PRD as a reference. Ensure the example is simple and focuses on the minimal required configuration.

# Test Strategy:
Validate the YAML syntax. Test that the example can be applied to a KubeVela environment. Verify that the realtime-platform and webservice components are created correctly. Test the integration between the components.

# Subtasks:
## 1. Create basic OAM application structure [pending]
### Dependencies: None
### Description: Set up the basic structure of the MINIMAL-REALTIME-OAM.yaml file with the required OAM application components and metadata.
### Details:
Create a new file at `/Users/socrateshlapolosa/Development/health-service-idp/MINIMAL-REALTIME-OAM.yaml`. Initialize the file with the standard OAM application structure including apiVersion, kind, metadata, and spec sections. Set the application name to 'minimal-realtime-app'. Include placeholders for components that will be defined in subsequent steps.

## 2. Define realtime-platform component [pending]
### Dependencies: 16.1
### Description: Add the realtime-platform component definition to the OAM application with default settings.
### Details:
Within the components section of the OAM application, define a realtime-platform component named 'minimal-realtime'. Use the type 'realtime-platform' and include only the required parameters with default values. Do not override any optional parameters to demonstrate the minimal configuration approach.

## 3. Define webservice component [pending]
### Dependencies: 16.2
### Description: Create a webservice component that references the realtime-platform component.
### Details:
Add a webservice component named 'minimal-service' to the components section. Configure it with basic settings (image, ports, etc.). Include the realtime parameter that references the realtime-platform component created in the previous step. Use the simplest possible configuration to demonstrate the integration.

## 4. Define application policies [pending]
### Dependencies: 16.3
### Description: Add necessary policies for the application such as health policy and topology policy.
### Details:
In the policies section of the OAM application, define a health policy that monitors the status of the components. Add a topology policy that defines the relationship between the webservice and realtime-platform components. Keep the policies minimal and focused on demonstrating the basic functionality.

## 5. Add comments and documentation [pending]
### Dependencies: 16.4
### Description: Add inline comments and documentation to explain the purpose and structure of the example.
### Details:
Add comprehensive comments throughout the YAML file to explain each section and parameter. Include a header comment that describes the purpose of the example, the components used, and how they interact. Add references to related documentation or examples for users who want more information. Ensure the example is self-explanatory for new users.

