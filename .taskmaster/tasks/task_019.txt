# Task ID: 19
# Title: Implement Security Hardening
# Status: pending
# Dependencies: 7, 8, 9, 10, 13, 15
# Priority: medium
# Description: Implement security hardening for all components in the real-time platform.
# Details:
In the realtime-compositions.yaml file, implement security hardening for all components. Configure proper MQTT authentication and TLS. Set up Snowflake credential management via External Secrets Operator. Implement network policies to restrict communication between components. Configure service mesh security using Istio. Set up audit logging and access controls. Ensure all sensitive data is stored securely.

# Test Strategy:
Deploy the Security Hardening configuration and verify that all security measures are working correctly. Test MQTT authentication and TLS. Verify that network policies are restricting communication as expected. Test service mesh security. Check that audit logging is capturing relevant events.

# Subtasks:
## 1. Configure MQTT Authentication and TLS [pending]
### Dependencies: None
### Description: Implement secure authentication and TLS encryption for the MQTT broker to protect device communications
### Details:
Update the realtime-compositions.yaml file to configure the MQTT broker security settings. Add TLS certificate configuration by creating a Secret resource containing the server certificate and private key. Modify the Mosquitto configuration to enable password-based authentication and TLS on ports 8883 (MQTT with TLS) and 9001 (WebSockets). Create a ConfigMap for mosquitto.conf with appropriate security settings including 'allow_anonymous false', 'password_file /mosquitto/config/passwd', and TLS certificate paths. Update volume mounts to include the TLS certificates and password file.

## 2. Implement Snowflake Credential Management via External Secrets Operator [pending]
### Dependencies: 19.1
### Description: Set up secure credential management for Snowflake connections using External Secrets Operator
### Details:
Install the External Secrets Operator in the cluster if not already present. Create a SecretStore resource that connects to your external secrets provider (AWS Secrets Manager, HashiCorp Vault, etc.). Define an ExternalSecret resource that references Snowflake credentials stored in the external provider. Configure the ExternalSecret to create a Kubernetes Secret with the format required by the Kafka Connect Snowflake connector. Update the Kafka component in realtime-compositions.yaml to mount this secret instead of using environment variables for credentials. Ensure the secret includes SNOWFLAKE_URL, SNOWFLAKE_USER, SNOWFLAKE_PRIVATE_KEY, and SNOWFLAKE_DATABASE fields.

## 3. Implement Network Policies for Component Isolation [pending]
### Dependencies: 19.1, 19.2
### Description: Create Kubernetes Network Policies to restrict communication between components to only necessary paths
### Details:
Define NetworkPolicy resources in realtime-compositions.yaml for each component. For the MQTT broker, allow only inbound connections on ports 1883, 8883, and 9001 from authorized sources. For Kafka, restrict access to only components that need to produce or consume messages (Lenses Agent, MQTT connector). For PostgreSQL, allow connections only from Lenses HQ, Lenses Agent, and Metabase. For Lenses components, restrict API access to authorized frontend services. Use podSelector, namespaceSelector, and ipBlock selectors to precisely control traffic. Implement default deny policies for each namespace to block unspecified traffic. Label all pods appropriately to enable policy targeting.

## 4. Configure Service Mesh Security with Istio [pending]
### Dependencies: 19.3
### Description: Implement Istio service mesh for enhanced security controls including mTLS, authorization policies, and traffic encryption
### Details:
Install Istio in the cluster if not already present. Add the necessary annotations to enable Istio sidecar injection for all components in realtime-compositions.yaml. Create DestinationRule resources to enforce mutual TLS (mTLS) between all services. Implement AuthorizationPolicy resources to define fine-grained access controls based on service identity, path, method, and headers. Configure Istio Gateway and VirtualService resources for secure ingress traffic with proper TLS termination. Set up Istio RequestAuthentication and PeerAuthentication for JWT validation and service-to-service authentication. Update the realtime-compositions.yaml to include these Istio resources alongside the component definitions.

## 5. Implement Audit Logging and Secure Storage [pending]
### Dependencies: 19.4
### Description: Set up comprehensive audit logging for all components and ensure secure storage of sensitive data
### Details:
Configure audit logging for all components in realtime-compositions.yaml. For Kafka, enable audit logging by setting the appropriate properties in server.properties (kafka.authorizer.logger=INFO, log4j.logger.kafka.request.logger=INFO). For PostgreSQL, enable pgaudit extension and configure it to log all DDL and DML operations. For MQTT, configure detailed logging of connection attempts and authentication events. Implement a centralized logging solution using Fluentd or Fluent Bit to collect logs from all components. Configure log forwarding to a secure SIEM system. For secure storage, implement encryption-at-rest for all persistent volumes using Kubernetes encryption providers. Configure Kubernetes Secrets encryption using KMS. Ensure all sensitive configuration values are stored as Secrets rather than ConfigMaps or environment variables.

