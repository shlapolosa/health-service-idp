name: Chat Services GitOps Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*', 'release/*' ]
    paths:
      - 'microservices/**/domain.yml'
      - 'microservices/**/config.yml'
      - 'microservices/**/data/**'
      - 'microservices/**/actions/**'
      - 'microservices/**/docker/Dockerfile.rasa'
      - 'microservices/**/docker/Dockerfile.actions'
      - 'microservices/**/requirements.txt'
      - 'microservices/**/credentials.yml'
      - 'microservices/**/endpoints.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'microservices/**/domain.yml'
      - 'microservices/**/config.yml'
      - 'microservices/**/data/**'
      - 'microservices/**/actions/**'
      - 'microservices/**/docker/Dockerfile.rasa'
      - 'microservices/**/docker/Dockerfile.actions'

permissions:
  contents: read
  actions: read
  security-events: write
  packages: write

env:
  REGISTRY: docker.io
  REGISTRY_USERNAME: socrates12345
  GITOPS_REPO: health-service-idp-gitops
  GITOPS_BRANCH: main

jobs:
  # Phase 1: Detect Chat Services
  detect-chat-services:
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.changes.outputs.changed-services }}
      changed-services-json: ${{ steps.changes.outputs.changed-services-json }}
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed chat services
        id: changes
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Find chat services (directories with domain.yml and config.yml)
          CHAT_SERVICES=""
          CHAT_SERVICES_JSON="[]"
          
          # Get all microservice directories that have changed
          CHANGED_DIRS=$(echo "$CHANGED_FILES" | grep '^microservices/' | cut -d'/' -f1-2 | sort -u | cut -d'/' -f2)
          
          if [ ! -z "$CHANGED_DIRS" ]; then
            for service in $CHANGED_DIRS; do
              # Check if this service has chat indicators (domain.yml and config.yml)
              if [ -f "microservices/$service/domain.yml" ] && [ -f "microservices/$service/config.yml" ]; then
                echo "ü§ñ Detected chat service: $service"
                if [ -z "$CHAT_SERVICES" ]; then
                  CHAT_SERVICES="$service"
                else
                  CHAT_SERVICES="$CHAT_SERVICES,$service"
                fi
              fi
            done
            
            # Create JSON array for matrix
            if [ ! -z "$CHAT_SERVICES" ]; then
              CHAT_SERVICES_JSON="["
              FIRST=true
              IFS=',' read -ra SERVICE_ARRAY <<< "$CHAT_SERVICES"
              for service in "${SERVICE_ARRAY[@]}"; do
                if [ "$FIRST" = true ]; then
                  CHAT_SERVICES_JSON="$CHAT_SERVICES_JSON\"$service\""
                  FIRST=false
                else
                  CHAT_SERVICES_JSON="$CHAT_SERVICES_JSON,\"$service\""
                fi
              done
              CHAT_SERVICES_JSON="$CHAT_SERVICES_JSON]"
            fi
          fi
          
          # Determine if we should deploy (only on main branch pushes)
          SHOULD_DEPLOY="false"
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            SHOULD_DEPLOY="true"
          fi
          
          echo "changed-services=$CHAT_SERVICES" >> $GITHUB_OUTPUT
          echo "changed-services-json=$CHAT_SERVICES_JSON" >> $GITHUB_OUTPUT
          echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "Chat services found: $CHAT_SERVICES"
          echo "Chat services JSON: $CHAT_SERVICES_JSON"
          echo "Should deploy: $SHOULD_DEPLOY"

  # Phase 2: Security Scanning for Chat Services
  chat-vulnerability-scan:
    needs: detect-chat-services
    if: needs.detect-chat-services.outputs.changed-services != '' && fromJson(needs.detect-chat-services.outputs.changed-services-json)[0] != null
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-chat-services.outputs.changed-services-json) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Rasa image for scanning
        run: |
          echo "üîç Building Rasa container for ${{ matrix.service }} security scanning..."
          docker build -t local-scan/${{ matrix.service }}-rasa:latest \
            -f "microservices/${{ matrix.service }}/docker/Dockerfile.rasa" \
            "microservices/${{ matrix.service }}"

      - name: Build Actions image for scanning
        run: |
          echo "üîç Building Actions container for ${{ matrix.service }} security scanning..."
          docker build -t local-scan/${{ matrix.service }}-actions:latest \
            -f "microservices/${{ matrix.service }}/docker/Dockerfile.actions" \
            "microservices/${{ matrix.service }}"

      - name: Run Trivy on Rasa container
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'local-scan/${{ matrix.service }}-rasa:latest'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}-rasa.sarif'
        continue-on-error: true

      - name: Run Trivy on Actions container
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'local-scan/${{ matrix.service }}-actions:latest'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}-actions.sarif'
        continue-on-error: true

      - name: Upload Rasa scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}-rasa.sarif'
          category: 'trivy-${{ matrix.service }}-rasa'
        continue-on-error: true

      - name: Upload Actions scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}-actions.sarif'
          category: 'trivy-${{ matrix.service }}-actions'
        continue-on-error: true

  # Phase 3: Build and Push Chat Containers
  build-chat-containers:
    needs: [detect-chat-services, chat-vulnerability-scan]
    if: always() && needs.detect-chat-services.outputs.changed-services != '' && needs.detect-chat-services.outputs.should-deploy == 'true' && (needs.chat-vulnerability-scan.result == 'success' || needs.chat-vulnerability-scan.result == 'failure')
    runs-on: ubuntu-latest
    outputs:
      version-info: ${{ steps.versions.outputs.version-info }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push chat containers
        id: versions
        run: |
          chmod +x .github/scripts/version-manager.sh
          
          IFS=',' read -ra SERVICES <<< "${{ needs.detect-chat-services.outputs.changed-services }}"
          VERSION_INFO=""
          
          for service in "${SERVICES[@]}"; do
            echo "ü§ñ Building chat service containers for: $service"
            
            # Generate semantic version
            SEMVER=$(.github/scripts/version-manager.sh version "$service")
            COMMIT_SHA="${GITHUB_SHA:0:7}"
            
            echo "üè∑Ô∏è Chat Service: $service"
            echo "üì¶ Semantic Version: $SEMVER"
            
            SERVICE_BASE="${service%-*}"  # Remove -anthropic or -deterministic suffix if present
            if [ "$SERVICE_BASE" = "$service" ]; then
              SERVICE_BASE="$service"  # No suffix to remove
            fi
            
            # Build Rasa container
            RASA_IMAGE="${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${SERVICE_BASE}-rasa"
            RASA_TAG="$RASA_IMAGE:$COMMIT_SHA"
            RASA_LATEST="$RASA_IMAGE:latest"
            RASA_VERSION="$RASA_IMAGE:$SEMVER"
            
            echo "üèóÔ∏è Building Rasa container: $RASA_TAG"
            docker build -t "$RASA_TAG" \
              -f "microservices/$service/docker/Dockerfile.rasa" \
              --build-arg BUILD_VERSION="$SEMVER" \
              --build-arg BUILD_COMMIT="$COMMIT_SHA" \
              --build-arg BUILD_DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              --label "org.opencontainers.image.version=$SEMVER" \
              --label "org.opencontainers.image.revision=${{ github.sha }}" \
              --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
              --label "org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              --label "org.opencontainers.image.title=${SERVICE_BASE}-rasa" \
              --label "org.opencontainers.image.description=Rasa Chatbot Server - $service" \
              --label "version=$SEMVER" \
              --label "commit=${{ github.sha }}" \
              --label "commit-short=$COMMIT_SHA" \
              --label "branch=${{ github.ref_name }}" \
              --label "service=${SERVICE_BASE}-rasa" \
              --label "service-type=chat" \
              --label "component=rasa-server" \
              --label "build-date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              --label "build-number=${{ github.run_number }}" \
              --label "workflow-run=${{ github.run_id }}" \
              "microservices/$service"
            
            # Tag and push Rasa container
            docker tag "$RASA_TAG" "$RASA_LATEST"
            docker tag "$RASA_TAG" "$RASA_VERSION"
            echo "üì§ Pushing Rasa container tags..."
            docker push "$RASA_TAG"
            docker push "$RASA_LATEST"
            docker push "$RASA_VERSION"
            
            # Build Actions container
            ACTIONS_IMAGE="${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${SERVICE_BASE}-actions"
            ACTIONS_TAG="$ACTIONS_IMAGE:$COMMIT_SHA"
            ACTIONS_LATEST="$ACTIONS_IMAGE:latest"
            ACTIONS_VERSION="$ACTIONS_IMAGE:$SEMVER"
            
            echo "üèóÔ∏è Building Actions container: $ACTIONS_TAG"
            docker build -t "$ACTIONS_TAG" \
              -f "microservices/$service/docker/Dockerfile.actions" \
              --build-arg BUILD_VERSION="$SEMVER" \
              --build-arg BUILD_COMMIT="$COMMIT_SHA" \
              --build-arg BUILD_DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              --label "org.opencontainers.image.version=$SEMVER" \
              --label "org.opencontainers.image.revision=${{ github.sha }}" \
              --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
              --label "org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              --label "org.opencontainers.image.title=${SERVICE_BASE}-actions" \
              --label "org.opencontainers.image.description=Rasa Actions Server - $service" \
              --label "version=$SEMVER" \
              --label "commit=${{ github.sha }}" \
              --label "commit-short=$COMMIT_SHA" \
              --label "branch=${{ github.ref_name }}" \
              --label "service=${SERVICE_BASE}-actions" \
              --label "service-type=chat" \
              --label "component=actions-server" \
              --label "build-date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              --label "build-number=${{ github.run_number }}" \
              --label "workflow-run=${{ github.run_id }}" \
              "microservices/$service"
            
            # Tag and push Actions container
            docker tag "$ACTIONS_TAG" "$ACTIONS_LATEST"
            docker tag "$ACTIONS_TAG" "$ACTIONS_VERSION"
            echo "üì§ Pushing Actions container tags..."
            docker push "$ACTIONS_TAG"
            docker push "$ACTIONS_LATEST"
            docker push "$ACTIONS_VERSION"
            
            echo "‚úÖ Successfully built and pushed chat service containers:"
            echo "   Rasa: $RASA_TAG, $RASA_LATEST, $RASA_VERSION"
            echo "   Actions: $ACTIONS_TAG, $ACTIONS_LATEST, $ACTIONS_VERSION"
            
            # Store version info
            VERSION_INFO="$VERSION_INFO$service:$SEMVER,"
          done
          
          echo "version-info=${VERSION_INFO%,}" >> $GITHUB_OUTPUT

  # Phase 4: GitOps Update for Chat Services
  trigger-chat-gitops-update:
    needs: [detect-chat-services, build-chat-containers]
    if: needs.detect-chat-services.outputs.changed-services != '' && needs.detect-chat-services.outputs.should-deploy == 'true' && needs.build-chat-containers.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger GitOps repository update for chat services
        run: |
          echo "üöÄ Triggering GitOps repository update for chat services..."
          
          SERVICES="${{ needs.detect-chat-services.outputs.changed-services }}"
          VERSION_INFO="${{ needs.build-chat-containers.outputs.version-info }}"
          SOURCE_COMMIT="${{ github.sha }}"
          COMMIT_SHA="${GITHUB_SHA:0:7}"
          
          echo "Chat services to update: $SERVICES"
          echo "Version info: $VERSION_INFO"
          echo "Source commit: $SOURCE_COMMIT"
          
          # Create payload for each chat service
          IFS=',' read -ra SERVICE_ARRAY <<< "$SERVICES"
          
          DEPLOYMENTS=""
          for service in "${SERVICE_ARRAY[@]}"; do
            SERVICE_BASE="${service%-*}"  # Remove -anthropic or -deterministic suffix if present
            if [ "$SERVICE_BASE" = "$service" ]; then
              SERVICE_BASE="$service"  # No suffix to remove
            fi
            
            RASA_IMAGE="${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${SERVICE_BASE}-rasa:$COMMIT_SHA"
            ACTIONS_IMAGE="${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${SERVICE_BASE}-actions:$COMMIT_SHA"
            
            if [ -z "$DEPLOYMENTS" ]; then
              DEPLOYMENTS="\"$service\": {\"rasa_image\": \"$RASA_IMAGE\", \"actions_image\": \"$ACTIONS_IMAGE\", \"commit\": \"$COMMIT_SHA\", \"type\": \"chat\"}"
            else
              DEPLOYMENTS="$DEPLOYMENTS, \"$service\": {\"rasa_image\": \"$RASA_IMAGE\", \"actions_image\": \"$ACTIONS_IMAGE\", \"commit\": \"$COMMIT_SHA\", \"type\": \"chat\"}"
            fi
          done
          
          echo "Chat deployments payload: {$DEPLOYMENTS}"
          
          # Set up GitHub CLI authentication
          export GH_TOKEN="${{ secrets.PERSONAL_ACCESS_TOKEN }}"
          
          echo "üì§ Sending chat services dispatch event using GitHub CLI..."
          
          # Trigger repository dispatch for chat services
          if gh api repos/shlapolosa/${{ env.GITOPS_REPO }}/dispatches \
            --method POST \
            --field event_type=update-chat-deployments \
            --field client_payload[services]="$SERVICES" \
            --field client_payload[version_info]="$VERSION_INFO" \
            --field client_payload[source_commit]="$SOURCE_COMMIT" \
            --field client_payload[registry]="${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}" \
            --field client_payload[branch]="${{ github.ref_name }}" \
            --field client_payload[workflow_run]="${{ github.run_id }}" \
            --raw-field client_payload[deployments]="{$DEPLOYMENTS}"; then
            echo "‚úÖ Chat services GitOps repository dispatch event sent successfully!"
            echo "üîó GitOps repository will handle the chat service manifest updates"
          else
            echo "‚ùå Failed to send chat services dispatch event"
            echo "Manual GitOps update required for chat services:"
            echo "  Services: $SERVICES"
            echo "  Rasa Images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/SERVICE_BASE-rasa:$COMMIT_SHA"
            echo "  Actions Images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/SERVICE_BASE-actions:$COMMIT_SHA"
            exit 1
          fi

  # Phase 5: Generate Summary
  chat-deployment-summary:
    needs: [detect-chat-services, build-chat-containers, trigger-chat-gitops-update]
    if: always() && needs.detect-chat-services.outputs.changed-services != ''
    runs-on: ubuntu-latest
    steps:
      - name: Generate chat deployment summary
        run: |
          echo "## ü§ñ Chat Services GitOps Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Security Scanning" >> $GITHUB_STEP_SUMMARY
          echo "- **Chat Vulnerability Scan**: ${{ needs.chat-vulnerability-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üèóÔ∏è Build & Deploy" >> $GITHUB_STEP_SUMMARY
          echo "- **Changed Chat Services**: ${{ needs.detect-chat-services.outputs.changed-services }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Building**: ${{ needs.build-chat-containers.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitOps Update**: ${{ needs.trigger-chat-gitops-update.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Info**: ${{ needs.build-chat-containers.outputs.version-info }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Pipeline Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number**: \`${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **GitOps Repo**: [health-service-idp-gitops](https://github.com/shlapolosa/health-service-idp-gitops)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéØ **Chat Pipeline Status**: Detection ‚Üí Security ‚Üí Build ‚Üí GitOps ‚Üí Complete!"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Built Containers" >> $GITHUB_STEP_SUMMARY
          
          IFS=',' read -ra SERVICES <<< "${{ needs.detect-chat-services.outputs.changed-services }}"
          COMMIT_SHA="${{ github.sha:0:7 }}"
          
          for service in "${SERVICES[@]}"; do
            SERVICE_BASE="${service%-*}"
            if [ "$SERVICE_BASE" = "$service" ]; then
              SERVICE_BASE="$service"
            fi
            echo "- **$service**:" >> $GITHUB_STEP_SUMMARY
            echo "  - Rasa: \`socrates12345/${SERVICE_BASE}-rasa:$COMMIT_SHA\`" >> $GITHUB_STEP_SUMMARY
            echo "  - Actions: \`socrates12345/${SERVICE_BASE}-actions:$COMMIT_SHA\`" >> $GITHUB_STEP_SUMMARY
          done